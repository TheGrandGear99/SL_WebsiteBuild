This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.env.example
.eslintignore
.eslintrc.cjs
.github/workflows/build.yml
.github/workflows/format.yml
.github/workflows/linting.yml
.github/workflows/tests.yml
.gitignore
.npmrc
.prettierignore
.prettierrc
analytics_docs.md
checks.sh
database_migration.sql
email_docs.md
LICENSE
package.json
postcss.config.js
README.md
SECURITY.md
src/ambient.d.ts
src/app.css
src/app.d.ts
src/app.html
src/config.ts
src/DatabaseDefinitions.ts
src/hooks.server.ts
src/index.test.ts
src/lib/build_index.ts
src/lib/components/pricing_module.svelte
src/lib/components/ProductCard.svelte
src/lib/data/products.ts
src/lib/emails/welcome_email_html.hbs
src/lib/emails/welcome_email_text.hbs
src/lib/index.js
src/lib/load_helpers.ts
src/lib/mailer.test.ts
src/lib/mailer.ts
src/routes/(admin)/account/(menu)/+layout.svelte
src/routes/(admin)/account/(menu)/+page.server.ts
src/routes/(admin)/account/(menu)/+page.svelte
src/routes/(admin)/account/(menu)/billing/+page.server.ts
src/routes/(admin)/account/(menu)/billing/+page.svelte
src/routes/(admin)/account/(menu)/billing/manage/+page.server.ts
src/routes/(admin)/account/(menu)/settings/+page.svelte
src/routes/(admin)/account/(menu)/settings/change_email_subscription/+page.svelte
src/routes/(admin)/account/(menu)/settings/change_email/+page.svelte
src/routes/(admin)/account/(menu)/settings/change_password/+page.svelte
src/routes/(admin)/account/(menu)/settings/delete_account/+page.svelte
src/routes/(admin)/account/(menu)/settings/edit_profile/+page.svelte
src/routes/(admin)/account/(menu)/settings/reset_password/+page.svelte
src/routes/(admin)/account/(menu)/settings/settings_module.svelte
src/routes/(admin)/account/+layout.server.ts
src/routes/(admin)/account/+layout.svelte
src/routes/(admin)/account/+layout.ts
src/routes/(admin)/account/api/+page.server.ts
src/routes/(admin)/account/api/page.server.test.ts
src/routes/(admin)/account/create_profile/+page.svelte
src/routes/(admin)/account/create_profile/+page.ts
src/routes/(admin)/account/downloads/+page.server.ts
src/routes/(admin)/account/downloads/+page.svelte
src/routes/(admin)/account/select_plan/+page.svelte
src/routes/(admin)/account/sign_out/+page.svelte
src/routes/(admin)/account/subscribe/[slug]/+page.server.ts
src/routes/(admin)/account/subscription_helpers.server.ts
src/routes/(marketing)/+layout.svelte
src/routes/(marketing)/+page.svelte
src/routes/(marketing)/+page.ts
src/routes/(marketing)/auth/callback/+server.js
src/routes/(marketing)/contact_us/+page.server.ts
src/routes/(marketing)/contact_us/+page.svelte
src/routes/(marketing)/docs/+page.svelte
src/routes/(marketing)/faq/+page.svelte
src/routes/(marketing)/license-hub/+page.svelte
src/routes/(marketing)/license-hub/+page.ts
src/routes/(marketing)/login/+layout.server.ts
src/routes/(marketing)/login/+layout.svelte
src/routes/(marketing)/login/+layout.ts
src/routes/(marketing)/login/+page.svelte
src/routes/(marketing)/login/current_password_error/+page.svelte
src/routes/(marketing)/login/forgot_password/+page.server.ts
src/routes/(marketing)/login/forgot_password/+page.svelte
src/routes/(marketing)/login/login_config.ts
src/routes/(marketing)/login/sign_in/+page.server.ts
src/routes/(marketing)/login/sign_in/+page.svelte
src/routes/(marketing)/login/sign_up/+page.server.ts
src/routes/(marketing)/login/sign_up/+page.svelte
src/routes/(marketing)/search/+page.server.ts
src/routes/(marketing)/search/+page.svelte
src/routes/(marketing)/search/api.json/+server.ts
src/routes/(marketing)/sitemap.xml/+server.ts
src/routes/(marketing)/trading-automation/+layout.ts
src/routes/(marketing)/trading-automation/+page.svelte
src/routes/+error.svelte
src/routes/+layout.svelte
static/images/cm_logo.svg
static/images/rss.svg
static/robots.txt
supabase/migrations/20240730010101_initial.sql
supabase/migrations/20240731051052_add_unsubscribed_to_profiles.sql
svelte.config.js
tailwind.config.ts
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".eslintignore">
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock
</file>

<file path=".github/workflows/build.yml">
name: Build

on: [push, pull_request]

env:
  PUBLIC_SUPABASE_URL: "https://fake_test_url.supabase.co"
  PUBLIC_SUPABASE_ANON_KEY: "fake_anon_key"
  PRIVATE_SUPABASE_SERVICE_ROLE: "fake_service_role"
  PRIVATE_STRIPE_API_KEY: "fake_strip_api_key"

jobs:
  build_and_test:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: NPM install
        run: npm install

      - name: SvelteKit Build
        run: npm run build
</file>

<file path=".github/workflows/linting.yml">
name: Linting

on: [push, pull_request]

env:
  PUBLIC_SUPABASE_URL: "https://fake_test_url.supabase.co"
  PUBLIC_SUPABASE_ANON_KEY: "fake_anon_key"
  PRIVATE_SUPABASE_SERVICE_ROLE: "fake_service_role"
  PRIVATE_STRIPE_API_KEY: "fake_strip_api_key"

jobs:
  build_and_test:
    name: Linting and Typechecking
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: NPM install
        run: npm install

      - name: Linting
        run: npm run lint

      - name: Typechecking
        run: npm run check
</file>

<file path=".github/workflows/tests.yml">
name: Tests

on: [push, pull_request]

env:
  PUBLIC_SUPABASE_URL: "https://fake_test_url.supabase.co"
  PUBLIC_SUPABASE_ANON_KEY: "fake_anon_key"
  PRIVATE_SUPABASE_SERVICE_ROLE: "fake_service_role"
  PRIVATE_STRIPE_API_KEY: "fake_strip_api_key"

jobs:
  build_and_test:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: NPM install
        run: npm install

      - name: Tests
        run: npm run test_run
</file>

<file path=".gitignore">
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example
vite.config.js.timestamp-*
vite.config.ts.timestamp-*
</file>

<file path=".npmrc">
engine-strict=true
resolution-mode=highest
</file>

<file path=".prettierrc">
{
  "plugins": ["prettier-plugin-svelte"],
  "useTabs": false,
  "tabWidth": 2,
  "semi": false,
  "overrides": [{ "files": "*.svelte", "options": { "parser": "svelte" } }]
}
</file>

<file path="SECURITY.md">
# Security Policy

## Reporting a Vulnerability

Please report any vulnerabilities via GitHub: https://github.com/CriticalMoments/CMSaasStarter/security

This allows us to privately fix and publish the fix before public disclosure.
</file>

<file path="src/ambient.d.ts">
declare global {
  type FormAccountUpdateResult = {
    errorMessage?: string
    errorFields?: string[]
    fullName?: string
    companyName?: string
    website?: string
    email?: string
  }
}

export {}
</file>

<file path="src/app.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%sveltekit.assets%/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    %sveltekit.head%
  </head>
  <body
    data-sveltekit-preload-data="hover"
    style="min-height: 100vh; display: flex; flex-direction: column"
  >
    <div style="display: contents">%sveltekit.body%</div>
  </body>
</html>
</file>

<file path="src/index.test.ts">
import { describe, it, expect } from "vitest"

describe("sum test", () => {
  it("adds 1 + 2 to equal 3", () => {
    expect(1 + 2).toBe(3)
  })
})
</file>

<file path="src/lib/index.js">
// place files you want to import through the `$lib` alias in this folder.
</file>

<file path="src/routes/(admin)/account/(menu)/settings/reset_password/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")
</script>

<svelte:head>
  <title>Reset Password</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Settings</h1>

<SettingsModule
  title="Reset Password"
  editable={true}
  saveButtonTitle="Reset Password"
  successTitle="Password Changed"
  successBody="On next sign in, use your new password."
  formTarget="/account/api?/updatePassword"
  fields={[
    {
      id: "newPassword1",
      label: "New Password",
      initialValue: "",
      inputType: "password",
    },
    {
      id: "newPassword2",
      label: "Confirm New Password",
      initialValue: "",
      inputType: "password",
    },
  ]}
/>
</file>

<file path="src/routes/(marketing)/+page.ts">
export const prerender = true
</file>

<file path="src/routes/(marketing)/login/+page.svelte">
<svelte:head>
  <title>Log In</title>
</svelte:head>

<div>
  <h1 class="text-xl font-bold">Get Started</h1>
  <a href="/login/sign_up"
    ><button class="btn btn-primary mt-3 btn-wide">Sign Up</button></a
  >

  <h1 class="text-xl mt-6">Already have an account?</h1>
  <a href="/login/sign_in"
    ><button class="btn btn-outline btn-primary mt-3 btn-wide">Sign In</button
    ></a
  >
</div>
</file>

<file path="src/routes/(marketing)/login/current_password_error/+page.svelte">
<svelte:head>
  <title>Current Password Incorrect</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Current Password Incorrect</h1>

<p>
  You attempted edit your account with an incorrect current password, and have
  been logged out.
</p>
<p class="mt-6">
  If you remember your password <a href="/login/sign_in" class="link">sign in</a
  > and try again.
</p>
<p class="mt-6">
  If you forget your password <a href="/login/forgot_password" class="link"
    >reset it</a
  >.
</p>
</file>

<file path="src/routes/(marketing)/login/forgot_password/+page.server.ts">
export const ssr = false
</file>

<file path="src/routes/(marketing)/login/sign_in/+page.server.ts">
export const ssr = false
</file>

<file path="src/routes/(marketing)/login/sign_up/+page.server.ts">
export const ssr = false
</file>

<file path="static/images/cm_logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="420" height="154" fill="none" xmlns:v="https://vecta.io/nano"><g clip-path="url(#A)"><path d="M43.475 23.46c-1.303-1.587-2.918-2.805-4.845-3.655-1.87-.85-4.052-1.275-6.545-1.275s-4.817.482-6.97 1.445c-2.097.963-3.938 2.323-5.525 4.08-1.53 1.7-2.748 3.74-3.655 6.12-.85 2.38-1.275 4.958-1.275 7.735 0 2.833.425 5.44 1.275 7.82.907 2.323 2.125 4.363 3.655 6.12 1.53 1.7 3.315 3.032 5.355 3.995 2.097.963 4.335 1.445 6.715 1.445 2.72 0 5.128-.567 7.225-1.7s3.825-2.72 5.185-4.76l11.05 8.245c-2.55 3.57-5.78 6.205-9.69 7.905s-7.933 2.55-12.07 2.55c-4.703 0-9.038-.737-13.005-2.21s-7.395-3.57-10.285-6.29C7.18 58.253 4.913 54.91 3.27 51 1.683 47.09.89 42.727.89 37.91s.793-9.18 2.38-13.09c1.643-3.91 3.91-7.225 6.8-9.945 2.89-2.777 6.318-4.902 10.285-6.375s8.302-2.21 13.005-2.21c1.7 0 3.457.17 5.27.51a25.68 25.68 0 0 1 5.44 1.445c1.813.68 3.542 1.587 5.185 2.72s3.117 2.522 4.42 4.165l-10.2 8.33zm17.219 3.23h12.75v6.63h.17c1.36-2.55 2.975-4.448 4.845-5.695 1.87-1.303 4.222-1.955 7.055-1.955a28.79 28.79 0 0 1 2.21.085c.737.057 1.417.17 2.04.34V37.74a15.59 15.59 0 0 0-2.72-.595c-.85-.17-1.757-.255-2.72-.255-2.437 0-4.363.34-5.78 1.02s-2.522 1.643-3.315 2.89c-.737 1.19-1.218 2.635-1.445 4.335s-.34 3.57-.34 5.61V68h-12.75V26.69zm34.784 0h12.75V68h-12.75V26.69zm-1.02-13.005c0-2.04.708-3.768 2.125-5.185 1.473-1.473 3.23-2.21 5.27-2.21s3.768.737 5.185 2.21c1.473 1.417 2.21 3.145 2.21 5.185s-.737 3.797-2.21 5.27c-1.417 1.417-3.145 2.125-5.185 2.125s-3.797-.708-5.27-2.125c-1.417-1.473-2.125-3.23-2.125-5.27zm51.065 23.205h-11.22v13.77c0 1.133.056 2.182.17 3.145.113.907.368 1.7.765 2.38s.991 1.218 1.785 1.615c.85.34 1.955.51 3.315.51.68 0 1.558-.057 2.635-.17 1.133-.17 1.983-.51 2.55-1.02v10.625c-1.417.51-2.89.85-4.42 1.02s-3.032.255-4.505.255c-2.154 0-4.137-.227-5.95-.68s-3.4-1.162-4.76-2.125c-1.36-1.02-2.437-2.323-3.23-3.91-.737-1.587-1.105-3.513-1.105-5.78V36.89h-8.16v-10.2h8.16V14.45h12.75v12.24h11.22v10.2zm6.649-10.2h12.75V68h-12.75V26.69zm-1.02-13.005c0-2.04.708-3.768 2.125-5.185 1.473-1.473 3.23-2.21 5.27-2.21s3.768.737 5.185 2.21c1.473 1.417 2.21 3.145 2.21 5.185s-.737 3.797-2.21 5.27c-1.417 1.417-3.145 2.125-5.185 2.125s-3.797-.708-5.27-2.125c-1.417-1.473-2.125-3.23-2.125-5.27zm50.895 26.35c-.623-.907-1.502-1.643-2.635-2.21-1.133-.623-2.352-.935-3.655-.935-3.23 0-5.752.963-7.565 2.89-1.757 1.927-2.635 4.448-2.635 7.565s.878 5.638 2.635 7.565c1.813 1.927 4.335 2.89 7.565 2.89 1.417 0 2.635-.312 3.655-.935s1.898-1.36 2.635-2.21l8.415 8.84a16.59 16.59 0 0 1-7.055 4.335c-2.663.793-5.213 1.19-7.65 1.19-3.173 0-6.177-.51-9.01-1.53-2.777-1.02-5.213-2.465-7.31-4.335-2.04-1.927-3.655-4.222-4.845-6.885s-1.785-5.638-1.785-8.925.595-6.262 1.785-8.925 2.805-4.93 4.845-6.8c2.097-1.927 4.533-3.4 7.31-4.42 2.833-1.02 5.837-1.53 9.01-1.53 2.437 0 4.987.425 7.65 1.275 2.72.793 5.072 2.21 7.055 4.25l-8.415 8.84zm38.966 22.78h-.17c-1.417 2.21-3.315 3.797-5.695 4.76-2.323.963-4.788 1.445-7.395 1.445-1.927 0-3.797-.283-5.61-.85-1.757-.51-3.315-1.303-4.675-2.38s-2.437-2.408-3.23-3.995-1.19-3.428-1.19-5.525c0-2.38.425-4.392 1.275-6.035a12.41 12.41 0 0 1 3.57-4.08c1.53-1.077 3.258-1.898 5.185-2.465 1.927-.623 3.91-1.077 5.95-1.36 2.097-.283 4.165-.453 6.205-.51l5.78-.085c0-2.267-.822-4.052-2.465-5.355-1.587-1.36-3.485-2.04-5.695-2.04-2.097 0-4.023.453-5.78 1.36-1.7.85-3.23 2.04-4.59 3.57l-6.8-6.97c2.38-2.21 5.157-3.853 8.33-4.93 3.173-1.133 6.46-1.7 9.86-1.7 3.74 0 6.8.482 9.18 1.445 2.437.907 4.363 2.267 5.78 4.08 1.473 1.813 2.493 4.052 3.06 6.715.567 2.607.85 5.638.85 9.095V68h-11.73v-5.185zm-3.145-12.92c-.963 0-2.182.057-3.655.17-1.417.057-2.805.283-4.165.68-1.303.397-2.437.992-3.4 1.785-.907.793-1.36 1.898-1.36 3.315 0 1.53.652 2.663 1.955 3.4s2.663 1.105 4.08 1.105c1.247 0 2.437-.17 3.57-.51 1.19-.34 2.238-.822 3.145-1.445a6.59 6.59 0 0 0 2.125-2.38c.567-.963.85-2.097.85-3.4v-2.72h-3.145zM260.912 3.74h12.75V68h-12.75V3.74zM4.12 89.82h20.06l13.855 39.27h.17l13.94-39.27H72.12V150H58.86v-46.155h-.17L42.88 150H32.765L17.55 103.845h-.17V150H4.12V89.82zm77.124 39.525c0-3.287.595-6.262 1.785-8.925s2.805-4.93 4.845-6.8c2.097-1.927 4.533-3.4 7.31-4.42 2.833-1.02 5.836-1.53 9.01-1.53s6.148.51 8.925 1.53c2.833 1.02 5.27 2.493 7.31 4.42 2.096 1.87 3.74 4.137 4.93 6.8s1.785 5.638 1.785 8.925-.595 6.262-1.785 8.925-2.834 4.958-4.93 6.885c-2.04 1.87-4.477 3.315-7.31 4.335-2.777 1.02-5.752 1.53-8.925 1.53s-6.177-.51-9.01-1.53c-2.777-1.02-5.213-2.465-7.31-4.335-2.04-1.927-3.655-4.222-4.845-6.885s-1.785-5.638-1.785-8.925zm12.75 0c0 3.117.878 5.638 2.635 7.565 1.813 1.927 4.335 2.89 7.565 2.89s5.723-.963 7.48-2.89c1.813-1.927 2.72-4.448 2.72-7.565s-.907-5.638-2.72-7.565c-1.757-1.927-4.25-2.89-7.48-2.89s-5.752.963-7.565 2.89c-1.757 1.927-2.635 4.448-2.635 7.565zm40.659-20.655h12.24v5.61h.17c.397-.793.964-1.587 1.7-2.38s1.615-1.502 2.635-2.125 2.182-1.133 3.485-1.53 2.72-.595 4.25-.595c2.89 0 5.44.595 7.65 1.785 2.267 1.19 3.967 3.06 5.1 5.61 1.474-2.663 3.259-4.562 5.355-5.695s4.675-1.7 7.735-1.7c2.777 0 5.1.482 6.97 1.445 1.927.907 3.429 2.182 4.505 3.825 1.134 1.587 1.927 3.485 2.38 5.695.51 2.153.765 4.477.765 6.97V150h-12.75v-24.055c0-1.927-.425-3.57-1.275-4.93-.793-1.417-2.238-2.125-4.335-2.125-1.473 0-2.72.255-3.74.765-.963.453-1.756 1.105-2.38 1.955-.566.85-.991 1.842-1.275 2.975-.226 1.133-.34 2.323-.34 3.57V150h-12.75v-21.845c0-.737-.028-1.643-.085-2.72s-.255-2.097-.595-3.06-.906-1.785-1.7-2.465c-.736-.68-1.841-1.02-3.315-1.02-1.643 0-2.975.312-3.995.935-1.02.567-1.813 1.36-2.38 2.38-.51.963-.85 2.068-1.02 3.315s-.255 2.55-.255 3.91V150h-12.75v-41.31zm113.06 34.17c-2.04 2.607-4.618 4.618-7.735 6.035s-6.346 2.125-9.69 2.125c-3.173 0-6.176-.51-9.01-1.53-2.776-1.02-5.213-2.465-7.31-4.335-2.04-1.927-3.655-4.222-4.845-6.885s-1.785-5.638-1.785-8.925.595-6.262 1.785-8.925 2.805-4.93 4.845-6.8c2.097-1.927 4.534-3.4 7.31-4.42 2.834-1.02 5.837-1.53 9.01-1.53 2.947 0 5.61.51 7.99 1.53 2.437 1.02 4.477 2.493 6.12 4.42 1.7 1.87 3.004 4.137 3.91 6.8s1.36 5.638 1.36 8.925v3.995h-29.58c.51 2.437 1.615 4.392 3.315 5.865 1.7 1.417 3.797 2.125 6.29 2.125 2.097 0 3.854-.453 5.27-1.36 1.474-.963 2.749-2.182 3.825-3.655l8.925 6.545zm-10.795-18.19c.057-2.153-.651-3.995-2.125-5.525s-3.371-2.295-5.695-2.295c-1.416 0-2.663.227-3.74.68s-2.011 1.048-2.805 1.785a7.9 7.9 0 0 0-1.785 2.465c-.396.907-.623 1.87-.68 2.89h16.83zm20.504-15.98h12.24v5.61h.17c.397-.793.963-1.587 1.7-2.38s1.615-1.502 2.635-2.125 2.182-1.133 3.485-1.53 2.72-.595 4.25-.595c3.23 0 5.837.51 7.82 1.53 1.983.963 3.513 2.323 4.59 4.08 1.133 1.757 1.898 3.825 2.295 6.205s.595 4.958.595 7.735V150h-12.75v-20.23a40.5 40.5 0 0 0-.17-3.655c-.057-1.303-.312-2.493-.765-3.57-.397-1.077-1.048-1.955-1.955-2.635-.85-.68-2.097-1.02-3.74-1.02s-2.975.312-3.995.935c-1.02.567-1.813 1.36-2.38 2.38-.51.963-.85 2.068-1.02 3.315s-.255 2.55-.255 3.91V150h-12.75v-41.31zm76.944 10.2h-11.22v13.77c0 1.133.056 2.182.17 3.145.113.907.368 1.7.765 2.38s.991 1.218 1.785 1.615c.85.34 1.955.51 3.315.51.68 0 1.558-.057 2.635-.17 1.133-.17 1.983-.51 2.55-1.02v10.625c-1.417.51-2.89.85-4.42 1.02s-3.032.255-4.505.255c-2.154 0-4.137-.227-5.95-.68s-3.4-1.162-4.76-2.125c-1.36-1.02-2.437-2.323-3.23-3.91-.737-1.587-1.105-3.513-1.105-5.78V118.89h-8.16v-10.2h8.16V96.45h12.75v12.24h11.22v10.2zm29.854 1.955c-1.87-2.323-4.335-3.485-7.395-3.485-1.077 0-2.125.255-3.145.765s-1.53 1.388-1.53 2.635c0 1.02.51 1.785 1.53 2.295 1.077.453 2.408.878 3.995 1.275a130.74 130.74 0 0 1 5.185 1.19c1.87.397 3.598 1.048 5.185 1.955 1.643.907 2.975 2.153 3.995 3.74 1.077 1.53 1.615 3.598 1.615 6.205 0 2.663-.595 4.873-1.785 6.63-1.133 1.7-2.607 3.088-4.42 4.165-1.813 1.02-3.853 1.728-6.12 2.125-2.267.453-4.505.68-6.715.68-2.89 0-5.808-.397-8.755-1.19-2.947-.85-5.44-2.323-7.48-4.42l7.735-8.585c1.19 1.473 2.493 2.607 3.91 3.4 1.473.737 3.173 1.105 5.1 1.105 1.473 0 2.805-.198 3.995-.595 1.19-.453 1.785-1.247 1.785-2.38 0-1.077-.538-1.87-1.615-2.38-1.02-.567-2.352-1.02-3.995-1.36-1.587-.397-3.315-.793-5.185-1.19-1.813-.453-3.542-1.105-5.185-1.955-1.587-.85-2.918-2.04-3.995-3.57-1.02-1.587-1.53-3.683-1.53-6.29 0-2.437.482-4.533 1.445-6.29 1.02-1.757 2.323-3.202 3.91-4.335 1.643-1.133 3.513-1.955 5.61-2.465a24.32 24.32 0 0 1 6.375-.85c2.72 0 5.468.397 8.245 1.19s5.128 2.21 7.055 4.25l-7.82 7.735z" fill="#180042"/></g><defs><clipPath id="A"><path fill="#fff" d="M0 0h420v154H0z"/></clipPath></defs></svg>
</file>

<file path="static/images/rss.svg">
<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><title>RSS</title><path d="M19.199 24C19.199 13.467 10.533 4.8 0 4.8V0c13.165 0 24 10.835 24 24h-4.801zM3.291 17.415c1.814 0 3.293 1.479 3.293 3.295 0 1.813-1.485 3.29-3.301 3.29C1.47 24 0 22.526 0 20.71s1.475-3.294 3.291-3.295zM15.909 24h-4.665c0-6.169-5.075-11.245-11.244-11.245V8.09c8.727 0 15.909 7.184 15.909 15.91z"/></svg>
</file>

<file path="static/robots.txt">
User-agent: *
Disallow:
</file>

<file path=".env.example">
# Supabase settings
PUBLIC_SUPABASE_URL='https://REPLACE_ME.supabase.co'
PUBLIC_SUPABASE_ANON_KEY='REPLACE_ME'
PRIVATE_SUPABASE_SERVICE_ROLE='REPLACE_ME'

# Stripe settings
PRIVATE_STRIPE_API_KEY='REPLACE_ME'

# Optional - settings for email

# Email address admin messages will be sent to
# PRIVATE_ADMIN_EMAIL='your_email@example.com'
# Email address messages will be sent from
# PRIVATE_FROM_ADMIN_EMAIL='no_reply@example.com'
# Resend API key
# PRIVATE_RESEND_API_KEY='your_resend_api_key'
</file>

<file path=".eslintrc.cjs">
module.exports = {
  root: true,
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:svelte/recommended",
    "prettier",
  ],
  parser: "@typescript-eslint/parser",
  plugins: ["@typescript-eslint"],
  parserOptions: {
    sourceType: "module",
    ecmaVersion: 2020,
    extraFileExtensions: [".svelte"],
  },
  overrides: [
    {
      files: ["*.svelte"],
      parser: "svelte-eslint-parser",
      parserOptions: {
        parser: {
          // Specify a parser for each lang.
          ts: "@typescript-eslint/parser",
          js: "espree",
          typescript: "@typescript-eslint/parser",
        },
      },
    },
    {
      // Apply to all test files. Proper type checking in tests with mocks can be tedious and counterproductive.
      files: ["**/*.test.ts", "**/*.spec.ts"],
      rules: {
        "@typescript-eslint/no-explicit-any": "off",
      },
    },
  ],
  env: {
    browser: true,
    es2017: true,
    node: true,
  },
  rules: {
    "no-undef": "off",
    // no-undef has been turned off because of this:
    // basically, it causes issues and TS does those checks so it's redundant
    // https://typescript-eslint.io/linting/troubleshooting#i-get-errors-from-the-no-undef-rule-about-global-variables-not-being-defined-even-though-there-are-no-typescript-errors
  },
}
</file>

<file path="analytics_docs.md">
# Adding Analytics

Adding analytics to your SaaS Starter project is optional.

Since each analytics platform has different setup instructions, we've created a guide instead of adding it in code.

### PostHog

- Create a PostHog Account
- Install PostHog JS Library
  - Run `npm install posthog-js` in your terminal. This will add PostHog dependencies to your `package.json` and `package-lock.json`.
- Set Up PostHog
  - in `src/routes/+layout.svelte` add PostHog to the script section following the [Posthog Svelte Guide](https://posthog.com/docs/libraries/svelte#client-side-setup). Note: ensure you’re logged into PostHog so that the code includes your unique API key automatically.
- Test analytics
  - Click around and view a few pages on your site to generate some events. You can view these events in PostHog to ensure tracking is active.

### Google Analytics

Follow the [Google Analytics Guide](https://support.google.com/analytics/answer/9304153?hl=en) to add Google Analytics to your project.

The ideal place to add Google Analytics is in `src/routes/+layout.svelte`.
</file>

<file path="checks.sh">
#!/bin/sh

# error on first error
set -e

if ! command -v misspellx &> /dev/null
then
    echo "=== Skipping Spell Check ==="
    echo "Skip running spell check using 'misspell' as the tool is not installed."
    echo "Install it using the instructions here: https://github.com/client9/misspell"
    echo "Skipping this check now, but it may fail in CI.\n"
else
    echo "=== Running Spell Check ==="
    misspell -error ./src README.md
    echo "no spelling mistakes found\n"
fi

echo "=== Running Format Check With Prettier ==="
npm run format_check

echo "=== Running Linter ==="
npm run lint

echo "=== Running Svelte Check ===" 
npm run check

echo "=== Running Tests ==="
npm run test_run

echo "\n=== All Checks Pass ===\n"
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2023 Steve Cosman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="src/app.d.ts">
import { Session, SupabaseClient, type AMREntry } from "@supabase/supabase-js"
import { Database } from "./DatabaseDefinitions"

// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces
declare global {
  namespace App {
    interface Locals {
      supabase: SupabaseClient<Database>
      supabaseServiceRole: SupabaseClient<Database>
      safeGetSession: () => Promise<{
        session: Session | null
        user: User | null
        amr: AMREntry[] | null
      }>
      session: Session | null
      user: User | null
    }
    interface PageData {
      session: Session | null
    }
    // interface Error {}
    // interface Platform {}
  }
}

export {}
</file>

<file path="src/DatabaseDefinitions.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      contact_requests: {
        Row: {
          company_name: string | null
          email: string | null
          first_name: string | null
          id: string
          last_name: string | null
          message_body: string | null
          phone: string | null
          updated_at: Date | null
        }
        Insert: {
          company_name?: string | null
          email?: string | null
          first_name?: string | null
          id?: string
          last_name?: string | null
          message_body?: string | null
          phone?: string | null
          updated_at?: Date | null
        }
        Update: {
          company_name?: string | null
          email?: string | null
          first_name?: string | null
          id?: string
          last_name?: string | null
          message_body?: string | null
          phone?: string | null
          updated_at?: Date | null
        }
        Relationships: []
      }
      profiles: {
        Row: {
          avatar_url: string | null
          full_name: string | null
          id: string
          updated_at: string | null
          company_name: string | null
          website: string | null
          unsubscribed: boolean
        }
        Insert: {
          avatar_url?: string | null
          full_name?: string | null
          id: string
          updated_at?: Date | null
          company_name?: string | null
          website?: string | null
          unsubscribed: boolean
        }
        Update: {
          avatar_url?: string | null
          full_name?: string | null
          id?: string
          updated_at?: string | null
          company_name?: string | null
          website?: string | null
          unsubscribed: boolean
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
      stripe_customers: {
        Row: {
          stripe_customer_id: string
          updated_at: Date | null
          user_id: string
        }
        Insert: {
          stripe_customer_id: string
          updated_at?: Date | null
          user_id: string
        }
        Update: {
          stripe_customer_id?: string
          updated_at?: Date | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "stripe_customers_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}
</file>

<file path="src/lib/components/ProductCard.svelte">
<script lang="ts">
  import type { Product } from '$lib/data/products';

  let { product }: { product: Product } = $props();
</script>

<div class="card bg-base-200 w-full lg:w-1/2 flex-none shadow-xl border-2 {product.id === 'engine' || product.id === 'license-hub' ? 'border-secondary' : 'border-transparent'}">
  <div class="card-body p-8 flex flex-col">
    <h3 class="card-title text-2xl text-primary">{product.title}</h3>
    <p class="text-base-content/80 flex-grow mt-4">{product.tagline}</p>
    
    {#if product.features}
    <ul class="my-6 space-y-3 text-left">
      {#each product.features as feature}
        <li class="flex items-start gap-3">
          <svg class="w-6 h-6 text-success shrink-0 mt-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 16.4L6 12.4L7.4 11L10 13.6L16.6 7L18 8.4L10 16.4Z" fill="currentColor"/></svg>
          <span>{feature}</span>
        </li>
      {/each}
    </ul>
    {/if}

    <div class="mt-auto pt-4">
      <p class="text-4xl font-bold text-center">{product.price}</p>
      <div class="card-actions justify-center mt-4">
        <a href={product.stripe_price_id ? `/account/subscribe/${product.stripe_price_id}` : '/login'} class="btn btn-primary btn-wide">{product.ctaLabel}</a>
      </div>
      <p class="text-center text-xs text-base-content/50 mt-2">{product.footnote}</p>
    </div>
  </div>
</div>
</file>

<file path="src/lib/data/products.ts">
// Define a common type for all products for stability
export type Product = {
  id: string;
  title: string;
  tagline: string;
  features: string[];
  price: string;
  ctaLabel: string;
  footnote: string;
  stripe_product_id?: string;
  stripe_price_id?: string;
};

export const automationProducts: Product[] = [
  {
    id: "script",
    title: "Bootstrap Your Server in Two Minutes",
    tagline: "One-click script: SSL, NGINX, firewalls — lifetime license to one machine.",
    features: [
      "Installs NGINX + Let's Encrypt",
      "Locks inbound ports to TradingView IPs",
      "Generates audit log for every step"
    ],
    price: "$1 one-time",
    ctaLabel: "Download for $1",
    footnote: "Digital good · no refunds",
    // No Stripe ID for one-time purchases via script
  },
  {
    id: "engine",
    title: "Fire Signals, Track Fills, Repeat",
    tagline: "Route TradingView alerts to exchanges with nonce guard and Telegram updates.",
    features: [
      "Retries & fallback order logic",
      "Real-time Telegram feed",
      "Free Setup Script included"
    ],
    price: "$5 / month",
    ctaLabel: "Start Free Trial",
    footnote: "7-day trial. Cancel before renewal to avoid charge.",
    stripe_product_id: "prod_OXj1CcemGMWOlU", // From original "Pro" plan
    stripe_price_id: "price_1NkdZCHMjzZ8mGZnRSjUm4yA",
  }
];

export const licenseHubProduct: Product = {
  id: "license-hub",
  title: "Ship Software, Not Headaches",
  tagline: "Self-hosted license manager: Stripe & PayPal webhooks, Argon2 keys, Postgres on your box.",
  features: [
    "Costs 90% less than legacy platforms",
    "Keep customer data on your server",
    "CLI & dashboard for key revokes"
  ],
  price: "$5 / month",
  ctaLabel: "Start Free Trial",
  footnote: "7-day trial · no refunds",
  stripe_product_id: "prod_OXj20YNpHYOXi7", // From original "Enterprise" plan
  stripe_price_id: "price_1Nkda2HMjzZ8mGZn4sKvbDAV",
};

// A combined list for use in places that need all plans
export const allProducts: Product[] = [...automationProducts, licenseHubProduct];

// The default free plan for new users
export const defaultPlanId = "script";
</file>

<file path="src/lib/load_helpers.ts">
import { isBrowser } from "@supabase/ssr"
import type { Session, SupabaseClient } from "@supabase/supabase-js"
import type { Database } from "../DatabaseDefinitions.js"

export const load_helper = async (
  server_session: Session | null,
  supabase: SupabaseClient<Database>,
) => {
  // on server populated on server by LayoutData, using authGuard hook
  let session = server_session
  if (isBrowser()) {
    // Only call getSession in browser where it's safe.
    const getSessionResponse = await supabase.auth.getSession()
    session = getSessionResponse.data.session
  }
  if (!session) {
    return {
      session: null,
      user: null,
    }
  }

  // https://github.com/supabase/auth-js/issues/888#issuecomment-2189298518
  if ("suppressGetSessionWarning" in supabase.auth) {
    // @ts-expect-error - suppressGetSessionWarning is not part of the official API
    supabase.auth.suppressGetSessionWarning = true
  } else {
    console.warn(
      "SupabaseAuthClient#suppressGetSessionWarning was removed. See https://github.com/supabase/auth-js/issues/888.",
    )
  }
  const {
    data: { user },
    error: userError,
  } = await supabase.auth.getUser()
  if (userError || !user) {
    return {
      session: null,
      user: null,
    }
  }

  return {
    session,
    user,
  }
}
</file>

<file path="src/routes/(admin)/account/(menu)/+page.server.ts">
import { redirect } from "@sveltejs/kit"

export const actions = {
  signout: async ({ locals: { supabase, safeGetSession } }) => {
    const { session } = await safeGetSession()
    if (session) {
      await supabase.auth.signOut()
      redirect(303, "/")
    }
  },
}
</file>

<file path="src/routes/(admin)/account/(menu)/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("home")
</script>

<svelte:head>
  <title>Account</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-1">Dashboard</h1>
<div class="alert alert-error max-w-lg mt-2">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="stroke-current shrink-0 h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    ><path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
    /></svg
  >
  <div>
    <div class="font-bold">Demo Content</div>
    <div class="my-2">
      This page is just a placeholder. Replace this page with your app's content
      and functionality.
    </div>
    <div class="my-2">
      The <a href="/account/billing" class="link">billing</a> and
      <a href="/account/settings" class="link">settings</a> pages are functional
      demos.
    </div>
  </div>
</div>

<div class="my-6">
  <h1 class="text-xl font-bold mb-1">Users</h1>
  <div class="stats shadow-sm stats-vertical sm:stats-horizontal sm:w-[420px]">
    <div class="stat place-items-center">
      <div class="stat-title">Downloads</div>
      <div class="stat-value">31K</div>
      <div class="stat-desc">↗︎ 546 (2%)</div>
    </div>

    <div class="stat place-items-center">
      <div class="stat-title">Users</div>
      <div class="stat-value text-secondary">4,200</div>
      <div class="stat-desc">↗︎ 40 (2%)</div>
    </div>
  </div>
</div>
<div class="my-6">
  <h1 class="text-xl font-bold mb-1">Accounts</h1>
  <div class="stats shadow-sm stats-vertical sm:stats-horizontal sm:w-[420px]">
    <div class="stat place-items-center">
      <div class="stat-title">New Registers</div>
      <div class="stat-value">1,200</div>
      <div class="stat-desc">↘︎ 90 (14%)</div>
    </div>

    <div class="stat place-items-center">
      <div class="stat-title">Churned Accounts</div>
      <div class="stat-value">42</div>
      <div class="stat-desc">↘︎ 6 (12%)</div>
    </div>
  </div>
</div>
<div class="my-6">
  <h1 class="text-xl font-bold mb-1">Revenue</h1>
  <div class="stats shadow-sm stats-vertical sm:stats-horizontal sm:w-[420px]">
    <div class="stat place-items-center">
      <div class="stat-title text-success">Revenue</div>
      <div class="stat-value text-success">$4200</div>
      <div class="stat-desc">↗︎ $180 (4%)</div>
    </div>

    <div class="stat place-items-center">
      <div class="stat-title">New Subscribers</div>
      <div class="stat-value">16</div>
      <div class="stat-desc">↘︎ 1 (%7)</div>
    </div>
  </div>
</div>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/delete_account/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()
  let { session } = data
</script>

<svelte:head>
  <title>Delete Account</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Settings</h1>

<SettingsModule
  title="Delete Account"
  editable={true}
  dangerous={true}
  message="Deleting your account can not be undone. You are currently logged in as '{session
    ?.user?.email}'"
  saveButtonTitle="Delete Account"
  successTitle="Account queued for deletion"
  successBody="Your account will be deleted shortly."
  formTarget="/account/api?/deleteAccount"
  fields={[
    {
      id: "currentPassword",
      label: "Current Password",
      initialValue: "",
      inputType: "password",
    },
  ]}
/>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/edit_profile/+page.svelte">
<script lang="ts">
  import SettingsModule from "../settings_module.svelte"
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()

  let { profile } = data
</script>

<svelte:head>
  <title>Edit Profile</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Settings</h1>

<SettingsModule
  editable={true}
  title="Edit Profile"
  successTitle="Saved Profile"
  formTarget="/account/api?/updateProfile"
  fields={[
    {
      id: "fullName",
      label: "Name",
      initialValue: profile?.full_name ?? "",
      placeholder: "Your full name",
      maxlength: 50,
    },
    {
      id: "companyName",
      label: "Company Name",
      initialValue: profile?.company_name ?? "",
      maxlength: 50,
    },
    {
      id: "website",
      label: "Company Website",
      initialValue: profile?.website ?? "",
      maxlength: 50,
    },
  ]}
/>
</file>

<file path="src/routes/(admin)/account/api/page.server.test.ts">
import { describe, it, expect, vi, beforeEach } from "vitest"
import { actions } from "./+page.server"
import { fail, redirect } from "@sveltejs/kit"

vi.mock("@sveltejs/kit", async () => {
  const actual = await vi.importActual("@sveltejs/kit")
  return {
    ...actual,
    fail: vi.fn(),
    redirect: vi.fn().mockImplementation(() => {
      throw new Error("Redirect error")
    }),
  }
})

describe("toggleEmailSubscription", () => {
  const mockSupabase = {
    from: vi.fn().mockReturnThis(),
    select: vi.fn().mockReturnThis(),
    eq: vi.fn().mockReturnThis(),
    single: vi.fn().mockResolvedValue({ data: null }),
    update: vi.fn().mockReturnThis(),
  }

  const mockSafeGetSession = vi.fn()

  beforeEach(() => {
    vi.clearAllMocks()
  })

  it("should redirect if no session", async () => {
    mockSafeGetSession.mockResolvedValue({ session: null })

    await expect(
      actions.toggleEmailSubscription({
        locals: {
          supabase: mockSupabase,
          safeGetSession: mockSafeGetSession,
        },
      } as any),
    ).rejects.toThrow("Redirect")

    expect(redirect).toHaveBeenCalledWith(303, "/login")
  })

  it("should toggle subscription status from false to true", async () => {
    const mockSession = { user: { id: "user123" } }
    mockSafeGetSession.mockResolvedValue({ session: mockSession })

    // Mock the first query to get the current status
    mockSupabase.single.mockResolvedValueOnce({ data: { unsubscribed: false } })

    // Mock the update query
    const mockUpdateChain = {
      eq: vi.fn().mockResolvedValue({ error: null }),
    }

    mockSupabase.update.mockReturnValue(mockUpdateChain)

    const result = await actions.toggleEmailSubscription({
      locals: { supabase: mockSupabase, safeGetSession: mockSafeGetSession },
    } as any)

    expect(mockSupabase.from).toHaveBeenCalledWith("profiles")
    expect(mockSupabase.select).toHaveBeenCalledWith("unsubscribed")
    expect(mockSupabase.eq).toHaveBeenCalledWith("id", "user123")
    expect(mockSupabase.single).toHaveBeenCalled()
    expect(mockSupabase.update).toHaveBeenCalledWith({ unsubscribed: true })
    expect(mockUpdateChain.eq).toHaveBeenCalledWith("id", "user123")
    expect(result).toEqual({ unsubscribed: true })
  })

  it("should toggle subscription status from true to false", async () => {
    const mockSession = { user: { id: "user123" } }
    mockSafeGetSession.mockResolvedValue({ session: mockSession })

    // Mock the first query to get the current status
    mockSupabase.single.mockResolvedValueOnce({ data: { unsubscribed: true } })

    // Mock the update query
    const mockUpdateChain = {
      eq: vi.fn().mockResolvedValue({ error: null }),
    }

    mockSupabase.update.mockReturnValue(mockUpdateChain)

    const result = await actions.toggleEmailSubscription({
      locals: { supabase: mockSupabase, safeGetSession: mockSafeGetSession },
    } as any)

    expect(mockSupabase.from).toHaveBeenCalledWith("profiles")
    expect(mockSupabase.select).toHaveBeenCalledWith("unsubscribed")
    expect(mockSupabase.eq).toHaveBeenCalledWith("id", "user123")
    expect(mockSupabase.single).toHaveBeenCalled()
    expect(mockSupabase.update).toHaveBeenCalledWith({ unsubscribed: false })
    expect(mockUpdateChain.eq).toHaveBeenCalledWith("id", "user123")
    expect(result).toEqual({ unsubscribed: false })
  })

  it("should return fail response if update operation fails", async () => {
    const mockSession = { user: { id: "user123" } }
    mockSafeGetSession.mockResolvedValue({ session: mockSession })

    // Mock the first query to get the current status
    mockSupabase.single.mockResolvedValueOnce({ data: { unsubscribed: false } })

    // Mock the update query to return an error
    const mockUpdateChain = {
      eq: vi.fn().mockResolvedValue({ error: new Error("Update failed") }),
    }

    mockSupabase.update.mockReturnValue(mockUpdateChain)

    await actions.toggleEmailSubscription({
      locals: { supabase: mockSupabase, safeGetSession: mockSafeGetSession },
    } as any)

    // Check if fail was called with the correct arguments
    expect(fail).toHaveBeenCalledWith(500, {
      message: "Failed to update subscription status",
    })
  })
})
</file>

<file path="src/routes/(admin)/account/create_profile/+page.ts">
import { _hasFullProfile } from "../+layout.js"
import { redirect } from "@sveltejs/kit"

export async function load({ parent }) {
  const data = await parent()

  // They completed their profile! Redirect to "Select a Plan" screen.
  if (_hasFullProfile(data?.profile)) {
    redirect(303, "/account/select_plan")
  }

  return data
}
</file>

<file path="src/routes/(admin)/account/downloads/+page.server.ts">
import { error } from '@sveltejs/kit';
import { fetchSubscription, getOrCreateCustomerId } from '../subscription_helpers.server';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ locals: { safeGetSession, supabaseServiceRole } }) => {
  const { session, user } = await safeGetSession();
  if (!session || !user) {
    // This should not happen due to the layout guard, but we check for safety.
    error(401, 'Unauthorized');
  }

  // Set default entitlements
  const entitlements = {
    setupScript: false,
    webhookEngine: false,
    licenseHub: false,
  };

  // All users get the setup script for a $1 "purchase"
  // In a real scenario, you would check for a one-time purchase here.
  // For this implementation, we will grant it to all logged-in users.
  entitlements.setupScript = true;

  const { error: idError, customerId } = await getOrCreateCustomerId({
    supabaseServiceRole,
    user,
  });

  if (idError || !customerId) {
    // If we can't get a customer ID, they can't have subscriptions. Return default entitlements.
    return { entitlements };
  }

  const { primarySubscription, error: fetchErr } = await fetchSubscription({
    customerId,
  });

  if (fetchErr) {
    // If fetching fails, return default entitlements.
    return { entitlements };
  }

  if (primarySubscription) {
    const subscribedProductId = primarySubscription.appSubscription?.id;
    if (subscribedProductId === 'engine') {
      entitlements.webhookEngine = true;
    }
    if (subscribedProductId === 'license-hub') {
      entitlements.licenseHub = true;
    }
  }

  return { entitlements };
};
</file>

<file path="src/routes/(admin)/account/downloads/+page.svelte">
<script lang="ts">
  import { getContext } from 'svelte';
  import type { Writable } from 'svelte/store';

  let adminSection: Writable<string> = getContext('adminSection');
  adminSection.set('downloads'); // Sets the active item in the sidebar

  let { data } = $props();
  const { entitlements } = data;
</script>

<svelte:head>
  <title>Your Downloads - Signal Lynx</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Your Downloads</h1>

<div class="space-y-8">
  <!-- Setup Script Download -->
  {#if entitlements.setupScript}
    <div class="card bg-base-200 shadow-md">
      <div class="card-body">
        <h2 class="card-title">🛡️ One-Button Setup Script</h2>
        <p>Your lifetime license for our one-click server hardening script for Windows.</p>
        <div class="card-actions justify-end">
          <a href="/documents/Setup-Script-README.pdf" target="_blank" class="btn btn-ghost">View README</a>
          <button class="btn btn-primary" disabled>Download v1.0</button>
        </div>
      </div>
    </div>
  {/if}

  <!-- Webhook Engine Download -->
  {#if entitlements.webhookEngine}
    <div class="card bg-base-200 shadow-md">
      <div class="card-body">
        <h2 class="card-title">🎛️ Trade Pilot Dashboard (Webhook Engine)</h2>
        <p>Your subscription includes access to the Trade Pilot Dashboard. The Setup Script is also included.</p>
        <div class="card-actions justify-end">
          <a href="/documents/Webhook-Engine-README.pdf" target="_blank" class="btn btn-ghost">View README</a>
          <button class="btn btn-primary" disabled>Download v1.0</button>
        </div>
      </div>
    </div>
  {/if}

  <!-- License Hub Download -->
  {#if entitlements.licenseHub}
    <div class="card bg-base-200 shadow-md">
      <div class="card-body">
        <h2 class="card-title">🔑 License-Hub Dashboard</h2>
        <p>Your subscription includes access to the self-hosted License Hub.</p>
        <div class="card-actions justify-end">
          <a href="/documents/License-Hub-README.pdf" target="_blank" class="btn btn-ghost">View README</a>
          <button class="btn btn-primary" disabled>Download v1.0</button>
        </div>
      </div>
    </div>
  {/if}

  {#if !entitlements.webhookEngine && !entitlements.licenseHub}
    <div class="text-center p-8 border-2 border-dashed border-base-300 rounded-lg">
        <p>You do not have any active subscriptions.</p>
        <a href="/blog" class="btn btn-primary mt-4">View Products</a>
    </div>
  {/if}
</div>
</file>

<file path="src/routes/(admin)/account/select_plan/+page.svelte">
<script lang="ts">
  import PricingModule from "$lib/components/pricing_module.svelte";
</script>

<svelte:head>
  <title>Select a Plan</title>
</svelte:head>

<div
  class="text-center content-center min-h-[100vh] pb-12 mt-4 flex items-center place-content-center"
>
  <div class="flex flex-col w-full px-6">
    <div>
      <h1 class="text-2xl font-bold mb-2">Select a Plan</h1>
      <div class="mb-6">
        View our <a href="/trading-automation" target="_blank" class="link">product pages</a
        > for details.
      </div>
      <PricingModule callToAction="Select Plan" />
    </div>
  </div>
</div>
</file>

<file path="src/routes/(marketing)/auth/callback/+server.js">
// src/routes/auth/callback/+server.js
import { redirect } from "@sveltejs/kit"
import { isAuthApiError } from "@supabase/supabase-js"

export const GET = async ({ url, locals: { supabase } }) => {
  const code = url.searchParams.get("code")
  if (code) {
    try {
      await supabase.auth.exchangeCodeForSession(code)
    } catch (error) {
      // If you open in another browser, need to redirect to login.
      // Should not display error
      if (isAuthApiError(error)) {
        redirect(303, "/login/sign_in?verified=true")
      } else {
        throw error
      }
    }
  }

  const next = url.searchParams.get("next")
  if (next) {
    redirect(303, next)
  }

  redirect(303, "/account")
}
</file>

<file path="src/routes/(marketing)/docs/+page.svelte">
<script lang="ts">
  // Array of documentation files for easy management
  const documents = [
    {
      title: "🛡️ One-Button Setup Script",
      description: "A complete guide to the one-click hardening script for Windows servers, including prerequisites and an explanation of all automated steps.",
      href: "/documents/Setup-Script-README.pdf"
    },
    {
      title: "🎛️ Trade Pilot Dashboard (Webhook Engine)",
      description: "Full documentation for the webhook engine, including setup, exchange configuration, creating TradingView alerts with JSON examples, and using the Telegram bot.",
      href: "/documents/Webhook-Engine-README.pdf"
    },
    {
      title: "🔑 License-Hub Dashboard",
      description: "Technical documentation for the self-hosted license manager, covering Docker deployment, payment provider webhook setup, and disaster recovery procedures.",
      href: "/documents/License-Hub-README.pdf"
    }
  ];
</script>

<svelte:head>
  <title>Documentation - Signal Lynx</title>
  <meta name="description" content="Downloadable READMEs and setup guides for Signal Lynx products." />
</svelte:head>

<div class="py-12 px-4 bg-base-100">
  <div class="max-w-3xl mx-auto">
    <div class="text-center mb-16">
      <h1 class="text-4xl md:text-6xl font-bold text-primary">Documentation</h1>
      <p class="mt-4 text-xl">Downloadable READMEs and setup guides for our products.</p>
    </div>

    <div class="space-y-6">
      {#each documents as doc}
        <div class="card card-bordered bg-base-200 shadow-md">
          <div class="card-body">
            <h2 class="card-title text-2xl">{doc.title}</h2>
            <p>{doc.description}</p>
            <div class="card-actions justify-end mt-4">
              <a href={doc.href} target="_blank" rel="noopener noreferrer" class="btn btn-primary">
                Open PDF
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
              </a>
            </div>
          </div>
        </div>
      {/each}
    </div>

  </div>
</div>
</file>

<file path="src/routes/(marketing)/license-hub/+page.svelte">
<script lang="ts">
  import { licenseHubProduct } from "$lib/data/products";
  import ProductCard from '$lib/components/ProductCard.svelte';
</script>

<svelte:head>
  <title>License Hub - Signal Lynx</title>
  <meta name="description" content="Ship software, not headaches. Self-hosted license management for $5 a month." />
</svelte:head>

<!-- Hero Section -->
<div class="text-center py-16 md:py-24 px-4 bg-base-200">
  <h1 class="text-4xl md:text-6xl font-bold text-primary">Ship software, not headaches.</h1>
  <p class="mt-4 text-xl md:text-2xl max-w-3xl mx-auto text-base-content/80">
    Spin up your own license server on a $5 VPS, click a few buttons, and let the keys email themselves while you grab a fresh energy drink.
  </p>
</div>

<!-- Main Content Section with Product Card -->
<div class="py-16 px-4 bg-base-100">
  <div class="flex justify-center">
    <ProductCard product={licenseHubProduct} />
  </div>
</div>

<!-- Quick Details Section -->
<div class="py-16 px-4 bg-base-200">
  <div class="max-w-4xl mx-auto">
    <div class="grid md:grid-cols-2 gap-8">
        <!-- Details can be hardcoded here or moved to data file if needed -->
        <div class="flex items-start gap-4">
          <div class="text-4xl">🚀</div>
          <div>
            <h4 class="font-bold text-lg">Launch Speed</h4>
            <p class="text-base-content/70">docker compose up -d → GUI live in ≈10 min</p>
          </div>
        </div>
        <div class="flex items-start gap-4">
          <div class="text-4xl">💾</div>
          <div>
            <h4 class="font-bold text-lg">Backups</h4>
            <p class="text-base-content/70">Automatic nightly pg_dump to local disk or S3-compatible bucket</p>
          </div>
        </div>
        <div class="flex items-start gap-4">
          <div class="text-4xl">🔐</div>
          <div>
            <h4 class="font-bold text-lg">Hashing</h4>
            <p class="text-base-content/70">Argon2id (OWASP-approved) @ ≥19 MiB RAM, 2 iters</p>
          </div>
        </div>
        <div class="flex items-start gap-4">
          <div class="text-4xl">📨</div>
          <div>
            <h4 class="font-bold text-lg">Customer Touch</h4>
            <p class="text-base-content/70">Auto-emails on Stripe & PayPal payment events</p>
          </div>
        </div>
    </div>
  </div>
</div>

<!-- Deep Dive Accordion Section -->
<div class="py-16 px-4 bg-base-100">
  <div class="max-w-3xl mx-auto">
    <h2 class="text-3xl font-bold text-center mb-8">Technical Deep Dive</h2>
    <div class="join join-vertical w-full">
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="deep-dive-accordion" checked={true} /> 
        <div class="collapse-title text-xl font-medium">
          How does the 5-step install work?
        </div>
        <div class="collapse-content"> 
          <p>1. Clone the repository. <br/> 2. Edit the `.env` file with your secrets. <br/> 3. Run `docker compose up -d`. <br/> 4. Access the GUI and set your admin password. <br/> 5. Copy the generated webhook URL into your Stripe and/or PayPal dashboards. The server is now live.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="deep-dive-accordion" />
        <div class="collapse-title text-xl font-medium">
          What happens if my VPS dies?
        </div>
        <div class="collapse-content"> 
          <p>The system runs nightly `pg_dump` backups to a local volume. To recover, you can spin up a new VPS, import yesterday’s dump with a single `pg_restore` command, and point your DNS to the new IP. Total downtime is typically less than 5 minutes.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="deep-dive-accordion" /> 
        <div class="collapse-title text-xl font-medium">
          How secure are the keys?
        </div>
        <div class="collapse-content"> 
          <p>We use Argon2id hashing, which is designed to resist GPU cracking attacks far better than older algorithms like bcrypt. Furthermore, the entire Docker data volume can be encrypted at rest on your host machine, providing another layer of protection.</p>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/routes/(marketing)/license-hub/+page.ts">
export const prerender = true
</file>

<file path="src/routes/(marketing)/login/+layout.svelte">
<script lang="ts">
  interface Props {
    children?: import("svelte").Snippet
  }

  let { children }: Props = $props()
  let isEurope = $state(false)
  try {
    isEurope = Intl.DateTimeFormat()
      .resolvedOptions()
      .timeZone.startsWith("Europe/")
  } catch (e) {
    /* continue */
  }
</script>

<div
  class="text-center content-center max-w-lg mx-auto min-h-[70vh] pb-12 flex items-center place-content-center"
>
  <div class="flex flex-col w-64 lg:w-80">
    {@render children?.()}
    <div class="mt-8 {isEurope ? 'block' : 'hidden'}">
      🍪 Logging in uses Cookies 🍪
    </div>
  </div>
</div>
</file>

<file path="src/routes/(marketing)/search/+page.server.ts">
export const prerender = true
</file>

<file path="src/routes/(marketing)/sitemap.xml/+server.ts">
import type { RequestHandler } from "@sveltejs/kit"
import * as sitemap from "super-sitemap"
import { WebsiteBaseUrl } from "../../../config"

export const prerender = true

export const GET: RequestHandler = async () => {
  return await sitemap.response({
    origin: WebsiteBaseUrl,
    excludeRoutePatterns: [
      ".*\\(admin\\).*", // i.e. exclude routes within admin group
    ],
  })
}
</file>

<file path="src/routes/(marketing)/trading-automation/+layout.ts">
export const prerender = true
</file>

<file path="src/routes/(marketing)/trading-automation/+page.svelte">
<script lang="ts">
  import { automationProducts } from "$lib/data/products";
  import ProductCard from '$lib/components/ProductCard.svelte';
</script>

<svelte:head>
  <title>Trading Automation - Signal Lynx</title>
  <meta name="description" content="Own the machine, own the trade. Local-first webhook tools for traders." />
</svelte:head>

<!-- Hero Section -->
<div class="text-center py-16 md:py-24 px-4 bg-base-200">
  <h1 class="text-4xl md:text-6xl font-bold text-primary">Own the machine. Own the trade.</h1>
  <p class="mt-4 text-xl md:text-2xl max-w-3xl mx-auto text-base-content/80">
    Skip mystery clouds—run our tools on a laptop or budget VPS you already control. Your API keys never leave the building, and you’ll be off to the races before your energy drink loses its fizz.
  </p>
</div>

<!-- Product Cards Section -->
<div class="py-16 px-4 bg-base-100">
  <div class="flex flex-col lg:flex-row gap-8 max-w-5xl mx-auto place-content-center items-stretch">
    {#each automationProducts as product}
      <ProductCard {product} />
    {/each}
  </div>
</div>

<!-- Deep Dive Accordion Section -->
<div class="py-16 px-4 bg-base-200">
  <div class="max-w-3xl mx-auto">
    <h2 class="text-3xl font-bold text-center mb-8">The Nitty-Gritty Details</h2>
    <div class="join join-vertical w-full">
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="deep-dive-accordion" checked={true} /> 
        <div class="collapse-title text-xl font-medium">
          Will this run on my old laptop?
        </div>
        <div class="collapse-content"> 
          <p>Yes. Tested on Windows 10/11 and Windows Server 2016+. Requires at least 2 vCPU and 2 GB of RAM, which even most budget hardware from the last decade can handle.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="deep-dive-accordion" />
        <div class="collapse-title text-xl font-medium">
          What does the Setup Script actually do?
        </div>
        <div class="collapse-content"> 
          <p>It programmatically installs and configures NGINX as a reverse proxy, requests a Let's Encrypt SSL certificate via win-acme, sets up a scheduled task for auto-renewal, and writes Windows Firewall rules to whitelist only traffic from major charting providers on ports 80 and 443.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="deep-dive-accordion" /> 
        <div class="collapse-title text-xl font-medium">
          What happens if my VPS reboots?
        </div>
        <div class="collapse-content"> 
          <p>Both the Setup Script and the Trade Pilot engine are configured to run as persistent Windows services, so they will restart automatically on boot. No manual intervention is needed.</p>
        </div>
      </div>
       <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-accordion" /> 
        <div class="collapse-title text-xl font-medium">
          How secure is "secure"?
        </div>
        <div class="collapse-content"> 
          <p>Our philosophy is "zero trust." The Setup Script uses an industry-standard SSL provider (Let's Encrypt), hardens firewall rules, and your API keys never leave your machine. The engine communicates directly with the exchanges, not our servers. All local secrets are encrypted at rest with AES-256 and passwords are cryptographically hashed using Argon2id.</p>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/routes/+error.svelte">
<script>
  import "../app.css"
  import { page } from "$app/stores"
</script>

<div class="hero min-h-[100vh]">
  <div class="hero-content text-center">
    <div class="max-w-lg">
      <h1 class="text-5xl font-bold">This is embarrassing...</h1>
      <p class="py-6 text-2xl">There was an error: {$page?.error?.message}</p>
      <div>
        <a href="/" class="btn btn-primary btn-wide">Return Home</a>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/routes/+layout.svelte">
<script lang="ts">
  import "../app.css"
  import { navigating } from "$app/stores"
  import { expoOut } from "svelte/easing"
  import { slide } from "svelte/transition"
  interface Props {
    children?: import("svelte").Snippet
  }

  let { children }: Props = $props()
</script>

{#if $navigating}
  <!-- 
    Loading animation for next page since svelte doesn't show any indicator. 
     - delay 100ms because most page loads are instant, and we don't want to flash 
     - long 12s duration because we don't actually know how long it will take
     - exponential easing so fast loads (>100ms and <1s) still see enough progress,
       while slow networks see it moving for a full 12 seconds
  -->
  <div
    class="fixed w-full top-0 right-0 left-0 h-1 z-50 bg-primary"
    in:slide={{ delay: 100, duration: 12000, axis: "x", easing: expoOut }}
  ></div>
{/if}
{@render children?.()}
</file>

<file path="supabase/migrations/20240730010101_initial.sql">
-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  company_name text,
  avatar_url text,
  website text
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Profiles are viewable by self." on profiles
  for select using (auth.uid() = id);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- Create Stripe Customer Table
-- One stripe customer per user (PK enforced)
-- Limit RLS policies -- mostly only server side access
create table stripe_customers (
  user_id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  stripe_customer_id text unique
);
alter table stripe_customers enable row level security;

-- Create a table for "Contact Us" form submissions
-- Limit RLS policies -- only server side access
create table contact_requests (
  id uuid primary key default gen_random_uuid(),
  updated_at timestamp with time zone,
  first_name text,
  last_name text,
  email text,
  phone text,
  company_name text,
  message_body text
);
alter table contact_requests enable row level security;

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');
</file>

<file path="supabase/migrations/20240731051052_add_unsubscribed_to_profiles.sql">
ALTER TABLE profiles
ADD COLUMN IF NOT EXISTS unsubscribed boolean NOT NULL DEFAULT false;
</file>

<file path=".github/workflows/format.yml">
name: Format Check

on: [push, pull_request]

env:
  PUBLIC_SUPABASE_URL: "https://fake_test_url.supabase.co"
  PUBLIC_SUPABASE_ANON_KEY: "fake_anon_key"
  PRIVATE_SUPABASE_SERVICE_ROLE: "fake_service_role"
  PRIVATE_STRIPE_API_KEY: "fake_strip_api_key"

jobs:
  build_and_test:
    name: Code Format Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: NPM install
        run: npm install

      - name: Check Code Format
        run: npm run format_check

      - name: Run misspell to find misspelled words
        uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-check
          level: error
          path: "."
          options: "README.md ./src"
</file>

<file path=".prettierignore">
**/.svelte-kit/
**/node_modules/
**/package-lock.json

# Don't format plaintext email templates, the new lines are important
src/lib/emails/*_text.svelte
src/lib/emails/*_text.hbs
</file>

<file path="database_migration.sql">
-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  company_name text,
  avatar_url text,
  website text,
  unsubscribed boolean NOT NULL DEFAULT false
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Profiles are viewable by self." on profiles
  for select using (auth.uid() = id);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- Create Stripe Customer Table
-- One stripe customer per user (PK enforced)
-- Limit RLS policies -- mostly only server side access
create table stripe_customers (
  user_id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  stripe_customer_id text unique
);
alter table stripe_customers enable row level security;

-- Create a table for "Contact Us" form submissions
-- Limit RLS policies -- only server side access
create table contact_requests (
  id uuid primary key default gen_random_uuid(),
  updated_at timestamp with time zone,
  first_name text,
  last_name text,
  email text,
  phone text,
  company_name text,
  message_body text
);
alter table contact_requests enable row level security;

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');
</file>

<file path="src/config.ts">
export const WebsiteName: string = "Signal Lynx"
export const WebsiteBaseUrl: string = "https://www.signallynx.com" // our domain
export const WebsiteDescription: string =
  "Automation for the Night-Shift Nation. Webhook & licensing tools for traders and builders who value control and low cost."
export const CreateProfileStep: boolean = true
</file>

<file path="src/lib/components/pricing_module.svelte">
<script lang="ts">
  import { allProducts } from "$lib/data/products"
  import type { Product } from "$lib/data/products";

  interface Props {
    // Module context
    highlightedPlanId?: string
    currentPlanId?: string
    center?: boolean
  }

  let {
    highlightedPlanId = "",
    currentPlanId = "",
    center = true,
  }: Props = $props()
</script>

<div
  class="flex flex-col lg:flex-row gap-10 {center
    ? 'place-content-center'
    : ''} flex-wrap"
>
  {#each allProducts as plan: Product}
    <div
      class="flex-none card card-bordered {plan.id === highlightedPlanId
        ? 'border-secondary'
        : 'border-base-300'} shadow-xl flex-1 grow min-w-[260px] max-w-[310px] p-6"
    >
      <div class="flex flex-col h-full">
        <div class="text-xl font-bold">{plan.title}</div>
        <p class="mt-2 text-sm text-base-content/70 flex-grow">
          {plan.tagline}
        </p>
        <div class="mt-auto pt-4 text-sm text-base-content/80">
          Plan Includes:
          <ul class="list-disc list-inside mt-2 space-y-1">
            {#each plan.features as feature}
              <li class="">{feature}</li>
            {/each}
          </ul>
        </div>
        <div class="pt-8">
          <span class="text-4xl font-bold">{plan.price}</span>
          <div class="mt-6 pt-4 flex-1 flex flex-row items-center">
            {#if plan.id === currentPlanId}
              <div
                class="btn btn-outline btn-success no-animation w-[80%] mx-auto cursor-default"
              >
                Current Plan
              </div>
            {:else}
              <a
                href={plan.stripe_price_id ? `/account/subscribe/${plan.stripe_price_id}` : '/login'}
                class="btn btn-primary w-[80%] mx-auto"
              >
                {plan.ctaLabel}
              </a>
            {/if}
          </div>
        </div>
      </div>
    </div>
  {/each}
</div>
</file>

<file path="src/lib/emails/welcome_email_html.hbs">
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Welcome Email</title>
    <style media="all" type="text/css">
      @media all { .btn-primary table td:hover { background-color: #ec0867
      !important; } .btn-primary a:hover { background-color: #ec0867 !important;
      border-color: #ec0867 !important; } } @media only screen and (max-width:
      640px) { .main p, .main td, .main span { font-size: 16px !important; }
      .wrapper { padding: 8px !important; } .content { padding: 0 !important; }
      .container { padding: 0 !important; padding-top: 8px !important; width:
      100% !important; } .main { border-left-width: 0 !important; border-radius:
      0 !important; border-right-width: 0 !important; } .btn table { max-width:
      100% !important; width: 100% !important; } .btn a { font-size: 16px
      !important; max-width: 100% !important; width: 100% !important; } } @media
      all { .ExternalClass { width: 100%; } .ExternalClass, .ExternalClass p,
      .ExternalClass span, .ExternalClass font, .ExternalClass td,
      .ExternalClass div { line-height: 100%; } .apple-link a { color: inherit
      !important; font-family: inherit !important; font-size: inherit
      !important; font-weight: inherit !important; line-height: inherit
      !important; text-decoration: none !important; } #MessageViewBody a {
      color: inherit; text-decoration: none; font-size: inherit; font-family:
      inherit; font-weight: inherit; line-height: inherit; } }
    </style>
  </head>
  <body
    style="font-family: Helvetica, sans-serif; -webkit-font-smoothing: antialiased; font-size: 16px; line-height: 1.3; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; background-color: #f4f5f6; margin: 0; padding: 0;"
  >
    <table
      role="presentation"
      border="0"
      cellpadding="0"
      cellspacing="0"
      class="body"
      style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; background-color: #f4f5f6; width: 100%;"
      width="100%"
      bgcolor="#f4f5f6"
    >
      <tr>
        <td
          style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top;"
          valign="top"
        >&nbsp;</td>
        <td
          class="container"
          style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; max-width: 600px; padding: 0; padding-top: 24px; width: 600px; margin: 0 auto;"
          width="600"
          valign="top"
        >
          <div
            class="content"
            style="box-sizing: border-box; display: block; margin: 0 auto; max-width: 600px; padding: 0;"
          >
            <!-- START CENTERED WHITE CONTAINER -->
            <span
              class="preheader"
              style="color: transparent; display: none; height: 0; max-height: 0; max-width: 0; opacity: 0; overflow: hidden; mso-hide: all; visibility: hidden; width: 0;"
            >Welcome to
              {{companyName}}. We're excited to have you on board.</span>
            <table
              role="presentation"
              border="0"
              cellpadding="0"
              cellspacing="0"
              class="main"
              style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; background: #ffffff; border: 1px solid #eaebed; border-radius: 16px; width: 100%;"
              width="100%"
            >
              <!-- START MAIN CONTENT AREA -->
              <tr>
                <td
                  class="wrapper"
                  style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; box-sizing: border-box; padding: 24px;"
                  valign="top"
                >
                  <p
                    style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: normal; margin: 0; margin-bottom: 16px;"
                  >
                    Welcome to
                    {{companyName}}!
                  </p>
                  <p
                    style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: normal; margin: 0; margin-bottom: 16px;"
                  >
                    This is a quick sample of a welcome email. You can customize
                    this email to fit your needs.
                  </p>
                  <table
                    role="presentation"
                    border="0"
                    cellpadding="0"
                    cellspacing="0"
                    class="btn btn-primary"
                    style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; box-sizing: border-box; width: 100%; min-width: 100%;"
                    width="100%"
                  >
                    <tbody>
                      <tr>
                        <td
                          align="left"
                          style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; padding-bottom: 16px;"
                          valign="top"
                        >
                          <table
                            role="presentation"
                            border="0"
                            cellpadding="0"
                            cellspacing="0"
                            style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; width: auto;"
                          >
                            <tbody>
                              <tr>
                                <td
                                  style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; border-radius: 4px; text-align: center; background-color: #0867ec;"
                                  valign="top"
                                  align="center"
                                >
                                  <a
                                    href="https://github.com/CriticalMoments/CMSaasStarter"
                                    target="_blank"
                                    style="border: solid 2px #0867ec; border-radius: 4px; box-sizing: border-box; cursor: pointer; display: inline-block; font-size: 16px; font-weight: bold; margin: 0; padding: 12px 24px; text-decoration: none; text-transform: capitalize; background-color: #0867ec; border-color: #0867ec; color: #ffffff;"
                                  >View SaaS Starter Docs</a>
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                  <p
                    style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: normal; margin: 0; margin-bottom: 16px;"
                  >
                    Thanks for using
                    {{companyName}}!
                  </p>
                </td>
              </tr>
              <!-- END MAIN CONTENT AREA -->
            </table>

            <!-- START FOOTER -->
            <div
              class="footer"
              style="clear: both; padding-top: 24px; text-align: center; width: 100%;"
            >
              <table
                role="presentation"
                border="0"
                cellpadding="0"
                cellspacing="0"
                style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; width: 100%;"
                width="100%"
              >
                <tr>
                  <td
                    class="content-block"
                    style="font-family: Helvetica, sans-serif; vertical-align: top; color: #9a9ea6; font-size: 16px; text-align: center;"
                    valign="top"
                    align="center"
                  >
                    <span
                      class="apple-link"
                      style="color: #9a9ea6; font-size: 16px; text-align: center;"
                    >Company Inc, 123 Main St, Toronto, Canada</span>
                  </td>
                </tr>
                <tr>
                  <td
                    class="content-block powered-by"
                    style="font-family: Helvetica, sans-serif; vertical-align: top; color: #9a9ea6; font-size: 16px; text-align: center;"
                    valign="top"
                    align="center"
                  >
                    Email Template by
                    <a
                      href="http://htmlemail.io"
                      style="color: #9a9ea6; font-size: 16px; text-align: center; text-decoration: none;"
                    >HTMLemail.io</a>
                  </td>
                </tr>
                <tr>
                  <td
                    class="content-block"
                    style="font-family: Helvetica, sans-serif; vertical-align: top; color: #9a9ea6; font-size: 14px; text-align: center;"
                    valign="top"
                    align="center"
                  >
                    <a
                      href="{{WebsiteBaseUrl}}/account/settings/change_email_subscription"
                      style="color: #4382ff; font-size: 16px; text-align: center; text-decoration: underline;"
                    >Unsubscribe</a>
                  </td>
                </tr>
              </table>
            </div>

            <!-- END FOOTER -->

            <!-- END CENTERED WHITE CONTAINER -->
          </div>
        </td>
        <td
          style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top;"
          valign="top"
        >&nbsp;</td>
      </tr>
    </table>
  </body>
</html>
</file>

<file path="src/lib/emails/welcome_email_text.hbs">
Welcome to {{{companyName}}}!

This is a quick sample of a welcome email. You can customize this email to fit your needs.

To unsubscribe, visit: {{{WebsiteBaseUrl}}}/account/settings/change_email_subscription
</file>

<file path="src/routes/(admin)/account/(menu)/billing/+page.server.ts">
import { error, redirect } from "@sveltejs/kit"
import {
  fetchSubscription,
  getOrCreateCustomerId,
} from "../../subscription_helpers.server"
import type { PageServerLoad } from "./$types"

export const load: PageServerLoad = async ({
  locals: { safeGetSession, supabaseServiceRole },
}) => {
  const { session, user } = await safeGetSession()
  if (!session || !user?.id) {
    redirect(303, "/login")
  }

  const { error: idError, customerId } = await getOrCreateCustomerId({
    supabaseServiceRole,
    user,
  })
  if (idError || !customerId) {
    console.error("Error creating customer id", idError)
    error(500, {
      message: "Unknown error. If issue persists, please contact us.",
    })
  }

  const {
    primarySubscription,
    hasEverHadSubscription,
    error: fetchErr,
  } = await fetchSubscription({
    customerId,
  })
  if (fetchErr) {
    console.error("Error fetching subscription", fetchErr)
    error(500, {
      message: "Unknown error. If issue persists, please contact us.",
    })
  }

  return {
    isActiveCustomer: !!primarySubscription,
    hasEverHadSubscription,
    currentPlanId: primarySubscription?.appSubscription?.id,
  }
}
</file>

<file path="src/routes/(admin)/account/(menu)/billing/manage/+page.server.ts">
import { PRIVATE_STRIPE_API_KEY } from "$env/static/private"
import { error, redirect } from "@sveltejs/kit"
import Stripe from "stripe"
import { getOrCreateCustomerId } from "../../../subscription_helpers.server"
import type { PageServerLoad } from "./$types"
const stripe = new Stripe(PRIVATE_STRIPE_API_KEY, { apiVersion: "2023-08-16" })

export const load: PageServerLoad = async ({
  url,
  locals: { safeGetSession, supabaseServiceRole },
}) => {
  const { session, user } = await safeGetSession()
  if (!session) {
    redirect(303, "/login")
  }

  const { error: idError, customerId } = await getOrCreateCustomerId({
    supabaseServiceRole,
    user,
  })
  if (idError || !customerId) {
    console.error("Error creating customer id", idError)
    error(500, {
      message: "Unknown error (PCID). If issue persists, please contact us.",
    })
  }

  let portalLink
  try {
    const portalSession = await stripe.billingPortal.sessions.create({
      customer: customerId,
      return_url: `${url.origin}/account/billing`,
    })
    portalLink = portalSession?.url
  } catch (e) {
    console.error("Error creating billing portal session", e)
    error(500, "Unknown error (PSE). If issue persists, please contact us.")
  }

  redirect(303, portalLink ?? "/account/billing")
}
</file>

<file path="src/routes/(admin)/account/(menu)/settings/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "./settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()
  let { profile, user } = data
</script>

<svelte:head>
  <title>Settings</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Settings</h1>

<SettingsModule
  title="Profile"
  editable={false}
  fields={[
    { id: "fullName", label: "Name", initialValue: profile?.full_name ?? "" },
    {
      id: "companyName",
      label: "Company Name",
      initialValue: profile?.company_name ?? "",
    },
    {
      id: "website",
      label: "Company Website",
      initialValue: profile?.website ?? "",
    },
  ]}
  editButtonTitle="Edit Profile"
  editLink="/account/settings/edit_profile"
/>

<SettingsModule
  title="Email"
  editable={false}
  fields={[{ id: "email", initialValue: user?.email || "" }]}
  editButtonTitle="Change Email"
  editLink="/account/settings/change_email"
/>

<SettingsModule
  title="Password"
  editable={false}
  fields={[{ id: "password", initialValue: "••••••••••••••••" }]}
  editButtonTitle="Change Password"
  editLink="/account/settings/change_password"
/>

<SettingsModule
  title="Email Subscription"
  editable={false}
  fields={[
    {
      id: "subscriptionStatus",
      initialValue: profile?.unsubscribed ? "Unsubscribed" : "Subscribed",
    },
  ]}
  editButtonTitle="Change Subscription"
  editLink="/account/settings/change_email_subscription"
/>

<SettingsModule
  title="Danger Zone"
  editable={false}
  dangerous={true}
  fields={[]}
  editButtonTitle="Delete Account"
  editLink="/account/settings/delete_account"
/>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/change_email_subscription/+page.svelte">
<script lang="ts">
  import SettingsModule from "../settings_module.svelte"
  let { data } = $props()
  let { profile } = data
  let unsubscribed = profile?.unsubscribed
</script>

<svelte:head>
  <title>Change Email Subscription</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Email Subscription</h1>

<SettingsModule
  editable={true}
  title="Subscription"
  message={unsubscribed
    ? "You are currently unsubscribed from emails"
    : "You are currently subscribed to emails"}
  saveButtonTitle={unsubscribed ? "Re-subscribe" : "Unsubscribe"}
  successBody={unsubscribed
    ? "You have been re-subscribed to emails"
    : "You have been unsubscribed from emails"}
  formTarget="/account/api?/toggleEmailSubscription"
  fields={[]}
/>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/change_email/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()

  let { user } = data
</script>

<svelte:head>
  <title>Change Email</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Settings</h1>

<SettingsModule
  title="Change Email"
  editable={true}
  successTitle="Email change initiated"
  successBody="You should receive emails at both the old and new address to confirm the change. Please click the link in both emails to finalized the change. Until finalized, you must sign in with your current email."
  formTarget="/account/api?/updateEmail"
  fields={[
    {
      id: "email",
      label: "Email",
      initialValue: user?.email ?? "",
      placeholder: "Email address",
    },
  ]}
/>
</file>

<file path="src/routes/(admin)/account/+layout.svelte">
<script lang="ts">
  import { invalidate } from "$app/navigation"
  import { onMount } from "svelte"

  let { data, children } = $props()

  let { supabase, session } = $state(data)
  $effect(() => {
    ;({ supabase, session } = data)
  })

  onMount(() => {
    const { data } = supabase.auth.onAuthStateChange((event, _session) => {
      if (_session?.expires_at !== session?.expires_at) {
        invalidate("supabase:auth")
      }
    })

    return () => data.subscription.unsubscribe()
  })
</script>

{@render children?.()}
</file>

<file path="src/routes/(admin)/account/create_profile/+page.svelte">
<script lang="ts">
  import { applyAction, enhance } from "$app/forms"
  import type { SubmitFunction } from "@sveltejs/kit"
  import "../../../../app.css"

  interface User {
    email: string
  }

  interface Profile {
    full_name?: string
    company_name?: string
    website?: string
  }

  interface Props {
    data: { user: User; profile: Profile }
    form: FormAccountUpdateResult
  }

  let { data, form }: Props = $props()

  let { user, profile } = data

  let loading = $state(false)
  let fullName: string = profile?.full_name ?? ""
  let companyName: string = profile?.company_name ?? ""
  let website: string = profile?.website ?? ""

  const fieldError = (liveForm: FormAccountUpdateResult, name: string) => {
    let errors = liveForm?.errorFields ?? []
    return errors.includes(name)
  }

  const handleSubmit: SubmitFunction = () => {
    loading = true
    return async ({ update, result }) => {
      await update({ reset: false })
      await applyAction(result)
      loading = false
    }
  }
</script>

<svelte:head>
  <title>Create Profile</title>
</svelte:head>

<div
  class="text-center content-center max-w-lg mx-auto min-h-[100vh] pb-12 flex items-center place-content-center"
>
  <div class="flex flex-col w-64 lg:w-80">
    <div>
      <h1 class="text-2xl font-bold mb-6">Create Profile</h1>
      <form
        class="form-widget"
        method="POST"
        action="/account/api?/updateProfile"
        use:enhance={handleSubmit}
      >
        <div class="mt-4">
          <label for="fullName">
            <span class="text-l text-center">Your Name</span>
          </label>
          <input
            id="fullName"
            name="fullName"
            type="text"
            placeholder="Your full name"
            class="{fieldError(form, 'fullName')
              ? 'input-error'
              : ''} mt-1 input input-bordered w-full max-w-xs"
            value={form?.fullName ?? fullName}
            maxlength="50"
          />
        </div>

        <div class="mt-4">
          <label for="companyName">
            <span class="text-l text-center">Company Name</span>
          </label>
          <input
            id="companyName"
            name="companyName"
            type="text"
            placeholder="Company name"
            class="{fieldError(form, 'companyName')
              ? 'input-error'
              : ''} mt-1 input input-bordered w-full max-w-xs"
            value={form?.companyName ?? companyName}
            maxlength="50"
          />
        </div>

        <div class="mt-4">
          <label for="website">
            <span class="text-l text-center">Company Website</span>
          </label>
          <input
            id="website"
            name="website"
            type="text"
            placeholder="Company website"
            class="{fieldError(form, 'website')
              ? 'input-error'
              : ''} mt-1 input input-bordered w-full max-w-xs"
            value={form?.website ?? website}
            maxlength="50"
          />
        </div>

        {#if form?.errorMessage}
          <p class="text-red-700 text-sm font-bold text-center mt-3">
            {form?.errorMessage}
          </p>
        {/if}
        <div class="mt-4">
          <input
            type="submit"
            class="btn btn-primary mt-3 btn-wide"
            value={loading ? "..." : "Create Profile"}
            disabled={loading}
          />
        </div>
      </form>

      <div class="text-sm text-slate-800 mt-14">
        You are logged in as {user?.email}.
        <br />
        <a class="underline" href="/account/sign_out"> Sign out </a>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/routes/(admin)/account/sign_out/+page.svelte">
<script lang="ts">
  import { goto } from "$app/navigation"
  import { onMount } from "svelte"

  let { data } = $props()

  let { supabase } = data
  let message = $state("Signing out....")

  // on mount, sign out
  onMount(() => {
    supabase.auth.signOut().then(({ error }) => {
      if (error) {
        message = "There was an issue signing out."
      } else {
        goto("/")
      }
    })
  })
</script>

<h1 class="text-2xl font-bold m-6 mx-auto my-auto">{message}</h1>
</file>

<file path="src/routes/(admin)/account/subscribe/[slug]/+page.server.ts">
import { PRIVATE_STRIPE_API_KEY } from "$env/static/private"
import { error, redirect } from "@sveltejs/kit"
import Stripe from "stripe"
import {
  fetchSubscription,
  getOrCreateCustomerId,
} from "../../subscription_helpers.server"
import type { PageServerLoad } from "./$types"
const stripe = new Stripe(PRIVATE_STRIPE_API_KEY, { apiVersion: "2023-08-16" })

export const load: PageServerLoad = async ({
  params,
  url,
  locals: { safeGetSession, supabaseServiceRole },
}) => {
  const { session, user } = await safeGetSession()
  if (!session) {
    redirect(303, "/login")
  }

  if (params.slug === "free_plan") {
    // plan with no stripe_price_id. Redirect to account home
    redirect(303, "/account")
  }

  const { error: idError, customerId } = await getOrCreateCustomerId({
    supabaseServiceRole,
    user,
  })
  if (idError || !customerId) {
    console.error("Error creating customer id", idError)
    error(500, {
      message: "Unknown error. If issue persists, please contact us.",
    })
  }

  const { primarySubscription } = await fetchSubscription({
    customerId,
  })
  if (primarySubscription) {
    // User already has plan, we shouldn't let them buy another
    redirect(303, "/account/billing")
  }

  let checkoutUrl
  try {
    const stripeSession = await stripe.checkout.sessions.create({
      line_items: [
        {
          price: params.slug,
          quantity: 1,
        },
      ],
      customer: customerId,
      mode: "subscription",
      success_url: `${url.origin}/account`,
      cancel_url: `${url.origin}/account/billing`,
    })
    checkoutUrl = stripeSession.url
  } catch (e) {
    console.error("Error creating checkout session", e)
    error(500, "Unknown Error (SSE): If issue persists please contact us.")
  }

  redirect(303, checkoutUrl ?? "/pricing")
}
</file>

<file path="src/routes/(admin)/account/subscription_helpers.server.ts">
import type { SupabaseClient, User } from "@supabase/supabase-js"
import type { Database } from "../../../DatabaseDefinitions"

import { PRIVATE_STRIPE_API_KEY } from "$env/static/private"
import Stripe from "stripe"
import { allProducts } from "$lib/data/products"
const stripe = new Stripe(PRIVATE_STRIPE_API_KEY, { apiVersion: "2023-08-16" })

export const getOrCreateCustomerId = async ({
  supabaseServiceRole,
  user,
}: {
  supabaseServiceRole: SupabaseClient<Database>
  user: User
}) => {
  const { data: dbCustomer, error } = await supabaseServiceRole
    .from("stripe_customers")
    .select("stripe_customer_id")
    .eq("user_id", user.id)
    .single()

  if (error && error.code != "PGRST116") {
    // PGRST116 == no rows
    return { error: error }
  }

  if (dbCustomer?.stripe_customer_id) {
    return { customerId: dbCustomer.stripe_customer_id }
  }

  // Fetch data needed to create customer
  const { data: profile, error: profileError } = await supabaseServiceRole
    .from("profiles")
    .select(`full_name, website, company_name`)
    .eq("id", user.id)
    .single()
  if (profileError) {
    return { error: profileError }
  }

  // Create a stripe customer
  let customer
  try {
    customer = await stripe.customers.create({
      email: user.email,
      name: profile.full_name ?? "",
      metadata: {
        user_id: user.id,
        company_name: profile.company_name ?? "",
        website: profile.website ?? "",
      },
    })
  } catch (e) {
    return { error: e }
  }

  if (!customer.id) {
    return { error: "Unknown stripe user creation error" }
  }

  // insert instead of upsert so we never over-write. PK ensures later attempts error.
  const { error: insertError } = await supabaseServiceRole
    .from("stripe_customers")
    .insert({
      user_id: user.id,
      stripe_customer_id: customer.id,
      updated_at: new Date(),
    })

  if (insertError) {
    return { error: insertError }
  }

  return { customerId: customer.id }
}

export const fetchSubscription = async ({
  customerId,
}: {
  customerId: string
}) => {
  // Fetch user's subscriptions
  let stripeSubscriptions
  try {
    stripeSubscriptions = await stripe.subscriptions.list({
      customer: customerId,
      limit: 100,
      status: "all",
    })
  } catch (e) {
    return { error: e }
  }

  // find "primary". The user may have several old ones, we want an active one (including trials, and past_due in grace period).
  const primaryStripeSubscription = stripeSubscriptions.data.find((x) => {
    return (
      x.status === "active" ||
      x.status === "trialing" ||
      x.status === "past_due"
    )
  })
  let appSubscription = null
  if (primaryStripeSubscription) {
    const productId =
      primaryStripeSubscription?.items?.data?.[0]?.price.product ?? ""
    
    if (!productId) {
      return {
        error: "Stripe subscription is missing a product ID. This can happen if the subscription was created improperly or is in a strange state."
      }
    }

    appSubscription = allProducts.find((x) => {
      return x.stripe_product_id === productId
    })
    if (!appSubscription) {
      return {
        error:
          "Stripe subscription does not have matching app subscription in pricing_plans.ts (via product id match)",
      }
    }
  }
  let primarySubscription = null
  if (primaryStripeSubscription && appSubscription) {
    primarySubscription = {
      stripeSubscription: primaryStripeSubscription,
      appSubscription: appSubscription,
    }
  }

  const hasEverHadSubscription = stripeSubscriptions.data.length > 0

  return {
    primarySubscription,
    hasEverHadSubscription,
  }
}
</file>

<file path="src/routes/(marketing)/contact_us/+page.server.ts">
import { fail } from "@sveltejs/kit"
import { sendAdminEmail } from "$lib/mailer.js"

/** @type {import('./$types').Actions} */
export const actions = {
  submitContactUs: async ({ request, locals: { supabaseServiceRole } }) => {
    const formData = await request.formData()
    const errors: { [fieldName: string]: string } = {}

    const firstName = formData.get("first_name")?.toString() ?? ""
    if (firstName.length < 2) {
      errors["first_name"] = "First name is required"
    }
    if (firstName.length > 500) {
      errors["first_name"] = "First name too long"
    }

    const lastName = formData.get("last_name")?.toString() ?? ""
    if (lastName.length < 2) {
      errors["last_name"] = "Last name is required"
    }
    if (lastName.length > 500) {
      errors["last_name"] = "Last name too long"
    }

    const email = formData.get("email")?.toString() ?? ""
    if (email.length < 6) {
      errors["email"] = "Email is required"
    } else if (email.length > 500) {
      errors["email"] = "Email too long"
    } else if (!email.includes("@") || !email.includes(".")) {
      errors["email"] = "Invalid email"
    }

    const company = formData.get("company")?.toString() ?? ""
    if (company.length > 500) {
      errors["company"] = "Company too long"
    }

    const phone = formData.get("phone")?.toString() ?? ""
    if (phone.length > 100) {
      errors["phone"] = "Phone number too long"
    }

    const message = formData.get("message")?.toString() ?? ""
    if (message.length > 2000) {
      errors["message"] = "Message too long (" + message.length + " of 2000)"
    }

    if (Object.keys(errors).length > 0) {
      return fail(400, { errors })
    }

    // Save to database
    const { error: insertError } = await supabaseServiceRole
      .from("contact_requests")
      .insert({
        first_name: firstName,
        last_name: lastName,
        email,
        company_name: company,
        phone,
        message_body: message,
        updated_at: new Date(),
      })

    if (insertError) {
      console.error("Error saving contact request", insertError)
      return fail(500, { errors: { _: "Error saving" } })
    }

    // Send email to admin
    await sendAdminEmail({
      subject: "New contact request",
      body: `New contact request from ${firstName} ${lastName}.\n\nEmail: ${email}\n\nPhone: ${phone}\n\nCompany: ${company}\n\nMessage: ${message}`,
    })
  },
}
</file>

<file path="src/routes/(marketing)/faq/+page.svelte">
<script lang="ts">
// No script logic needed for this static content page.
</script>

<svelte:head>
  <title>FAQ - Signal Lynx</title>
  <meta name="description" content="Frequently asked questions about Signal Lynx products, billing, security, and setup." />
</svelte:head>

<div class="py-12 px-4 bg-base-100">
  <div class="max-w-3xl mx-auto">
    <h1 class="text-4xl md:text-6xl font-bold text-center text-primary mb-12">Frequently Asked Questions</h1>

    <!-- Universal Questions -->
    <h2 class="text-3xl font-bold text-secondary mb-6">Universal Questions</h2>
    <div class="join join-vertical w-full">
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" checked />
        <div class="collapse-title text-xl font-medium">How do you bill me?</div>
        <div class="collapse-content">
          <p>We offer simple monthly or yearly subscriptions. No surprise “pro-plus-turbo” tiers or sneaky in-app purchases. We accept all major credit cards.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Is there a real free trial?</div>
        <div class="collapse-content">
          <p>Yep! Seven days, fully unlocked. We do require a card, but if you cancel before the seven-day mark, you won't be charged a cent.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Can I get a refund?</div>
        <div class="collapse-content">
          <p>Since our software is a digital download, we can't exactly "un-download" it. Therefore, all sales are final. Canceling your subscription simply prevents future renewals. Please use the free trial to make sure our tools are the right fit for your needs.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">What hardware do I need?</div>
        <div class="collapse-content">
          <p>The Signal Lynx applications require minimal processing power. Our tools are lightweight, but please check the specific product page for detailed requirements.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Should I use a laptop or a VPS?</div>
        <div class="collapse-content">
          <p>Your laptop, desktop, or gaming PC works great, but a Virtual Private Server (VPS) gives you 24/7 uptime and spares your home power bill.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Can I hide behind a VPN?</div>
        <div class="collapse-content">
          <p>Only if your VPN provides a static IP address. If the IP changes or rotates, TradingView webhooks won't be able to find your computer or our webhook engine.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Webhooks? Am I safe from internet baddies?</div>
        <div class="collapse-content">
          <p>Absolutely. The Signal Lynx Installer creates a secure tunnel for webhooks, using industry-standard practices to keep you and your data safe from internet baddies.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">How safe are my passwords & API keys?</div>
        <div class="collapse-content">
          <p>We use leading encryption routines to protect your secure data, and it's all stored right on your local disk. Our security practices meet or exceed the stringent Open Worldwide Application Security Project (OWASP) guidelines.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">How do I scream for help?</div>
        <div class="collapse-content">
          <p>Our DMs are always open on Telegram and X (formerly Twitter). We're here to help.</p>
        </div>
      </div>
<div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Who is Signal Lynx?</div>
        <div class="collapse-content">
          <p>We’re probably a lot like you - a small team of engineers and traders with day jobs. Signal Lynx is what happens when you get tired of tools that are either too expensive or just plain don't work.</p>
          <p class="mt-2">Fueled by late nights and questionably large amounts of caffeine, we decided to build our own solutions. Now, we're sharing them with the community.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Why are your prices so low?</div>
        <div class="collapse-content">
          <p>Simple: We're not a giant, venture-capital-funded corporation with a yacht to pay for. Our tools were born out of personal need, and we believe in putting powerful, reliable software in the hands of individuals.</p>
          <p class="mt-2">We couldn't, in good conscience, charge thousands for something we built for ourselves and our community. We call it a disruptive price - you can call it a fair one.</p>
          <p class="mt-2">Use the money you're saving to grow your capabilities. Get that first VPS, upgrade your setup, or buy another case of your favorite energy drink. We get it.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">What’s on the roadmap?</div>
        <div class="collapse-content">
          <p>We're a small, passionate team that's always building. We might not move at the speed of a time-jumping DeLorean, because we have day jobs just like you. <br/>
          We want to hear your opinions on what to build next! Vote for features or roast us on Telegram or X (formerly Twitter)!</p>
        </div>
      </div>
    </div>

    <!-- Signal Lynx Webhook Engine Installer: FAQs -->
    <h2 class="text-3xl font-bold text-secondary mt-16 mb-6">Signal Lynx Webhook Engine Installer: FAQ's</h2>
    <div class="join join-vertical w-full">
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" checked />
        <div class="collapse-title text-xl font-medium">What exactly gets installed?</div>
        <div class="collapse-content">
          <p>Only what's needed to protect your computer and ensure reliable trading. The installer sets up a reverse proxy (NGINX), time synchronization (NetTime), an in-memory database for stability (Memurai), and the NSSM service manager. It also performs full SSL encryption to secure your connection.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" />
        <div class="collapse-title text-xl font-medium">Does it touch the Windows Registry?</div>
        <div class="collapse-content">
          <p>Yep—just enough to ensure robust performance of the Webhook Engine. All changes are completely reversible.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" />
        <div class="collapse-title text-xl font-medium">What if the installer fails?</div>
        <div class="collapse-content">
          <p>In the unlikely event the setup installer fails, the configuration can be done manually. Just follow the instructions in the Webhook Engine's `README` file for details.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" />
        <div class="collapse-title text-xl font-medium">Can I undo everything?</div>
        <div class="collapse-content">
          <p>Yes! Everything the installer does can be quickly and cleanly uninstalled.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" />
        <div class="collapse-title text-xl font-medium">What operating systems are supported?</div>
        <div class="collapse-content">
          <p>Currently, we only support Windows10/11 and Server 2016+. Support for Linux and macOS is on the roadmap.</p>
        </div>
      </div>
    </div>

    <!-- Signal Lynx Webhook Engine: FAQs -->
    <h2 class="text-3xl font-bold text-secondary mt-16 mb-6">Signal Lynx Webhook Engine: FAQ's</h2>
    <div class="join join-vertical w-full">
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" checked />
        <div class="collapse-title text-xl font-medium">Which exchanges are supported?</div>
        <div class="collapse-content">
          <p>Kraken, Gemini, and Binance.US are currently supported. Additional exchanges are forthcoming—let us know which ones you want to see next!</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What computer operating systems are supported?</div>
        <div class="collapse-content">
          <p>Same as the installer: We currently support Windows 10/11 and Server 2016+, with Linux and macOS on the way.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">How fast can I start trading?</div>
        <div class="collapse-content">
          <p>The host computer and Webhook Engine can be configured in less than 15 minutes, including generating your new exchange API keys.</p>
          <p class="font-semibold mt-4">Key Setup Steps:</p>
          <ol class="list-decimal list-inside pl-4 space-y-1">
            <li>Run the Installer.</li>
            <li>Launch the Webhook Engine.</li>
            <li>Enter your Master Password.</li>
            <li>Enter your Webhook Passphrase (a second-tier password for extra security).</li>
            <li>Enter your License Key (sent to your email after signup).</li>
            <li>Configure your Telegram Bot Token and Chat ID (for mobile alerts).</li>
            <li>Configure Exchanges and enter their API Keys.</li>
          </ol>
          <p class="mt-2">That's it! The Webhook Engine is up and running, as visually confirmed by the connectivity status in the upper right. All that's left is to configure your TradingView alerts with the appropriate order details.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What order types are supported?</div>
        <div class="collapse-content">
          <p>We support Spot Only trading for Kraken, Gemini, and Binance.US.</p>
          <ul class="list-disc list-inside pl-4 space-y-2 mt-2">
            <li><b>Kraken:</b> Limit, Advanced Limit, Market, Take Profit, and Stop Loss orders. <br/>
               (Note: Kraken Stock Trading is not supported.)</li>
            <li><b>Gemini:</b> Limit, Advanced Limit, Take Profit, and Stop Loss orders. <br/>
               (Note: The Gemini API doesn't allow market orders, so our Advanced Limit order type cleverly emulates one for you.)</li>
            <li><b>Binance.US:</b> Limit, Advanced Limit, Market, Take Profit, and Stop Loss orders.</li>
          </ul>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">How does the engine know what to trade?</div>
        <div class="collapse-content">
          <p>The engine takes its instructions from a webhook, typically generated by TradingView.<br/> In TradingView, you set up your alert conditions, assign the webhook URL, and then define the order details in the message box using the JSON format.<br/>
          (Think of JSON as a simple, universal language for giving instructions to the engine.)</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Where do I find my public IP address?</div>
        <div class="collapse-content">
          <p>Go to any "what is my IP" website. That's the address you'll enter into the TradingView webhook URL (e.g., https://123.456.78.90/webhook).</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">How many alerts per second can it handle?</div>
        <div class="collapse-content">
          <p>It safely operates with up to 10 alerts per second.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What does the dashboard show?</div>
        <div class="collapse-content">
          <p>The dashboard shows the engine's operational status, allowing you to see when alerts arrive, how they are processed, and if they are successfully filled by the exchange. <br/>It also shows application and exchange connectivity, subscription status, an audit log of orders, and provides Profit and Loss (PNL) tracking, in addition to error logging for your peace of mind.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Are there mobile alerts?</div>
        <div class="collapse-content">
          <p>Yes! Telegram integration allows you to see what alerts and orders are being triggered and monitor order fills while you're away from your computer. Never miss an execution.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Is my API key safe?</div>
        <div class="collapse-content">
          <p>API keys and passwords are fully encrypted and stored on your host computer. No cloud services are involved, meaning you are in control of your keys, reducing the risk of third-party breaches.<br/>Signal Lynx does not store or see your passwords or keys—ever. We will never ask for them.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Is there an offline mode?</div>
        <div class="collapse-content">
          <p>Afraid not. The Webhook Engine must be running for it to work. If your PC shuts down or loses internet connectivity, webhooks will not be processed.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Does the engine auto-update?</div>
        <div class="collapse-content">
          <p>No automatic updates here. New versions will be available in the downloads section of your account.<br/>Updates are easy: just download the new `.exe` from our website, place it in your application folder, and delete or archive the old one. You're done. No other setup or configuration is required.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Can I pause trading?</div>
        <div class="collapse-content">
          <p>Yes! There are multiple ways to do this, but the easiest is to simply shut down the Webhook Engine for a universal pause. Pausing individual alerts on TradingView is the recommended and most strategic approach.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What if I forget my password?</div>
        <div class="collapse-content">
          <p>For enhanced security, there is no "forgot password" feature. You can change your password anytime within the "Update Keys" tab.<br/>If you do forget it, the application can be reinitialized in less than 10 minutes. Deleting the `SignalLynx_Vault.encrypted` file will reinitialize the engine. Once deleted, restart the `.exe` file, enter a new master password, re-enter your keys, and you're back up and running.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What are some future features?</div>
        <div class="collapse-content">
          <p>We're focused on adding support for more exchanges and rolling out even more useful dashboard widgets.</p>
        </div>
      </div>
    </div>

    <!-- Signal Lynx License-Hub: FAQs -->
    <h2 class="text-3xl font-bold text-secondary mt-16 mb-6">Signal Lynx License-Hub: FAQ's</h2>
    <div class="join join-vertical w-full">
    <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" checked />
        <div class="collapse-title text-xl font-medium">How hard is the License Hub to learn?</div>
        <div class="collapse-content">
          <p>It's easy! The Signal Lynx License Hub is designed to be easy to learn and set up.<br/>It features 100% graphical interfaces: no `.env` files and no command-line routines required.<br/>The Administrator Portal provides all the features necessary to set up and manage your customer database.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What capabilities does License Hub have?</div>
        <div class="collapse-content">
          <p>License Hub is a full-featured License-as-a-Service (LaaS) solution. It handles key generation, customer management, payment processing, license delivery, revocation, re-issuance, and more.<br/>It also includes a complete Administrator Portal, allowing you to manage your customers and license keys with ease.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Is everything included for one flat rate?</div>
        <div class="collapse-content">
          <p class="font-semibold">Yes. One price, all features. No hidden fees, "pro" tiers, or surprise add-ons.</p>
          <p class="mt-2">We were just as irritated with the confusing and expensive tiers on other license managers. It’s frustrating how quickly the price can skyrocket, especially for indie developers and small businesses.</p>
          <p class="mt-2">License Hub is a non-throttled, all-inclusive application. Bring as many products and customers as you need to support your goals—we don't penalize your growth.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What do I need to run License Hub?</div>
        <div class="collapse-content">
          <p>An inexpensive, low-power VPS configured with Docker is the recommended approach. This provides a low-cost, dedicated, and professionally managed hardware option to run License Hub.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">How do I set up and configure License Hub?</div>
        <div class="collapse-content">
          <p>License Hub is provided as a Docker container and will run on any system that supports Docker.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What are the system requirements?</div>
        <div class="collapse-content">
          <p>Minimal system requirements are needed: 2 vCPUs, 8 GB of RAM, and 100 GB of storage should be sufficient. A Docker installation is required.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What payment providers are supported?</div>
        <div class="collapse-content">
          <p>Currently, only Stripe is supported by License Hub.<br/>Additional payment providers will be included in future upgrades. Please let us know what you want to see!</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What product types are supported?</div>
        <div class="collapse-content">
          <p>Both one-time purchases and recurring subscription orders are supported by License Hub.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Does License Hub have software-sharing protections?</div>
        <div class="collapse-content">
          <p>Yes! Each license key is paired to a machine ID during initial verification. Post-initialization, only that initial machine ID will be authorized to use the license.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What if my user gets a new computer?</div>
        <div class="collapse-content">
          <p>Machine ID resets are easy! License Hub has hooks for you to create an account-based automated reset using only the user's license key.<br/>To prevent malicious use, automatic resets are limited to once per month, but this allows for a user-driven update. Admins can perform additional machine resets at any time.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Does it support offline use?</div>
        <div class="collapse-content">
          <p>Yes! Admins can enable Offline Session Tokens. An initial online connection is required to generate the token, after which the token permits offline use until the next subscription renewal date.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What's the security like?</div>
        <div class="collapse-content">
          <p>Our security practices meet or exceed the stringent Open Worldwide Application Security Project (OWASP) guidelines.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Can I issue developer or custom keys?</div>
        <div class="collapse-content">
          <p>Yes! Admins can generate developer and custom keys for testers, influencers, or promotional giveaways.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Can I manage multiple products and tiers?</div>
        <div class="collapse-content">
          <p>Absolutely! There are no product limitations, and it features fully configurable tier mapping.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Does License Hub back up the database?</div>
        <div class="collapse-content">
          <p>Yes! License Hub supports both manual and automatic backups of the customer and payment database.<br/>In addition, it runs reconciliation against the payment provider's database, ensuring no customers are missed and that your database stays current.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Can it recover from a disaster?</div>
        <div class="collapse-content">
          <p>Yes! License Hub is intelligently designed to restore itself after a disaster, even without performing a restoration from a backup.<br/>Reconciliation runs will repopulate your customer database from your payment provider and re-generate the same license keys, maintaining continuity for your paying subscribers!<br/>(Note: Developer keys can only be recovered from a backup, so always keep a copy of your backups!)</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Is license key generation and delivery automatic?</div>
        <div class="collapse-content">
          <p>Yes! License Hub will automatically generate and send license keys to new users via email.<br/>Email automation is configurable and preloaded with multiple providers (SMTP, Brevo, and Amazon SES).</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">How do I code my software to integrate with License-Hub?</div>
        <div class="collapse-content">
          <p>Please see the License-Hub ReadMe file for full details and suggested code examples to facilitate integration. <br/>
          Additionally please reach out to us on Telegram or X/Twitter if you need additional help with your application. </p>
        </div>
      </div>
    </div>

    <!-- We want to hear from you! -->
    <div class="text-center mt-16">
      <h2 class="text-2xl font-bold">Need more?</h2>
      <p class="mt-2">Hit us up on Telegram or X (formerly Twitter). <br/>
      If your question makes us double face-palm, it goes right into this FAQ.</p>
    </div>
  </div>
</div>
</file>

<file path="src/routes/(marketing)/login/forgot_password/+page.svelte">
<script lang="ts">
  import { Auth } from "@supabase/auth-ui-svelte"
  import { sharedAppearance, oauthProviders } from "../login_config"

  let { data } = $props()
</script>

<svelte:head>
  <title>Forgot Password</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Forgot Password</h1>
<Auth
  supabaseClient={data.supabase}
  view="forgotten_password"
  redirectTo={`${data.url}/auth/callback?next=%2Faccount%2Fsettings%2Freset_password`}
  providers={oauthProviders}
  socialLayout="horizontal"
  showLinks={false}
  appearance={sharedAppearance}
  additionalData={undefined}
/>
<div class="text-l text-slate-800 mt-4">
  Remember your password? <a class="underline" href="/login/sign_in">Sign in</a
  >.
</div>
</file>

<file path="src/routes/(marketing)/login/login_config.ts">
import { ThemeSupa } from "@supabase/auth-ui-shared"
import type { Provider } from "@supabase/supabase-js"

export const oauthProviders = [] as Provider[]

// use the css variables from DaisyUI to style Supabase auth template
export const sharedAppearance = {
  theme: ThemeSupa,
  variables: {
    default: {
      colors: {
        brand: "oklch(var(--p))",
        brandAccent: "oklch(var(--ac))",
        inputText: "oklch(var(--n))",
        brandButtonText: "oklch(var(--pc))",
        messageText: "oklch(var(--b))",
        dividerBackground: "oklch(var(--n))",
        inputLabelText: "oklch(var(--p))", // This is the fix
        defaultButtonText: "oklch(var(--n))",
        anchorTextColor: "oklch(var(--p))",
      },
      fontSizes: {
        baseInputSize: "16px",
      },
    },
  },
  className: {
    button: "authBtn",
  },
}
</file>

<file path="src/routes/(marketing)/search/api.json/+server.ts">
import { buildSearchIndex } from "$lib/build_index";
import { json } from "@sveltejs/kit";

export const prerender = true;

export async function GET() {
  const searchData = await buildSearchIndex();
  return json(searchData);
}
</file>

<file path="svelte.config.js">
import adapter from "@sveltejs/adapter-auto"
import { vitePreprocess } from "@sveltejs/vite-plugin-svelte"

/** @type {import('@sveltejs/kit').Config} */
const config = {
  kit: {
    // adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.
    // If your environment is not supported or you settled on a specific environment, switch out the adapter.
    // See https://kit.svelte.dev/docs/adapters for more information about adapters.
    adapter: adapter(),
    // allow up to 150kb of style to be inlined with the HTML
    // Faster FCP (First Contentful Paint) by reducing the number of requests
    inlineStyleThreshold: 150000,
  },
  preprocess: vitePreprocess(),
}

export default config
</file>

<file path="vite.config.ts">
import { sveltekit } from "@sveltejs/kit/vite";
import { defineConfig } from "vitest/config";

export default defineConfig({
  plugins: [sveltekit()],
  test: {
    include: ["src/**/*.{test,spec}.{js,ts}"],
    globals: true, // allows to skip import of test functions like `describe`, `it`, `expect`, etc.
  },
});
</file>

<file path="email_docs.md">
# Email Setup

SaaS Starter includes email capabilities for sending emails to users, and admins.

There are three types of emails:

- Admin emails: sent to a static admin email address, useful for monitoring app activity like new signups and contact-us form submissions.
- User emails: sent to the user's email address. For example: a welcome email.
- Auth emails: verifing the user's email address and magic links. Auth emails are covered in the main README setup docs, and not covered here.

## Set Up Email

To enable email capabilities, set the following environment variables:

**Important**: The template includes a welcome email, which will be enabled once you set your Resend API key. You should customize the email to fit your brand and content or remove it **BEFORE** you enable the email with environment variables. See below.

- `PRIVATE_RESEND_API_KEY`: a https://resend.com API key. Note, you'll need to verify your 'from' domain with them before you can use their service.
- `PRIVATE_ADMIN_EMAIL`: the email address to which admin emails will be sent. If unset, admin emails will not be sent.
  - `PRIVATE_FROM_ADMIN_EMAIL`: the email address to use as the from address for admin emails (defaults to `PRIVATE_ADMIN_EMAIL` if not set).

## Customize Welcome Email

SaaS Starter includes a welcome email template that you can customize to fit your brand and content. The email is sent to the user's email address when create their profile.

To customize the email:

- edit the properties like company name, from email, and subject in the call to sendTemplatedEmail in src/routes/(admin)/account/api/+page.server.ts
- edit the plaintext email content in src/lib/emails/welcome_email_text.hbs
- edit the html email content in src/lib/emails/welcome_email_html.hbs - don't forget address and preheader text which won't render in a preview, but will in the client's email client.

**Note**: use triple braces for properties in plaintext emails, and double braces for html emails. See the [handlebars documentation](https://handlebarsjs.com/guide/expressions.html#html-escaping) for more information.

You can also delete the welcome email by removing the call to sendTemplatedEmail in src/routes/(admin)/account/api/+page.server.ts

## Adding Admin Emails

Anywhere you'd like to be notified of important events, you can sendan admin email.

Simply add a call to sendAdminEmail() in the appropriate place, passing a subject and body.

## Adding Additional User Emails

You can add more user emails. Create a template in src/lib/emails, using the welcome email as a guide. You should have both a plaintext and html version of the email (see welcome_email_text.hbs and welcome_email_html.hbs for examples), although it will work with just one.

When you want to send the email, call sendUserEmail() with the appropriate parameters, including the name of the email template.

You can also use sendTemplatedEmail() to send emails to any email address.
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="src/lib/mailer.test.ts">
import { vi, describe, it, expect, beforeEach } from "vitest"

vi.mock("@supabase/supabase-js")
vi.mock("$env/dynamic/private")
vi.mock("resend")

import { createClient, type User } from "@supabase/supabase-js"
import { Resend } from "resend"
import * as mailer from "./mailer"

describe("mailer", () => {
  const mockSend = vi.fn().mockResolvedValue({ id: "mock-email-id" })

  const mockSupabaseClient = {
    auth: {
      admin: {
        getUserById: vi.fn(),
      },
    },
    from: vi.fn().mockReturnThis(),
    select: vi.fn().mockReturnThis(),
    eq: vi.fn().mockReturnThis(),
    single: vi.fn(),
  }

  beforeEach(async () => {
    vi.clearAllMocks()
    const { env } = await import("$env/dynamic/private")
    env.PRIVATE_RESEND_API_KEY = "mock_resend_api_key"
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ;(createClient as any).mockReturnValue(mockSupabaseClient)

    vi.mocked(Resend).mockImplementation(
      () =>
        ({
          emails: {
            send: mockSend,
          },
        }) as unknown as Resend,
    )
  })

  describe("sendUserEmail", () => {
    const mockUser = { id: "user123", email: "user@example.com" }

    it("sends welcome email", async () => {
      mockSupabaseClient.auth.admin.getUserById.mockResolvedValue({
        data: { user: { email_confirmed_at: new Date().toISOString() } },
        error: null,
      })

      mockSupabaseClient.single.mockResolvedValue({
        data: { unsubscribed: false },
        error: null,
      })

      await mailer.sendUserEmail({
        user: mockUser as User,
        subject: "Test",
        from_email: "test@example.com",
        template_name: "welcome_email",
        template_properties: {
          companyName: "Test Company",
          WebsiteBaseUrl: "https://test.com",
        },
      })

      expect(mockSend).toHaveBeenCalled()
      const email = mockSend.mock.calls[0][0]
      expect(email.to).toEqual(["user@example.com"])
    })

    it("should not send email if user is unsubscribed", async () => {
      const originalConsoleLog = console.log
      console.log = vi.fn()

      mockSupabaseClient.auth.admin.getUserById.mockResolvedValue({
        data: { user: { email_confirmed_at: new Date().toISOString() } },
        error: null,
      })

      mockSupabaseClient.single.mockResolvedValue({
        data: { unsubscribed: true },
        error: null,
      })

      await mailer.sendUserEmail({
        user: mockUser as User,
        subject: "Test",
        from_email: "test@example.com",
        template_name: "welcome_email",
        template_properties: {},
      })

      expect(mockSend).not.toHaveBeenCalled()

      expect(console.log).toHaveBeenCalledWith(
        "User unsubscribed. Aborting email. ",
        mockUser.id,
        mockUser.email,
      )

      console.log = originalConsoleLog
    })
  })

  describe("sendTemplatedEmail", () => {
    it("sends templated email", async () => {
      await mailer.sendTemplatedEmail({
        subject: "Test subject",
        from_email: "from@example.com",
        to_emails: ["to@example.com"],
        template_name: "welcome_email",
        template_properties: {
          companyName: "Test Company",
          WebsiteBaseUrl: "https://test.com",
        },
      })

      expect(mockSend).toHaveBeenCalled()
      const email = mockSend.mock.calls[0][0]
      expect(email.from).toEqual("from@example.com")
      expect(email.to).toEqual(["to@example.com"])
      expect(email.subject).toEqual("Test subject")
      expect(email.text).toContain("This is a quick sample of a welcome email")
      expect(email.html).toContain("This is a quick sample of a welcome email")
      expect(email.html).toContain("<html")
      expect(email.html).toContain("https://test.com")
      expect(email.html).toContain("Test Company")
      expect(email.text).toContain("https://test.com")
      expect(email.text).toContain("Test Company")
    })
  })
})
</file>

<file path="src/lib/mailer.ts">
import { Resend } from "resend"
import { env } from "$env/dynamic/private"
import { PRIVATE_SUPABASE_SERVICE_ROLE } from "$env/static/private"
import { PUBLIC_SUPABASE_URL } from "$env/static/public"
import { createClient, type User } from "@supabase/supabase-js"
import type { Database } from "../DatabaseDefinitions"
import handlebars from "handlebars"

// Sends an email to the admin email address.
// Does not throw errors, but logs them.
export const sendAdminEmail = async ({
  subject,
  body,
}: {
  subject: string
  body: string
}) => {
  // Check admin email is setup
  if (!env.PRIVATE_ADMIN_EMAIL) {
    return
  }

  try {
    const resend = new Resend(env.PRIVATE_RESEND_API_KEY)
    const resp = await resend.emails.send({
      from: env.PRIVATE_FROM_ADMIN_EMAIL || env.PRIVATE_ADMIN_EMAIL,
      to: [env.PRIVATE_ADMIN_EMAIL],
      subject: "ADMIN_MAIL: " + subject,
      text: body,
    })

    if (resp.error) {
      console.log("Failed to send admin email, error:", resp.error)
    }
  } catch (e) {
    console.log("Failed to send admin email, error:", e)
  }
}

export const sendUserEmail = async ({
  user,
  subject,
  from_email,
  template_name,
  template_properties,
}: {
  user: User
  subject: string
  from_email: string
  template_name: string
  template_properties: Record<string, string>
}) => {
  const email = user.email
  if (!email) {
    console.log("No email for user. Aborting email. ", user.id)
    return
  }

  // Check if the user email is verified using the full user object from service role
  // Oauth uses email_verified, and email auth uses email_confirmed_at
  const serverSupabase = createClient<Database>(
    PUBLIC_SUPABASE_URL,
    PRIVATE_SUPABASE_SERVICE_ROLE,
    { auth: { persistSession: false } },
  )
  const { data: serviceUserData } = await serverSupabase.auth.admin.getUserById(
    user.id,
  )
  const emailVerified =
    serviceUserData.user?.email_confirmed_at ||
    serviceUserData.user?.user_metadata?.email_verified

  if (!emailVerified) {
    console.log("User email not verified. Aborting email. ", user.id, email)
    return
  }

  // Fetch user profile to check unsubscribed status
  const { data: profile, error: profileError } = await serverSupabase
    .from("profiles")
    .select("unsubscribed")
    .eq("id", user.id)
    .single()

  if (profileError) {
    console.log("Error fetching user profile. Aborting email. ", user.id, email)
    return
  }

  if (profile?.unsubscribed) {
    console.log("User unsubscribed. Aborting email. ", user.id, email)
    return
  }

  await sendTemplatedEmail({
    subject,
    to_emails: [email],
    from_email,
    template_name,
    template_properties,
  })
}

export const sendTemplatedEmail = async ({
  subject,
  to_emails,
  from_email,
  template_name,
  template_properties,
}: {
  subject: string
  to_emails: string[]
  from_email: string
  template_name: string
  template_properties: Record<string, string>
}) => {
  if (!env.PRIVATE_RESEND_API_KEY) {
    // email not configured.  Emails are optional so no error is thrown
    return
  }

  let plaintextBody: string | undefined = undefined
  try {
    const textTemplate = await import(
      `./emails/${template_name}_text.hbs?raw`
    ).then((mod) => mod.default)
    const template = handlebars.compile(textTemplate)
    plaintextBody = template(template_properties)
  } catch (e) {
    // ignore, plaintextBody is optional
    plaintextBody = undefined
  }

  let htmlBody: string | undefined = undefined
  try {
    const htmlTemplate = await import(
      `./emails/${template_name}_html.hbs?raw`
    ).then((mod) => mod.default)
    const template = handlebars.compile(htmlTemplate)
    htmlBody = template(template_properties)
  } catch (e) {
    // ignore, htmlBody is optional
    htmlBody = undefined
  }

  if (!plaintextBody && !htmlBody) {
    console.log(
      "No email body: requires plaintextBody or htmlBody. Template: ",
      template_name,
    )
    return
  }

  try {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const email: any = {
      from: from_email,
      to: to_emails,
      subject: subject,
    }
    if (plaintextBody) {
      email.text = plaintextBody
    }
    if (htmlBody) {
      email.html = htmlBody
    }
    const resend = new Resend(env.PRIVATE_RESEND_API_KEY)
    const resp = await resend.emails.send(email)

    if (resp.error) {
      console.log("Failed to send email, error:", resp.error)
    }
  } catch (e) {
    console.log("Failed to send email, error:", e)
  }
}
</file>

<file path="src/routes/(admin)/account/(menu)/+layout.svelte">
<script lang="ts">
  import "../../../../app.css"
  import { writable } from "svelte/store"
  import { setContext } from "svelte"
  import { WebsiteName } from "../../../../config"
  interface Props {
    children?: import("svelte").Snippet
  }

  let { children }: Props = $props()

  const adminSectionStore = writable("")
  setContext("adminSection", adminSectionStore)
  let adminSection: string | undefined = $state()
  adminSectionStore.subscribe((value) => {
    adminSection = value
  })

  function closeDrawer(): void {
    const adminDrawer = document.getElementById(
      "admin-drawer",
    ) as HTMLInputElement
    adminDrawer.checked = false
  }
</script>

<div class="drawer lg:drawer-open">
  <input id="admin-drawer" type="checkbox" class="drawer-toggle" />
  <div class="drawer-content">
    <div class="navbar bg-base-100 lg:hidden">
      <div class="flex-1">
        <a class="btn btn-ghost normal-case text-xl" href="/">{WebsiteName}</a>
      </div>
      <div class="flex-none">
        <div class="dropdown dropdown-end">
          <label for="admin-drawer" class="btn btn-ghost btn-circle">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              ><path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h7"
              /></svg
            >
          </label>
        </div>
      </div>
    </div>
    <div class="container px-6 lg:px-12 py-3 lg:py-6">
      {@render children?.()}
    </div>
  </div>

  <div class="drawer-side">
    <label for="admin-drawer" class="drawer-overlay"></label>
    <ul
      class="menu menu-lg p-4 w-80 min-h-full bg-base-100 lg:border-r text-primary"
    >
      <li>
        <div
          class="normal-case menu-title text-xl font-bold text-primary flex flex-row"
        >
          <a href="/" class="grow">{WebsiteName}</a>
          <label for="admin-drawer" class="lg:hidden ml-3"> &#x2715; </label>
        </div>
      </li>
      <li>
        <a
          href="/account"
          class={adminSection === "home" ? "active" : ""}
          onclick={closeDrawer}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
            /></svg
          >
          Home
        </a>
      </li>
      <li>
        <a
          href="/account/billing"
          class={adminSection === "billing" ? "active" : ""}
          onclick={closeDrawer}
        >
          <svg
            class="h-5 w-5"
            viewBox="0 0 24 24"
            stroke="none"
            fill="currentColor"
          >
            <path
              d="M18,1H6A3,3,0,0,0,3,4V22a1,1,0,0,0,1.8.6L6.829,19.9l1.276,2.552a1,1,0,0,0,.8.549.981.981,0,0,0,.89-.4L12,19.667,14.2,22.6a.983.983,0,0,0,.89.4,1,1,0,0,0,.8-.549L17.171,19.9,19.2,22.6a1,1,0,0,0,.8.4,1,1,0,0,0,1-1V4A3,3,0,0,0,18,1Zm1,18-1.2-1.6a.983.983,0,0,0-.89-.4,1,1,0,0,0-.8.549l-1.276,2.552L12.8,17.4a1,1,0,0,0-1.6,0L9.171,20.105,7.9,17.553A1,1,0,0,0,7.09,17a.987.987,0,0,0-.89.4L5,19V4A1,1,0,0,1,6,3H18a1,1,0,0,1,1,1ZM17,9a1,1,0,0,1-1,1H8A1,1,0,0,1,8,8h8A1,1,0,0,1,17,9Zm-4,4a1,1,0,0,1-1,1H8a1,1,0,0,1,0-2h4A1,1,0,0,1,13,13Z"
            />
          </svg>
          Billing
        </a>
      </li>
      <li>
        <a
          href="/account/settings"
          class={adminSection === "settings" ? "active" : ""}
          onclick={closeDrawer}
        >
          <svg class="h-5 w-5" viewBox="0 0 24 24" stroke="none" fill="none">
            <g id="Interface / Settings">
              <g id="Vector">
                <path
                  d="M20.3499 8.92293L19.9837 8.7192C19.9269 8.68756 19.8989 8.67169 19.8714 8.65524C19.5983 8.49165 19.3682 8.26564 19.2002 7.99523C19.1833 7.96802 19.1674 7.93949 19.1348 7.8831C19.1023 7.82677 19.0858 7.79823 19.0706 7.76998C18.92 7.48866 18.8385 7.17515 18.8336 6.85606C18.8331 6.82398 18.8332 6.79121 18.8343 6.72604L18.8415 6.30078C18.8529 5.62025 18.8587 5.27894 18.763 4.97262C18.6781 4.70053 18.536 4.44993 18.3462 4.23725C18.1317 3.99685 17.8347 3.82534 17.2402 3.48276L16.7464 3.1982C16.1536 2.85658 15.8571 2.68571 15.5423 2.62057C15.2639 2.56294 14.9765 2.56561 14.6991 2.62789C14.3859 2.69819 14.0931 2.87351 13.5079 3.22396L13.5045 3.22555L13.1507 3.43741C13.0948 3.47091 13.0665 3.48779 13.0384 3.50338C12.7601 3.6581 12.4495 3.74365 12.1312 3.75387C12.0992 3.7549 12.0665 3.7549 12.0013 3.7549C11.9365 3.7549 11.9024 3.7549 11.8704 3.75387C11.5515 3.74361 11.2402 3.65759 10.9615 3.50224C10.9334 3.48658 10.9056 3.46956 10.8496 3.4359L10.4935 3.22213C9.90422 2.86836 9.60915 2.69121 9.29427 2.62057C9.0157 2.55807 8.72737 2.55634 8.44791 2.61471C8.13236 2.68062 7.83577 2.85276 7.24258 3.19703L7.23994 3.1982L6.75228 3.48124L6.74688 3.48454C6.15904 3.82572 5.86441 3.99672 5.6517 4.23614C5.46294 4.4486 5.32185 4.69881 5.2374 4.97018C5.14194 5.27691 5.14703 5.61896 5.15853 6.3027L5.16568 6.72736C5.16676 6.79166 5.16864 6.82362 5.16817 6.85525C5.16343 7.17499 5.08086 7.48914 4.92974 7.77096C4.9148 7.79883 4.8987 7.8267 4.86654 7.88237C4.83436 7.93809 4.81877 7.96579 4.80209 7.99268C4.63336 8.26452 4.40214 8.49186 4.12733 8.65572C4.10015 8.67193 4.0715 8.68752 4.01521 8.71871L3.65365 8.91908C3.05208 9.25245 2.75137 9.41928 2.53256 9.65669C2.33898 9.86672 2.19275 10.1158 2.10349 10.3872C2.00259 10.6939 2.00267 11.0378 2.00424 11.7255L2.00551 12.2877C2.00706 12.9708 2.00919 13.3122 2.11032 13.6168C2.19979 13.8863 2.34495 14.134 2.53744 14.3427C2.75502 14.5787 3.05274 14.7445 3.64974 15.0766L4.00808 15.276C4.06907 15.3099 4.09976 15.3266 4.12917 15.3444C4.40148 15.5083 4.63089 15.735 4.79818 16.0053C4.81625 16.0345 4.8336 16.0648 4.8683 16.1255C4.90256 16.1853 4.92009 16.2152 4.93594 16.2452C5.08261 16.5229 5.16114 16.8315 5.16649 17.1455C5.16707 17.1794 5.16658 17.2137 5.16541 17.2827L5.15853 17.6902C5.14695 18.3763 5.1419 18.7197 5.23792 19.0273C5.32287 19.2994 5.46484 19.55 5.65463 19.7627C5.86915 20.0031 6.16655 20.1745 6.76107 20.5171L7.25478 20.8015C7.84763 21.1432 8.14395 21.3138 8.45869 21.379C8.73714 21.4366 9.02464 21.4344 9.30209 21.3721C9.61567 21.3017 9.90948 21.1258 10.4964 20.7743L10.8502 20.5625C10.9062 20.5289 10.9346 20.5121 10.9626 20.4965C11.2409 20.3418 11.5512 20.2558 11.8695 20.2456C11.9015 20.2446 11.9342 20.2446 11.9994 20.2446C12.0648 20.2446 12.0974 20.2446 12.1295 20.2456C12.4484 20.2559 12.7607 20.3422 13.0394 20.4975C13.0639 20.5112 13.0885 20.526 13.1316 20.5519L13.5078 20.7777C14.0971 21.1315 14.3916 21.3081 14.7065 21.3788C14.985 21.4413 15.2736 21.4438 15.5531 21.3855C15.8685 21.3196 16.1657 21.1471 16.7586 20.803L17.2536 20.5157C17.8418 20.1743 18.1367 20.0031 18.3495 19.7636C18.5383 19.5512 18.6796 19.3011 18.764 19.0297C18.8588 18.7252 18.8531 18.3858 18.8417 17.7119L18.8343 17.2724C18.8332 17.2081 18.8331 17.1761 18.8336 17.1445C18.8383 16.8247 18.9195 16.5104 19.0706 16.2286C19.0856 16.2007 19.1018 16.1726 19.1338 16.1171C19.166 16.0615 19.1827 16.0337 19.1994 16.0068C19.3681 15.7349 19.5995 15.5074 19.8744 15.3435C19.9012 15.3275 19.9289 15.3122 19.9838 15.2818L19.9857 15.2809L20.3472 15.0805C20.9488 14.7472 21.2501 14.5801 21.4689 14.3427C21.6625 14.1327 21.8085 13.8839 21.8978 13.6126C21.9981 13.3077 21.9973 12.9658 21.9958 12.2861L21.9945 11.7119C21.9929 11.0287 21.9921 10.6874 21.891 10.3828C21.8015 10.1133 21.6555 9.86561 21.463 9.65685C21.2457 9.42111 20.9475 9.25526 20.3517 8.92378L20.3499 8.92293Z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M8.00033 12C8.00033 14.2091 9.79119 16 12.0003 16C14.2095 16 16.0003 14.2091 16.0003 12C16.0003 9.79082 14.2095 7.99996 12.0003 7.99996C9.79119 7.99996 8.00033 9.79082 8.00033 12Z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </g>
            </g>
          </svg>
          Settings
        </a>
      </li>

      <li class="mt-auto">
        <a href="/account/sign_out" class="mt-auto text-base">Sign Out</a>
      </li>
    </ul>
  </div>
</div>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/settings_module.svelte">
<script lang="ts">
  import { enhance, applyAction } from "$app/forms"
  import { page } from "$app/stores"
  import type { SubmitFunction } from "@sveltejs/kit"

  const fieldError = (liveForm: FormAccountUpdateResult, name: string) => {
    let errors = liveForm?.errorFields ?? []
    return errors.includes(name)
  }

  // Page state
  let loading = $state(false)
  let showSuccess = $state(false)

  type Field = {
    inputType?: string // default is "text"
    id: string
    label?: string
    initialValue: string | boolean
    placeholder?: string
    maxlength?: number
  }

  interface Props {
    // Module context
    editable?: boolean
    dangerous?: boolean
    title?: string
    message?: string
    fields: Field[]
    formTarget?: string
    successTitle?: string
    successBody?: string
    editButtonTitle?: string | null
    editLink?: string | null
    saveButtonTitle?: string
  }

  let {
    editable = false,
    dangerous = false,
    title = "",
    message = "",
    fields,
    formTarget = "",
    successTitle = "Success",
    successBody = "",
    editButtonTitle = null,
    editLink = null,
    saveButtonTitle = "Save",
  }: Props = $props()

  const handleSubmit: SubmitFunction = () => {
    loading = true
    return async ({ update, result }) => {
      await update({ reset: false })
      await applyAction(result)
      loading = false
      if (result.type === "success") {
        showSuccess = true
      }
    }
  }
</script>

<div class="card p-6 pb-7 mt-8 max-w-xl flex flex-col md:flex-row shadow-sm">
  {#if title}
    <div class="text-xl font-bold mb-3 w-48 md:pr-8 flex-none">{title}</div>
  {/if}

  <div class="w-full min-w-48">
    {#if !showSuccess}
      {#if message}
        <div class="mb-6 {dangerous ? 'alert alert-warning' : ''}">
          {#if dangerous}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="stroke-current shrink-0 h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              ><path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
              /></svg
            >
          {/if}

          <span>{message}</span>
        </div>
      {/if}
      <form
        class="form-widget flex flex-col"
        method="POST"
        action={formTarget}
        use:enhance={handleSubmit}
      >
        {#each fields as field}
          {#if field.label}
            <label for={field.id}>
              <span class="text-sm text-gray-500">{field.label}</span>
            </label>
          {/if}
          {#if editable}
            <input
              id={field.id}
              name={field.id}
              type={field.inputType ?? "text"}
              disabled={!editable}
              placeholder={field.placeholder ?? field.label ?? ""}
              class="{fieldError($page?.form, field.id)
                ? 'input-error'
                : ''} input-sm mt-1 input input-bordered w-full max-w-xs mb-3 text-base py-4"
              value={$page.form ? $page.form[field.id] : field.initialValue}
              maxlength={field.maxlength ? field.maxlength : null}
            />
          {:else}
            <div class="text-lg mb-3">{field.initialValue}</div>
          {/if}
        {/each}

        {#if $page?.form?.errorMessage}
          <p class="text-red-700 text-sm font-bold mt-1">
            {$page?.form?.errorMessage}
          </p>
        {/if}

        {#if editable}
          <div>
            <button
              type="submit"
              class="ml-auto btn btn-sm mt-3 min-w-[145px] {dangerous
                ? 'btn-error'
                : 'btn-primary btn-outline'}"
              disabled={loading}
            >
              {#if loading}
                <span
                  class="loading loading-spinner loading-md align-middle mx-3"
                ></span>
              {:else}
                {saveButtonTitle}
              {/if}
            </button>
          </div>
        {:else if editButtonTitle && editLink}
          <!-- !editable -->
          <a href={editLink} class="mt-1">
            <button
              class="btn btn-outline btn-sm {dangerous
                ? 'btn-error'
                : ''} min-w-[145px]"
            >
              {editButtonTitle}
            </button>
          </a>
        {/if}
      </form>
    {:else}
      <!-- showSuccess -->
      <div>
        <div class="text-l font-bold">{successTitle}</div>
        <div class="text-base">{successBody}</div>
      </div>
      <a href="/account/settings">
        <button class="btn btn-outline btn-sm mt-3 min-w-[145px]">
          Return to Settings
        </button>
      </a>
    {/if}
  </div>
</div>
</file>

<file path="src/routes/(admin)/account/api/+page.server.ts">
import { fail, redirect } from "@sveltejs/kit"
import { sendAdminEmail, sendUserEmail } from "$lib/mailer"
import { WebsiteBaseUrl } from "../../../../config"

export const actions = {
  toggleEmailSubscription: async ({ locals: { supabase, safeGetSession } }) => {
    const { session } = await safeGetSession()

    if (!session) {
      redirect(303, "/login")
    }

    const { data: currentProfile } = await supabase
      .from("profiles")
      .select("unsubscribed")
      .eq("id", session.user.id)
      .single()

    const newUnsubscribedStatus = !currentProfile?.unsubscribed

    const { error } = await supabase
      .from("profiles")
      .update({ unsubscribed: newUnsubscribedStatus })
      .eq("id", session.user.id)

    if (error) {
      console.error("Error updating subscription status", error)
      return fail(500, { message: "Failed to update subscription status" })
    }

    return {
      unsubscribed: newUnsubscribedStatus,
    }
  },
  updateEmail: async ({ request, locals: { supabase, safeGetSession } }) => {
    const { session } = await safeGetSession()
    if (!session) {
      redirect(303, "/login")
    }

    const formData = await request.formData()
    const email = formData.get("email") as string

    let validationError
    if (!email || email === "") {
      validationError = "An email address is required"
    }
    // Dead simple check -- there's no standard here (which is followed),
    // and lots of errors will be missed until we actually email to verify, so
    // just do that
    else if (!email.includes("@")) {
      validationError = "A valid email address is required"
    }
    if (validationError) {
      return fail(400, {
        errorMessage: validationError,
        errorFields: ["email"],
        email,
      })
    }

    // Supabase does not change the email until the user verifies both
    // if 'Secure email change' is enabled in the Supabase dashboard
    const { error } = await supabase.auth.updateUser({ email: email })

    if (error) {
      console.error("Error updating email", error)
      return fail(500, {
        errorMessage: "Unknown error. If this persists please contact us.",
        email,
      })
    }

    return {
      email,
    }
  },
  updatePassword: async ({ request, locals: { supabase, safeGetSession } }) => {
    const { session, user, amr } = await safeGetSession()
    if (!session) {
      redirect(303, "/login")
    }

    const formData = await request.formData()
    const newPassword1 = formData.get("newPassword1") as string
    const newPassword2 = formData.get("newPassword2") as string
    const currentPassword = formData.get("currentPassword") as string

    // Can check if we're a "password recovery" session by checking session amr
    // let currentPassword take priority if provided (user can use either form)
    const recoveryAmr = amr?.find((x) => x.method === "recovery")
    const isRecoverySession = recoveryAmr && !currentPassword

    // if this is password recovery session, check timestamp of recovery session
    if (isRecoverySession) {
      const timeSinceLogin = Date.now() - recoveryAmr.timestamp * 1000
      if (timeSinceLogin > 1000 * 60 * 15) {
        // 15 mins in milliseconds
        return fail(400, {
          errorMessage:
            'Recovery code expired. Please log out, then use "Forgot Password" on the sign in page to reset your password. Codes are valid for 15 minutes.',
          errorFields: [],
          newPassword1,
          newPassword2,
          currentPassword: "",
        })
      }
    }

    let validationError
    const errorFields = []
    if (!newPassword1) {
      validationError = "You must type a new password"
      errorFields.push("newPassword1")
    }
    if (!newPassword2) {
      validationError = "You must type the new password twice"
      errorFields.push("newPassword2")
    }
    if (newPassword1.length < 6) {
      validationError = "The new password must be at least 6 charaters long"
      errorFields.push("newPassword1")
    }
    if (newPassword1.length > 72) {
      validationError = "The new password can be at most 72 charaters long"
      errorFields.push("newPassword1")
    }
    if (newPassword1 != newPassword2) {
      validationError = "The passwords don't match"
      errorFields.push("newPassword1")
      errorFields.push("newPassword2")
    }
    if (!currentPassword && !isRecoverySession) {
      validationError =
        "You must include your current password. If you forgot it, sign out then use 'forgot password' on the sign in page."
      errorFields.push("currentPassword")
    }
    if (validationError) {
      return fail(400, {
        errorMessage: validationError,
        errorFields: [...new Set(errorFields)], // unique values
        newPassword1,
        newPassword2,
        currentPassword,
      })
    }

    // Check current password is correct before updating, but only if they didn't log in with "recover" link
    // Note: to make this truly enforced you need to contact supabase. See: https://www.reddit.com/r/Supabase/comments/12iw7o1/updating_password_in_supabase_seems_insecure/
    // However, having the UI accessible route still verify password is still helpful, and needed once you get the setting above enabled
    if (!isRecoverySession) {
      const { error } = await supabase.auth.signInWithPassword({
        email: user?.email || "",
        password: currentPassword,
      })
      if (error) {
        // The user was logged out because of bad password. Redirect to error page explaining.
        redirect(303, "/login/current_password_error")
      }
    }

    const { error } = await supabase.auth.updateUser({
      password: newPassword1,
    })
    if (error) {
      console.error("Error updating password", error)
      return fail(500, {
        errorMessage: "Unknown error. If this persists please contact us.",
        newPassword1,
        newPassword2,
        currentPassword,
      })
    }

    return {
      newPassword1,
      newPassword2,
      currentPassword,
    }
  },
  deleteAccount: async ({
    request,
    locals: { supabase, supabaseServiceRole, safeGetSession },
  }) => {
    const { session, user } = await safeGetSession()
    if (!session || !user?.id) {
      redirect(303, "/login")
    }

    const formData = await request.formData()
    const currentPassword = formData.get("currentPassword") as string

    if (!currentPassword) {
      return fail(400, {
        errorMessage:
          "You must provide your current password to delete your account. If you forgot it, sign out then use 'forgot password' on the sign in page.",
        errorFields: ["currentPassword"],
        currentPassword,
      })
    }

    // Check current password is correct before deleting account
    const { error: pwError } = await supabase.auth.signInWithPassword({
      email: user?.email || "",
      password: currentPassword,
    })
    if (pwError) {
      // The user was logged out because of bad password. Redirect to error page explaining.
      redirect(303, "/login/current_password_error")
    }

    const { error } = await supabaseServiceRole.auth.admin.deleteUser(
      user.id,
      true,
    )
    if (error) {
      console.error("Error deleting user", error)
      return fail(500, {
        errorMessage: "Unknown error. If this persists please contact us.",
        currentPassword,
      })
    }

    await supabase.auth.signOut()
    redirect(303, "/")
  },
  updateProfile: async ({ request, locals: { supabase, safeGetSession } }) => {
    const { session, user } = await safeGetSession()
    if (!session || !user?.id) {
      redirect(303, "/login")
    }

    const formData = await request.formData()
    const fullName = formData.get("fullName") as string
    const companyName = formData.get("companyName") as string
    const website = formData.get("website") as string

    let validationError
    const fieldMaxTextLength = 50
    const errorFields = []
    if (!fullName) {
      validationError = "Name is required"
      errorFields.push("fullName")
    } else if (fullName.length > fieldMaxTextLength) {
      validationError = `Name must be less than ${fieldMaxTextLength} characters`
      errorFields.push("fullName")
    }
    if (!companyName) {
      validationError =
        "Company name is required. If this is a hobby project or personal app, please put your name."
      errorFields.push("companyName")
    } else if (companyName.length > fieldMaxTextLength) {
      validationError = `Company name must be less than ${fieldMaxTextLength} characters`
      errorFields.push("companyName")
    }
    if (!website) {
      validationError =
        "Company website is required. An app store URL is a good alternative if you don't have a website."
      errorFields.push("website")
    } else if (website.length > fieldMaxTextLength) {
      validationError = `Company website must be less than ${fieldMaxTextLength} characters`
      errorFields.push("website")
    }
    if (validationError) {
      return fail(400, {
        errorMessage: validationError,
        errorFields,
        fullName,
        companyName,
        website,
      })
    }

    // To check if created or updated, check if priorProfile exists
    const { data: priorProfile, error: priorProfileError } = await supabase
      .from("profiles")
      .select(`*`)
      .eq("id", session?.user.id)
      .single()

    const { error } = await supabase
      .from("profiles")
      .upsert({
        id: user.id,
        full_name: fullName,
        company_name: companyName,
        website: website,
        updated_at: new Date(),
        unsubscribed: priorProfile?.unsubscribed ?? false,
      })
      .select()

    if (error) {
      console.error("Error updating profile", error)
      return fail(500, {
        errorMessage: "Unknown error. If this persists please contact us.",
        fullName,
        companyName,
        website,
      })
    }

    // If the profile was just created, send an email to the user and admin
    const newProfile =
      priorProfile?.updated_at === null && priorProfileError === null
    if (newProfile) {
      await sendAdminEmail({
        subject: "Profile Created",
        body: `Profile created by ${session.user.email}\nFull name: ${fullName}\nCompany name: ${companyName}\nWebsite: ${website}`,
      })

      // Send welcome email
      await sendUserEmail({
        user: session.user,
        subject: "Welcome!",
        from_email: "no-reply@saasstarter.work",
        template_name: "welcome_email",
        template_properties: {
          companyName: "SaaS Starter",
          WebsiteBaseUrl: WebsiteBaseUrl,
        },
      })
    }

    return {
      fullName,
      companyName,
      website,
    }
  },
  signout: async ({ locals: { supabase, safeGetSession } }) => {
    const { session } = await safeGetSession()
    if (session) {
      await supabase.auth.signOut()
      redirect(303, "/")
    } else {
      redirect(303, "/")
    }
  },
}
</file>

<file path="src/routes/(marketing)/login/+layout.ts">
import {
  PUBLIC_SUPABASE_ANON_KEY,
  PUBLIC_SUPABASE_URL,
} from "$env/static/public"
import {
  createBrowserClient,
  createServerClient,
  isBrowser,
} from "@supabase/ssr"
import { redirect } from "@sveltejs/kit"
import { load_helper } from "$lib/load_helpers.js"

export const load = async ({ fetch, data, depends }) => {
  depends("supabase:auth")

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies
          },
        },
      })

  // Redirect if already logged in
  const { session, user } = await load_helper(data.session, supabase)
  if (session && user) {
    redirect(303, "/account")
  }

  const url = data.url

  return { supabase, url }
}
</file>

<file path="src/routes/(marketing)/login/sign_up/+page.svelte">
<script lang="ts">
  import { Auth } from "@supabase/auth-ui-svelte"
  import { sharedAppearance, oauthProviders } from "../login_config"

  let { data } = $props()
</script>

<svelte:head>
  <title>Sign up</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Sign Up</h1>
<Auth
  supabaseClient={data.supabase}
  view="sign_up"
  redirectTo={`${data.url}/auth/callback`}
  showLinks={false}
  providers={oauthProviders}
  socialLayout="horizontal"
  appearance={sharedAppearance}
  additionalData={undefined}
/>
<div class="text-l mt-4 mb-2">
  Have an account? <a class="link" href="/login/sign_in">Sign in</a>.
</div>
</file>

<file path="tailwind.config.ts">
import typography from '@tailwindcss/typography';
import daisyui from 'daisyui';

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{html,js,svelte,ts}'],
  theme: {
    extend: {
      backgroundImage: {
        'synth-grid': "url('/images/synthwave_grid.png')",
      }
    },
  },
  plugins: [typography, daisyui],
  daisyui: {
    themes: [
      {
        saasstartertheme: {
          "color-scheme": "dark", // Identifies this as a dark theme for browser UI

          "primary": "#903a9d",          // Main Brand Purple (from GUI labels/borders)
          "primary-content": "#ffffff",   // White text on primary elements

          "secondary": "#FF0080",       // Hot Pink (from GUI button gradient)
          "secondary-content": "#ffffff",

          "accent": "#00FFFF",          // Bright Cyan (from GUI button gradient)
          "accent-content": "#010516",  // Dark text for high contrast on bright cyan

          "neutral": "#1a1a2e",         // Dark Blue/Gray (from GUI table background)
          "neutral-content": "#A6ADBB",

          "base-100": "#010516",        // The main page background (GUI's darkest color)
          "base-200": "#190025",        // A slightly lighter dark purple (from tab panes)
          "base-300": "#2a2832",        // Dark gray/purple (for inactive elements)
          "base-content": "#A6ADBB",    // The primary text color for the site (light gray)

          "info": "#66E6FF",            // Light neon cyan
          "info-content": "#00323D",

          "success": "#39FF14",         // Neon green for success states
          "success-content": "#00330C",

          "warning": "#FBBD23",         // A standard bright yellow for warnings
          "warning-content": "#382800",

          "error": "#E94560",           // The pink/red used for errors in the GUI
          "error-content": "#ffffff",

          "--rounded-btn": "1rem",
          "--rounded-box": "0.5rem",
        },
      },
    ],
  },
};
</file>

<file path="src/hooks.server.ts">
// src/hooks.server.ts
import { PRIVATE_SUPABASE_SERVICE_ROLE } from "$env/static/private"
import {
  PUBLIC_SUPABASE_ANON_KEY,
  PUBLIC_SUPABASE_URL,
} from "$env/static/public"
import { createServerClient } from "@supabase/ssr"
import { createClient } from "@supabase/supabase-js"
import type { Handle } from "@sveltejs/kit"
import { sequence } from "@sveltejs/kit/hooks"

export const supabase: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createServerClient(
    PUBLIC_SUPABASE_URL,
    PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll: () => event.cookies.getAll(),
        /**
         * SvelteKit's cookies API requires `path` to be explicitly set in
         * the cookie options. Setting `path` to `/` replicates previous/
         * standard behavior.
         */
        setAll: (cookiesToSet) => {
          cookiesToSet.forEach(({ name, value, options }) => {
            event.cookies.set(name, value, { ...options, path: "/" })
          })
        },
      },
    },
  )

  event.locals.supabaseServiceRole = createClient(
    PUBLIC_SUPABASE_URL,
    PRIVATE_SUPABASE_SERVICE_ROLE,
    { auth: { persistSession: false } },
  )

  /**
   * Unlike `supabase.auth.getSession()`, which returns the session _without_
   * validating the JWT, this function also calls `getUser()` to validate the
   * JWT before returning the session.
   */
  event.locals.safeGetSession = async () => {
    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    if (!session) {
      return { session: null, user: null, amr: null }
    }

    const {
      data: { user },
      error: userError,
    } = await event.locals.supabase.auth.getUser()
    if (userError) {
      // JWT validation has failed
      return { session: null, user: null, amr: null }
    }

    const { data: aal, error: amrError } =
      await event.locals.supabase.auth.mfa.getAuthenticatorAssuranceLevel()
    if (amrError) {
      return { session, user, amr: null }
    }

    return { session, user, amr: aal.currentAuthenticationMethods }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === "content-range" || name === "x-supabase-api-version"
    },
  })
}

// Not called for prerendered marketing pages so generally okay to call on ever server request
// Next-page CSR will mean relatively minimal calls to this hook
const authGuard: Handle = async ({ event, resolve }) => {
  const { session, user } = await event.locals.safeGetSession()
  event.locals.session = session
  event.locals.user = user

  return resolve(event)
}

export const handle: Handle = sequence(supabase, authGuard)
</file>

<file path="src/lib/build_index.ts">
import { allProducts } from "$lib/data/products";
import Fuse from "fuse.js";

// Manually define other pages to be included in the search
const otherPages = [
    {
        title: "Home",
        description: "The open source, fast, and free to host SaaS template.",
        path: "/"
    },
    {
        title: "Documentation",
        description: "Setup guides, READMEs, and technical documentation for Signal Lynx products.",
        path: "/docs"
    },
    {
        title: "Contact Us",
        description: "Get in touch with us for demos, quotes, or questions.",
        path: "/contact_us"
    }
];

export async function buildSearchIndex() {
  const indexData = [
    ...allProducts.map(product => ({
      title: product.title,
      description: product.tagline,
      body: product.features.join(' '), // Combine features for better searchability
      path: product.id === 'license-hub' ? '/license-hub' : '/trading-automation'
    })),
    ...otherPages.map(page => ({
      title: page.title,
      description: page.description,
      body: '',
      path: page.path
    }))
  ];

  const index = Fuse.createIndex(["title", "description", "body"], indexData);
  const jsonIndex = index.toJSON();
  const data = { index: jsonIndex, indexData, buildTime: Date.now() };
  return data;
}
</file>

<file path="src/routes/(admin)/account/(menu)/billing/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings/settings_module.svelte"
  import PricingModule from "$lib/components/pricing_module.svelte"
  import { allProducts, defaultPlanId } from "$lib/data/products"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("billing")

  let { data } = $props()

  let currentPlanId = data.currentPlanId ?? defaultPlanId
  let currentPlanName = allProducts.find(
    (x) => x.id === data.currentPlanId,
  )?.title
</script>

<svelte:head>
  <title>Billing</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-2">
  {data.isActiveCustomer ? "Billing" : "Select a Plan"}
</h1>
<div>
  View our <a href="/trading-automation" target="_blank" class="link">product pages</a> for details.
</div>

{#if !data.isActiveCustomer}
  <div class="mt-8">
    <PricingModule {currentPlanId} callToAction="Select Plan" center={false} />
  </div>

  {#if data.hasEverHadSubscription}
    <div class="mt-10">
      <a href="/account/billing/manage" class="link">View past invoices</a>
    </div>
  {/if}
{:else}
  <SettingsModule
    title="Subscription"
    editable={false}
    fields={[
      {
        id: "plan",
        label: "Current Plan",
        initialValue: currentPlanName || "",
      },
    ]}
    editButtonTitle="Manage Subscription"
    editLink="/account/billing/manage"
  />
{/if}
</file>

<file path="src/routes/(admin)/account/(menu)/settings/change_password/+page.svelte">
<script lang="ts">
  import { page } from "$app/stores"
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()
  let { user, supabase } = data

  // True if definitely has a password, but can be false if they
  // logged in with oAuth or email link

  // @ts-expect-error: we ignore because Supabase does not maintain an AMR typedef
  let hasPassword = user?.amr?.find((x) => x.method === "password")
    ? true
    : false

  // @ts-expect-error: we ignore because Supabase does not maintain an AMR typedef
  let usingOAuth = user?.amr?.find((x) => x.method === "oauth") ? true : false

  let sendBtnDisabled = $state(false)
  let sendBtnText = $state("Send Set Password Email")
  let sentEmail = $state(false)
  let sendForgotPassword = () => {
    sendBtnDisabled = true
    sendBtnText = "Sending..."

    let email = user?.email
    if (email) {
      supabase.auth
        .resetPasswordForEmail(email, {
          redirectTo: `${$page.url.origin}/auth/callback?next=%2Faccount%2Fsettings%2Freset_password`,
        })
        .then((d) => {
          sentEmail = d.error ? false : true
          sendBtnDisabled = false
          sendBtnText = "Send Forgot Password Email"
        })
    }
  }
</script>

<svelte:head>
  <title>Change Password</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Change Password</h1>

{#if hasPassword}
  <SettingsModule
    title="Change Password"
    editable={true}
    saveButtonTitle="Change Password"
    successTitle="Password Changed"
    successBody="On next sign in, use your new password."
    formTarget="/account/api?/updatePassword"
    fields={[
      {
        id: "newPassword1",
        label: "New Password",
        initialValue: "",
        inputType: "password",
      },
      {
        id: "newPassword2",
        label: "Confirm New Password",
        initialValue: "",
        inputType: "password",
      },
      {
        id: "currentPassword",
        label: "Current Password",
        initialValue: "",
        inputType: "password",
      },
    ]}
  />
{:else}
  <div
    class="card p-6 pb-7 mt-8 max-w-xl flex flex-col md:flex-row shadow-sm max-w-md"
  >
    <div class="flex flex-col gap-y-4">
      {#if usingOAuth}
        <div class="font-bold">Set Password By Email</div>
        <div>
          You use oAuth to sign in ("Sign in with Github" or similar). You can
          continue to access your account using only oAuth if you like!
        </div>
      {:else}
        <div class="font-bold">Change Password By Email</div>
      {/if}
      <div>
        The button below will send you an email at {user?.email} which will allow
        you to set your password.
      </div>
      <button
        class="btn btn-outline btn-wide {sentEmail ? 'hidden' : ''}"
        disabled={sendBtnDisabled}
        onclick={sendForgotPassword}
      >
        {sendBtnText}
      </button>
      <div class="success alert alert-success {sentEmail ? '' : 'hidden'}">
        Sent email! Please check your inbox and use the link to set your
        password.
      </div>
    </div>
  </div>
{/if}
</file>

<file path="src/routes/(marketing)/contact_us/+page.svelte">
<script lang="ts">
  import { enhance, applyAction } from "$app/forms"
  import type { SubmitFunction } from "@sveltejs/kit"
  import type { FullAutoFill } from "svelte/elements"

  let errors: { [fieldName: string]: string } = $state({})
  let loading = $state(false)
  let showSuccess = $state(false)

  interface FormField {
    id: string
    label: string
    inputType: string
    autocomplete: FullAutoFill
  }

  const formFields: FormField[] = [
    {
      id: "first_name",
      label: "First Name *",
      inputType: "text",
      autocomplete: "given-name",
    },
    {
      id: "last_name",
      label: "Last Name *",
      inputType: "text",
      autocomplete: "family-name",
    },
    {
      id: "email",
      label: "Email *",
      inputType: "email",
      autocomplete: "email",
    },
    {
      id: "phone",
      label: "Phone Number",
      inputType: "tel",
      autocomplete: "tel",
    },
    {
      id: "company",
      label: "Company Name",
      inputType: "text",
      autocomplete: "organization",
    },
    {
      id: "message",
      label: "Message",
      inputType: "textarea",
      autocomplete: "off",
    },
  ]

  const handleSubmit: SubmitFunction = () => {
    loading = true
    errors = {}
    return async ({ update, result }) => {
      await update({ reset: false })
      await applyAction(result)
      loading = false
      if (result.type === "success") {
        showSuccess = true
      } else if (result.type === "failure") {
        errors = result.data?.errors ?? {}
      } else if (result.type === "error") {
        errors = { _: "An error occurred. Please check inputs and try again." }
      }
    }
  }
</script>

<div
  class="flex flex-col lg:flex-row mx-auto my-4 min-h-[70vh] place-items-center lg:place-items-start place-content-center"
>
  <div
    class="max-w-[400px] lg:max-w-[500px] flex flex-col place-content-center p-4 lg:mr-8 lg:mb-8 lg:min-h-[70vh]"
  >
    <div class="px-6 text-base-content">
      <h1 class="text-2xl lg:text-4xl font-bold mb-4 text-primary">Contact Us</h1>
      <p class="text-lg">Talk to one of our service professionals to:</p>
      <ul class="list-disc list-outside pl-6 py-4 space-y-1">
        <li class="">Get a live demo</li>
        <li class="">Discuss your specific needs</li>
        <li>Get a quote</li>
        <li>Answer any technical questions you have</li>
      </ul>
      <p>Once you complete the form, we'll reach out to you! *</p>
      <p class="text-sm pt-8">
        *Not really for this demo page, but you should say something like that
        😉
      </p>
    </div>
  </div>

  <div
    class="flex flex-col grow m-4 lg:ml-10 min-w-[300px] stdphone:min-w-[360px] max-w-[400px] place-content-center lg:min-h-[70vh]"
  >
    {#if showSuccess}
      <div class="flex flex-col place-content-center lg:min-h-[70vh]">
        <div
          class="card card-bordered shadow-lg py-6 px-6 mx-2 lg:mx-0 lg:p-6 mb-10"
        >
          <div class="text-2xl font-bold mb-4">Thank you!</div>
          <p class="">We've received your message and will be in touch soon.</p>
        </div>
      </div>
    {:else}
      <div class="card card-bordered shadow-lg p-4 pt-6 mx-2 lg:mx-0 lg:p-6">
        <form
          class="form-widget flex flex-col"
          method="POST"
          action="?/submitContactUs"
          use:enhance={handleSubmit}
        >
          {#each formFields as field}
            <label for={field.id}>
              <div class="flex flex-row">
                <div class="text-base font-bold">{field.label}</div>
                {#if errors[field.id]}
                  <div class="text-red-600 grow text-sm ml-2 text-right">
                    {errors[field.id]}
                  </div>
                {/if}
              </div>
              {#if field.inputType === "textarea"}
                <textarea
                  id={field.id}
                  name={field.id}
                  autocomplete={field.autocomplete}
                  rows={4}
                  class="{errors[field.id]
                    ? 'input-error'
                    : ''} h-24 input-sm mt-1 input input-bordered w-full mb-3 text-base py-4"
                ></textarea>
              {:else}
                <input
                  id={field.id}
                  name={field.id}
                  type={field.inputType}
                  autocomplete={field.autocomplete}
                  class="{errors[field.id]
                    ? 'input-error'
                    : ''} input-sm mt-1 input input-bordered w-full mb-3 text-base py-4"
                />
              {/if}
            </label>
          {/each}

          {#if Object.keys(errors).length > 0}
            <p class="text-red-600 text-sm mb-2">
              Please resolve above issues.
            </p>
          {/if}

          <button class="btn btn-primary {loading ? 'btn-disabled' : ''}"
            >{loading ? "Submitting" : "Submit"}</button
          >
        </form>
      </div>
    {/if}
  </div>
</div>
</file>

<file path="src/routes/(marketing)/login/sign_in/+page.svelte">
<script lang="ts">
  import { Auth } from "@supabase/auth-ui-svelte"
  import { sharedAppearance, oauthProviders } from "../login_config"
  import { goto } from "$app/navigation"
  import { onMount } from "svelte"
  import { page } from "$app/stores"

  let { data } = $props()
  let { supabase } = data

  onMount(() => {
    supabase.auth.onAuthStateChange((event) => {
      // Redirect to account after successful login
      if (event == "SIGNED_IN") {
        // Delay needed because order of callback not guaranteed.
        // Give the layout callback priority to update state or
        // we'll just bounch back to login when /account tries to load
        setTimeout(() => {
          goto("/account")
        }, 1)
      }
    })
  })
</script>

<svelte:head>
  <title>Sign in</title>
</svelte:head>

{#if $page.url.searchParams.get("verified") == "true"}
  <div role="alert" class="alert alert-success mb-5">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="stroke-current shrink-0 h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      ><path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
      /></svg
    >
    <span>Email verified! Please sign in.</span>
  </div>
{/if}
<h1 class="text-2xl font-bold mb-6">Sign In</h1>
<Auth
  supabaseClient={data.supabase}
  view="sign_in"
  redirectTo={`${data.url}/auth/callback`}
  providers={oauthProviders}
  socialLayout="horizontal"
  showLinks={false}
  appearance={sharedAppearance}
  additionalData={undefined}
/>
<div class="text-l mt-4">
  <a class="link" href="/login/forgot_password">Forgot password?</a>
</div>
<div class="text-l mt-3">
  Don't have an account? <a class="link" href="/login/sign_up">Sign up</a>.
</div>
</file>

<file path="tsconfig.json">
{
  "extends": "./.svelte-kit/tsconfig.json",
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "types": ["vitest/globals"] // allows to skip import of test functions like `describe`, `it`, `expect`, etc.
  }
  // Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias and https://kit.svelte.dev/docs/configuration#files
  //
  // If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
  // from the referenced tsconfig.json - TypeScript does not merge them in
}
</file>

<file path="src/app.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom theme variables that are not part of DaisyUI's theme system */
:root {
  --radius-field: 0.5rem;
  --border: 1px;
  --depth: 1;
  --noise: 0;
}

a {
  @apply cursor-pointer;
}

/* Hack to temporarily solve https://github.com/supabase/auth-ui/issues/219 */
.authBtn {
  @apply btn;
}
button[disabled].authBtn {
  font-size: 0.001px;
  filter: brightness(65%);
}
button[disabled].authBtn::before {
  font-size: 14px;
  content: "Loading...";
  color: oklch(var(--pc));
}
</file>

<file path="src/routes/(admin)/account/+layout.server.ts">
import type { LayoutServerLoad } from "./$types"

export const load: LayoutServerLoad = async ({
  locals: { session },
  cookies,
}) => {
  // Session here is from authGuard hook

  return {
    session,
    cookies: cookies.getAll(),
  }
}
</file>

<file path="src/routes/(marketing)/login/+layout.server.ts">
import type { LayoutServerLoad } from "./$types"

export const load: LayoutServerLoad = async ({
  locals: { session },
  cookies,
  url,
}) => {
  return {
    url: url.origin,
    cookies: cookies.getAll(),
    session,
  }
}
</file>

<file path="src/routes/(marketing)/search/+page.svelte">
<script lang="ts">
  import { page } from "$app/stores"
  import { browser } from "$app/environment"
  import { onMount } from "svelte"
  import Fuse from "fuse.js"
  import { goto } from "$app/navigation"
  import { dev } from "$app/environment"

  const fuseOptions = {
    keys: [
      { name: "title", weight: 3 },
      { name: "description", weight: 2 },
      { name: "body", weight: 1 },
    ],
    ignoreLocation: true,
    threshold: 0.3,
  }

  let fuse: Fuse<Result> | undefined = $state()

  let loading = $state(true)
  let error = $state(false)
  onMount(async () => {
    try {
      const response = await fetch("/search/api.json")
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      const searchData = await response.json()
      if (searchData && searchData.index && searchData.indexData) {
        const index = Fuse.parseIndex(searchData.index)
        fuse = new Fuse<Result>(searchData.indexData, fuseOptions, index)
      }
    } catch (e) {
      console.error("Failed to load search data", e)
      error = true
    } finally {
      loading = false
      document.getElementById("search-input")?.focus()
    }
  })

  type Result = {
    item: {
      title: string
      description: string
      body: string
      path: string
    }
  }
  let results: Result[] = $state([])

  // searchQuery is $page.url.hash minus the "#" at the beginning if present
  let searchQuery = $state(decodeURIComponent($page.url.hash.slice(1) ?? ""))
  $effect(() => {
    if (fuse) {
      results = fuse.search(searchQuery)
    }
  })
  // Update the URL hash when searchQuery changes so the browser can bookmark/share the search results
  $effect(() => {
    if (browser && window.location.hash.slice(1) !== searchQuery) {
      goto("#" + searchQuery, { keepFocus: true })
    }
  })

  let focusItem = $state(0)
  function onKeyDown(event: KeyboardEvent) {
    if (event.key === "Escape") {
      searchQuery = ""
    } else if (event.key === "ArrowDown" || event.key === "ArrowUp") {
      focusItem += event.key === "ArrowDown" ? 1 : -1
      if (focusItem < 0) {
        focusItem = 0
      } else if (focusItem > results.length) {
        focusItem = results.length
      }
      if (focusItem === 0) {
        document.getElementById("search-input")?.focus()
      } else {
        document.getElementById(`search-result-${focusItem}`)?.focus()
      }
    }
  }
</script>

<svelte:window onkeydown={onKeyDown} />

<svelte:head>
  <title>Search</title>
  <meta name="description" content="Search our website." />
</svelte:head>

<div class="py-8 lg:py-12 px-6 max-w-lg mx-auto">
  <div
    class="text-3xl lg:text-5xl font-medium text-primary flex gap-3 items-baseline text-center place-content-center"
  >
    <div
      class="text-center leading-relaxed font-bold bg-clip-text text-transparent bg-linear-to-r from-primary to-accent"
    >
      Search
    </div>
  </div>
  <label class="input input-bordered flex items-center gap-2 mt-10 mb-5 w-full">
    <input
      id="search-input"
      type="text"
      class="grow w-full"
      placeholder="Search"
      bind:value={searchQuery}
      onfocus={() => (focusItem = 0)}
      aria-label="Search input"
    />
  </label>

  {#if loading && searchQuery.length > 0}
    <div class="text-center mt-10 text-accent text-xl">Loading...</div>
  {/if}

  {#if error}
    <div class="text-center mt-10 text-accent text-xl">
      Error connecting to search. Please try again later.
    </div>
  {/if}

  {#if !loading && searchQuery.length > 0 && results.length === 0 && !error}
    <div class="text-center mt-10 text-accent text-xl">No results found</div>
    {#if dev}
      <div class="text-center mt-4 font-mono">
        Development mode only message: if you're missing content, rebuild your
        local search index with `npm run build`
      </div>
    {/if}
  {/if}

  <div>
    {#each results as result, i}
      <a
        href={result.item.path || "/"}
        id="search-result-{i + 1}"
        class="card my-6 bg-white shadow-xl flex-row overflow-hidden focus:mx-[-10px] focus:my-[-5px] focus:border-4 focus:border-secondary"
      >
        <div class="flex-none w-6 md:w-32 bg-secondary"></div>
        <div class="py-6 px-6">
          <div class="text-xl">{result.item.title}</div>
          <div class="text-sm text-accent">
            {result.item.path}
          </div>
          <div class="text-slate-500">{result.item.description}</div>
        </div>
      </a>
    {/each}
  </div>

  <div></div>
</div>
</file>

<file path="src/routes/(admin)/account/+layout.ts">
import {
  PUBLIC_SUPABASE_ANON_KEY,
  PUBLIC_SUPABASE_URL,
} from "$env/static/public"
import {
  createBrowserClient,
  createServerClient,
  isBrowser,
} from "@supabase/ssr"
import { redirect } from "@sveltejs/kit"
import type { Database } from "../../../DatabaseDefinitions.js"
import { CreateProfileStep } from "../../../config"
import { load_helper } from "$lib/load_helpers"

export const load = async ({ fetch, data, depends, url }) => {
  depends("supabase:auth")

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies
          },
        },
      })

  const { session, user } = await load_helper(data.session, supabase)
  if (!session || !user) {
    const redirectUrl = `/login?next=${url.pathname}`
    redirect(303, redirectUrl);
  }

  const { data: profile } = await supabase
    .from("profiles")
    .select(`*`)
    .eq("id", user.id)
    .single()

  const { data: aal } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()

  const createProfilePath = "/account/create_profile"
  const signOutPath = "/account/sign_out"
  if (
    profile &&
    !_hasFullProfile(profile) &&
    url.pathname !== createProfilePath &&
    url.pathname !== signOutPath &&
    CreateProfileStep
  ) {
    redirect(303, createProfilePath)
  }

  return {
    supabase,
    session,
    profile,
    user,
    amr: aal?.currentAuthenticationMethods,
  }
}

export const _hasFullProfile = (
  profile: Database["public"]["Tables"]["profiles"]["Row"] | null,
) => {
  if (!profile) {
    return false
  }
  if (!profile.full_name) {
    return false
  }
  if (!profile.company_name) {
    return false
  }
  if (!profile.website) {
    return false
  }

  return true
}
</file>

<file path="src/routes/(marketing)/+page.svelte">
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  import {
    WebsiteName,
    WebsiteBaseUrl,
    WebsiteDescription,
  } from "./../../config"
  import PricingModule from "$lib/components/pricing_module.svelte";

  const ldJson = {
    "@context": "https://schema.org",
    "@type": "WebSite",
    name: WebsiteName,
    url: WebsiteBaseUrl,
  }
  const jsonldScript = `<script type="application/ld+json">${
    JSON.stringify(ldJson) + "<"
  }/script>`

  const featureShowcase = [
    {
      title: "Security First",
      description: "Your keys, your server, your rules. Signal Lynx runs on your hardware so your API keys never leave your control.",
      details: ["Industry-leading encryption", "Bank-grade TLS configuration", "Rock-solid HTTPS everywhere"]
    },
    {
      title: "Trade Monitoring with PnL",
      description: "Track your trade history with details on entry, exit, and Profit-and-Loss to optimize your strategies.",
      details: ["Real-time fill tracking", "Automated PnL calculation", "Historical performance review"]
    },
    {
      title: "Stay Informed, On the Go",
      description: "Get real-time notifications on your trades and alerts, even when you're away from your desk.",
      details: ["Instant Telegram notifications", "Handle multiple accounts", "Monitor multiple exchanges"]
    },
    {
      title: "Fast and Secure Installation",
      description: "Streamline your webhook setup on any Windows machine or VPS with our one-click configuration tool.",
      details: ["15-minute setup", "Automated NGINX & SSL config", "Hardened firewall rules"]
    },
     {
      title: "Self-Hosted License Hub",
      description: "For SaaS builders who need a robust, affordable, and self-hosted licensing solution.",
      details: ["Automated key generation", "Stripe & PayPal integration", "Nightly database backups"]
    }
  ];

  let scrollContainer: HTMLElement;
  let scrollInterval: ReturnType<typeof setInterval>;

  function scroll(direction: 'left' | 'right') {
    if (!scrollContainer) return;
    const scrollAmount = scrollContainer.clientWidth * 0.8; // Scroll 80% of the container width
    scrollContainer.scrollBy({ 
      left: direction === 'right' ? scrollAmount : -scrollAmount, 
      behavior: 'smooth' 
    });
  }

  function startAutoScroll() {
    scrollInterval = setInterval(() => {
      // If we've scrolled to the end, loop back to the start
      if (scrollContainer.scrollLeft + scrollContainer.clientWidth >= scrollContainer.scrollWidth - 1) {
        scrollContainer.scrollTo({ left: 0, behavior: 'smooth' });
      } else {
        scroll('right');
      }
    }, 5000); // Auto-scroll every 5 seconds
  }

  onMount(() => {
    startAutoScroll();
    scrollContainer.addEventListener('mouseenter', () => clearInterval(scrollInterval));
    scrollContainer.addEventListener('mouseleave', startAutoScroll);
  });

  onDestroy(() => {
    clearInterval(scrollInterval);
  });

</script>

<svelte:head>
  <title>{WebsiteName}: Control the Flow, Keep the Dough.</title>
  <meta name="description" content={WebsiteDescription} />
  <!-- eslint-disable-next-line svelte/no-at-html-tags -->
  {@html jsonldScript}
</svelte:head>

<div class="hero min-h-[70vh] bg-synth-grid bg-repeat">
  <div class="hero-content text-center py-12">
    <div class="max-w-xl">
      <h1
        class="text-4xl md:text-6xl font-bold text-primary px-2"
        style="line-height: 1.2;"
      >
        Control the Flow, Keep the Dough.
      </h1>
      <h2 class="mt-6 md:mt-10 text-lg md:text-2xl">
        Security-first automation priced lower than a neon energy drink.
      </h2>
      <div
        class="mt-8 flex flex-row flex-wrap gap-4 place-content-center"
      >
        <a href="#pricing">
          <button class="btn btn-primary px-8">Start Free Trial</button>
        </a>
        <a href="#demo">
          <button class="btn btn-outline btn-secondary px-8">Watch 60-sec Demo</button>
        </a>
      </div>
    </div>
  </div>
</div>

<!-- Feature Showcase Section -->
<div class="py-16 bg-base-200 overflow-hidden relative">
  <div class="max-w-7xl mx-auto px-4">
    <!-- Left Arrow -->
    <button on:click={() => scroll('left')} class="btn btn-circle btn-ghost absolute left-2 top-1/2 -translate-y-1/2 z-10">❮</button>
    
    <div bind:this={scrollContainer} class="flex space-x-8 overflow-x-auto pb-4 hide-scrollbar">
      {#each featureShowcase as feature}
        <div class="card bg-base-100 w-80 md:w-96 flex-none shadow-xl flex flex-col">
          <div class="card-body">
            <h3 class="card-title text-2xl text-accent">{feature.title}</h3>
            <p class="text-base-content/70 mt-2 flex-grow">{feature.description}</p>
            <ul class="mt-4 space-y-2">
              {#each feature.details as detail}
                <li class="flex items-center gap-2">
                  <svg class="w-5 h-5 text-success shrink-0" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 16.4L6 12.4L7.4 11L10 13.6L16.6 7L18 8.4L10 16.4Z" fill="currentColor"/></svg>
                  <span>{detail}</span>
                </li>
              {/each}
            </ul>
          </div>
        </div>
      {/each}
    </div>

    <!-- Right Arrow -->
    <button on:click={() => scroll('right')} class="btn btn-circle btn-ghost absolute right-2 top-1/2 -translate-y-1/2 z-10">❯</button>
  </div>
</div>


<div id="pricing" class="py-16 bg-base-100">
  <div class="max-w-lg mx-auto text-center mb-12">
      <h2 class="text-3xl md:text-5xl font-bold text-primary pb-2">
        Pick Your Poison
      </h2>
      <p class="mt-4 text-xl">
        No hidden fees. No enterprise sales calls. Just tools that work.
      </p>
  </div>
  <PricingModule callToAction="Get Started" highlightedPlanId="engine" />
</div>

<div id="demo" class="hero min-h-[60vh] mt-12 bg-base-300">
  <div class="hero-content text-center pb-16 pt-4 px-4">
    <div class="max-w-lg">
      <div
        class="text-3xl md:text-5xl font-bold text-primary mt-4 pb-2"
      >
        See How It Works
      </div>
       <div class="mt-4 text-xl">
         (Your awesome 60-second demo video goes here)
       </div>
        <div class="mt-6 rounded-lg bg-black aspect-video w-full max-w-lg flex items-center justify-center">
            <p class="text-base-content/50">Demo video coming soon...</p>
        </div>
    </div>
  </div>
</div>

<style>
  .hide-scrollbar {
    scrollbar-width: none; /* For Firefox */
  }
  .hide-scrollbar::-webkit-scrollbar {
    display: none; /* For Chrome, Safari, and Opera */
  }
</style>
</file>

<file path="src/routes/(marketing)/+layout.svelte">
<script lang="ts">
  import { WebsiteName } from "./../../config"
  import "../../app.css"

  interface Props {
    children?: import("svelte").Snippet
  }

  let { children }: Props = $props()
</script>

<div class="navbar bg-base-100 container mx-auto">
  <div class="flex-1">
    <a class="btn btn-ghost text-xl" href="/">
      <img src="/images/signal-lynx-logo.png" alt="Signal Lynx Logo" class="h-10 w-auto mr-2" />
      {WebsiteName}
    </a>
  </div>
  <div class="flex-none">
    <ul class="menu menu-horizontal px-1 hidden sm:flex font-bold text-lg">
      <li class="dropdown dropdown-hover">
        <button type="button" class="btn btn-ghost">Products</button>
        <ul class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
          <li><a href="/trading-automation">Trading Automation</a></li>
          <li><a href="/license-hub">License Hub</a></li>
        </ul>
      </li>
      <li class="md:mx-2"><a href="/docs">Docs</a></li>
      <li class="md:mx-2"><a href="/faq">FAQ</a></li>
      <li class="md:mx-2"><a href="/contact_us">Contact</a></li>
      <li class="md:mx-2"><a href="/account">Account</a></li>
      <li class="md:mx-0">
        <a href="/search" aria-label="Search">
          <svg
            fill="currentColor"
            class="w-6 h-6"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
            ><path
              d="M17.545 15.467l-3.779-3.779a6.15 6.15 0 0 0 .898-3.21c0-3.417-2.961-6.377-6.378-6.377A6.185 6.185 0 0 0 2.1 8.287c0 3.416 2.961 6.377 6.377 6.377a6.15 6.15 0 0 0 3.115-.844l3.799 3.801a.953.953 0 0 0 1.346 0l.943-.943c.371-.371.236-.84-.135-1.211zM4.004 8.287a4.282 4.282 0 0 1 4.282-4.283c2.366 0 4.474 2.107 4.474 4.474a4.284 4.284 0 0 1-4.283 4.283c-2.366-.001-4.473-2.109-4.473-4.474z"
              fill="currentColor"
            /></svg
          >
        </a>
      </li>
    </ul>
    <div class="dropdown dropdown-end sm:hidden">
      <button type="button" class="btn btn-ghost btn-circle" aria-label="Menu">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          ><path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h7"
          /></svg
        >
      </button>
      <ul
        class="menu menu-lg dropdown-content mt-3 z-1 p-2 shadow-sm bg-base-100 rounded-box w-52 font-bold"
      >
        <li>
          <span>Products</span>
          <ul class="p-2">
            <li><a href="/trading-automation">Trading Automation</a></li>
            <li><a href="/license-hub">License Hub</a></li>
          </ul>
        </li>
        <li><a href="/docs">Docs</a></li>
        <li><a href="/faq">FAQ</a></li>
        <li><a href="/contact_us">Contact Us</a></li>
        <li><a href="/account">Account</a></li>
        <li><a href="/search">Search</a></li>
      </ul>
    </div>
  </div>
</div>

<div class="">
  {@render children?.()}
</div>

<!-- Spacer grows so the footer can be at bottom on short pages -->
<div class="grow"></div>
<div class="">
  <div class="border-t max-w-[1000px] mx-auto"></div>
  <footer
    class="footer md:footer-horizontal p-10 gap-x-48 lg:gap-x-64 xl:gap-x-96 place-content-center text-base"
  >
    <nav>
      <span class="footer-title opacity-80">Products</span>
      <a class="link link-hover mb-1" href="/trading-automation">Trading Automation</a>
      <a class="link link-hover my-1" href="/license-hub">License Hub</a>
    </nav>
    <nav>
        <span class="footer-title opacity-80">Company</span>
        <a class="link link-hover my-1" href="/docs">Docs</a>
        <a class="link link-hover my-1" href="/faq">FAQ</a>
        <a class="link link-hover my-1" href="/contact_us">Contact Us</a>
    </nav>
    <nav>
        <span class="footer-title opacity-80">Community</span>
        <a href="https://t.me/SignalLynx" class="link link-hover mb-1">Telegram</a>
        <a href="https://twitter.com/SignalLynx" class="link link-hover my-1">X / Twitter</a>
        <a
          class="link link-hover my-1"
          href="https://github.com/TheGrandGear99/CMSaasStarter">Github</a
        >
      </nav>
  </footer>
</div>
</file>

<file path="README.md">
<p align="center">
    <picture>
        <img width="420" alt="SaaS Starter Header reading: The open source, fast, and free to host SaaS template" src="https://github.com/CriticalMoments/CMSaasStarter/assets/848343/12f47617-e5be-4694-affc-23310e54b885">
    </picture>
</p>

<p align="center">
  <a href="https://github.com/CriticalMoments/CMSaasStarter/actions/workflows/build.yml" target="_blank"><img src="https://github.com/CriticalMoments/CMSaasStarter/actions/workflows/build.yml/badge.svg?branch=main" alt="Built Status"></a>
  <a href="https://github.com/CriticalMoments/CMSaasStarter/actions/workflows/format.yml" target="_blank"><img src="https://github.com/CriticalMoments/CMSaasStarter/actions/workflows/format.yml/badge.svg?branch=main" alt="Format Check"></a>
  <a href="https://github.com/CriticalMoments/CMSaasStarter/actions/workflows/linting.yml" target="_blank"><img src="https://github.com/CriticalMoments/CMSaasStarter/actions/workflows/linting.yml/badge.svg?branch=main" alt="Linting"></a>
  <a href="https://github.com/CriticalMoments/CMSaasStarter/blob/main/LICENSE" target="_blank"><img src="https://img.shields.io/badge/License-MIT-brightgreen?labelColor=32383f" alt="License"></a>
</p>

<p align="center">
  <a href="https://saasstarter.work"><strong>Demo & Homepage</strong></a> •
  <a href="https://github.com/CriticalMoments/CMSaasStarter#quick-start"><strong>Quick Start Guide</strong></a> • 
  <a href="https://github.com/CriticalMoments/CMSaasStarter/issues"><strong>Issues</strong></a>
</p>

<br/>

# SaaS Starter: A SvelteKit Boilerplate/Template

- [Feature Rich](#features): user auth, user dashboard, marketing site, blog engine, billing/subscriptions, pricing page, search, emails, and more.
- [Lightning Performance](#performance--best-practices): fast pre-rendered pages which score 100/100 on Google PageSpeed.
- [Delighful Developer Experience](#tech-stack): tools you'll love working with, including SvelteKit, Tailwind, DaisyUI, Postgres, and Supabase.
- Extensible: all the tools you need to make additional marketing pages, UI components, user dashboards, admin portals, database backends, API endpoints, and more.
- [Hosting](#suggested-hosting-stack): Our suggested hosting stack is free to host, cheap to scale, easy to manage, and includes automatic deployments.
- [MIT Open Source](https://github.com/CriticalMoments/CMSaasStarter/blob/main/LICENSE)
- [Fully Functional Demo](https://saasstarter.work)
- [Quick Start](#quick-start): Full docs from `git clone` to deployment.

Created by the folks at [Kiln AI](https://getkiln.ai)! It's the easiest tool for fine-tuning LLM models, synthetic data generation, and collaborating on datasets. The Kiln app was built with SaaS Starter!

**[Kiln AI](https://getkiln.ai)** Rapid AI Prototyping and Dataset Collaboration Tool

## Demo

You can explore all the features using our fully functional demo [saasstarter.work](https://saasstarter.work).

[![Try it Now](https://img.shields.io/badge/Try_it_Now-37a779?style=for-the-badge "Try it Now")](https://saasstarter.work)

See [criticalmoments.io](https://criticalmoments.io) and [getkiln.ai](https://getkiln.ai) for examples of what’s possible after this template has design, content, and functionality added.

<a href="https://saasstarter.work">
<kbd>
<img width="500" alt="homepage" src="https://github.com/CriticalMoments/CMSaasStarter/assets/848343/34944c09-df72-4ac2-9099-01d25d99911b">
</kbd>
<br>
<kbd>
<img width="200" alt="pricing page" src="https://github.com/CriticalMoments/CMSaasStarter/assets/848343/c3cb2ab7-3739-473e-a1fe-f82a4a31e844">
</kbd><kbd>
<img width="200" alt="settings page" src="https://github.com/CriticalMoments/CMSaasStarter/assets/848343/2d947c97-3cc7-4ff5-a5b1-7c8478b6f31a">
</kbd><kbd>
<img width="200" alt="payments portal" src="https://github.com/CriticalMoments/CMSaasStarter/assets/848343/0c4749c3-0d29-4edc-ae87-d8a4eefea3c9">
</kbd>
</a>

## Features

Everything you need to get started for a SaaS company:

- User Authentication: Sign up, sign out, forgot password, email verification, and oAuth. Powered by Supabase Auth. GDPR cookie warning for European users.
- Marketing Page with SEO optimization and Sitemap
- Blog engine with rich formatting, RSS and SEO optimization.
- User Dashboard with user profile, user settings, update email/password, billing, and more
- Subscriptions powered by Stripe Checkout
- Pricing page
- Emails: send emails to users, including template support
- Search: lightning fast site search, without a backend
- Contact-us form
- Billing portal: self serve to change card, upgrade, cancel, or download receipts
- Onboarding flow after signup: collect user data, and select a payment plan
- Style toolkit: theming and UI components
- Responsive: designed for mobile and desktop.
- Extensible: all the tools you need to make additional marketing pages, UI components, admin portals, database backends, API endpoints, and more.

## Introduction Blog Post

Want to learn why we picked the technologies we did, and how to keep your fork lightning fast as you add content? Check out [our blog post](https://criticalmoments.io/blog/how_we_built_our_marketing_page) on the process. Yes, it's hosted on a SaaS Starter fork!

## Tech Stack

- Web Framework: SvelteKit
- CSS / Styling
  - Framework: TailwindCSS
  - Component library: DaisyUI
- Suggested Hosting Stack
  - Host + CDN: Cloudflare Pages
  - Serverless compute: Cloudflare Workers
  - Authentication: Supabase Auth
  - Database: Supabase Postgres
- Payments
  - Stripe Checkout
  - Stripe Portal

## Suggested Hosting Stack

**There’s no cost for using this template**. The costs below reflect our suggested hosting stack.

- **$0/mo** — Supabase free tier, Cloudflare free tier.
  - Pros:
    - Free!
    - Can scale to thousands of users.
    - Unlimited static page requests.
    - 100k serverless functions/day.
  - Cons:
    - Does not include database backups. The frugal among you could hook up pgdump backups on lambda/S3 for a few cents per month.
    - Will auto-pause your database when not in use for 7 days.
  - Who it’s for:
    - This tier is perfectly functional for a hobby project, or pre-revenue company (up to 50,000 monthly active users). It’s easy to scale up once revenue starts, but it’s also fine to keep at this scale indefinitely.
- **$30/mo** - Supabase Pro, Cloudfare [Workers Paid](https://www.cloudflare.com/plans/developer-platform/)
  - Pros:
    - Database backups.
    - Never pauses database.
    - Over 1M serverless functions per day, with linear pricing for additional invocations.
  - Cons:
    - none
  - Who it’s for:
    - I suggest moving to this once you have paid customers or investors.

## Performance / Best Practices

The selected tech stack creates lightning fast websites.

- Pre-rendering (static generation) for marketing pages, pricing and blog
- Instant navigation: the best of CSR + SSR in one. SSR your first page for fastest possible initial load times. For subsequent pages, the content is pre-loaded and rendered with CSR, for instant rendering.
- CDN optimized, for high edge-cache hit ratios
- Edge-functions for dynamic APIs/pages
- Svelte and Tailwind compile out unused HTML, CSS and JS at deploy time for smaller pages
- Linting to find accessibility and syntax issues

The result is a perfect Google PageSpeed Insights score in all categories!

<img width="420" alt="Screenshot 2024-01-18 at 11 31 32 AM" src="https://github.com/CriticalMoments/CMSaasStarter/assets/848343/46b5e960-2aa0-4fb5-acd7-4f84b380e1d0">

# Quick Start

## Create a Copy of the Template

To get started, create your own copy of the project for development. There are two options:

- "Use this template": use this Github button if you want to build your own project using CMSaasStarter as a starter template and you aren't planning on contributing work back to the public open source project. See [Github Docs](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-repository-from-a-template).
- "Fork": use this button if you want contribute some or all of your work back to the public open source project. It will keep the full commit history, and be easier to create PRs back to CMSaasStarter.

## Setup Local Development

On your development machine:

```
git pull [Your Repo Created Above]
cd CMSaasStarter ## or your repo name if different
npm install
## Create an env file. You'll replace the values in this in later steps.
cp .env.example .env.local
## Run the project locally in dev mode, and launch the browser
npm run dev -- --open
```

**Note:** some features won't work until you complete the rest of the setup steps below!

## Developer Tools

The repo includes [CI scripts](https://aws.amazon.com/devops/continuous-integration/) designed for [GitHub Actions](https://github.com/features/actions). These confirm you don’t break your [build](https://github.com/CriticalMoments/CMSaasStarter/blob/main/.github/workflows/build.yml), you use [proper code formatting](https://github.com/CriticalMoments/CMSaasStarter/blob/main/.github/workflows/format.yml), [code linting and typechecking passes](https://github.com/CriticalMoments/CMSaasStarter/blob/main/.github/workflows/linting.yml), and even spell checking.

### Enabling GitHub Actions

Github disables CI on new forks by default, so be sure to go into the Github Actions page for your repo and enable workflows.

### Running Developer Tools Locally

To manually run all these tools run the following script. You can view it's contents for individual commands.

```
# first time only: chmod +x ./checks.sh
./checks.sh
```

### Running Developer Tools in your IDE

Installing extensions in your editor can automatically format-on-save, show linting/type issues inline, and run your test cases:

- Svelte for Svelte and accessibility issues: [VSCode](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode) or [other editors](https://sveltesociety.dev/tools#editor-support)
- ESLint for type checking and linting: [VSCode](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) and [other editors](https://eslint.org/docs/latest/use/integrations)
- Vitest for testing if you add tests: [VSCode](https://marketplace.visualstudio.com/items?itemName=vitest.explorer) or [other editors](https://vitest.dev/guide/ide)

### Running Developer Tools from Git Hooks

To catch build, formatting, linting and test issues before you commit changes, we suggest the following local git hook. It will run before you commit, stop you from breaking the build, and show any issues that are found. Add the lines below to an executable git hook script at the location `.git/hooks/pre-commit`.

```
#!/bin/sh
# Run standard checks before committing
cd "$(dirname "$0")"
sh ../../checks.sh
```

### Disabling Developer Tools

If you find build, formatting or linting rules too tedious, you can disable enforcement by deleting the CI files (`.github/workflows/*`) and removing the git hook (`.git/hooks/pre-commit`).

## Setup Supabase Project

- Create a Supabase account
- Create a new Supabase project in the console
- Wait for the database to launch
- Set up your database schema:
  - Go to the [SQL Editor](https://supabase.com/dashboard/project/_/sql) page in your Supabase Dashboard.
  - Copy the entire contents of the `database_migration.sql` file from the project root.
  - Paste the SQL into the editor and click "Run" to create the necessary tables and policies. This file contains the complete schema for the project.

- Enable user signups in the [Supabase console](https://app.supabase.com/project/_/settings/auth): sometimes new signups are disabled by default in Supabase projects
- Go to the [API Settings](https://supabase.com/dashboard/project/_/settings/api) page in the Dashboard. Find your Project-URL (PUBLIC_SUPABASE_URL), anon (PUBLIC_SUPABASE_ANON_KEY) and service_role (PRIVATE_SUPABASE_SERVICE_ROLE).
  - For local development: create a `.env.local` file:
    ```
    PUBLIC_SUPABASE_URL=https://your-project.supabase.co
    PUBLIC_SUPABASE_ANON_KEY=your-anon-key
    PRIVATE_SUPABASE_SERVICE_ROLE=your service_role secret
    ```
  - For production, add these two keys to your deployment environment (see below). We suggest you encrypt your service role.
- Auth Callback
  - Set your default callback URL for auth in the Supabase Auth console. For example, for the demo page we added: `https://saasstarter.work/auth/callback` . Also add that same URL to the the “allowed redirect URL” list in the Supabase auth console further down the page.
  - Add a link to the redirect URL allow list which allows parameters to your auth callback. For example we added the following for the demo page: `https://saasstarter.work/auth/callback?*`
  - Also add any local development URLs you want to use in testing to the list for your dev environment. For example, we added the following for local development: `http://localhost:5173/auth/callback` and `http://localhost:5173/auth/callback?*`.
  - Test that the "sign up" and "forgot password" emails link back to your domain correctly by checking the have a redirect_to parameter to your `yourdomain.com/auth/callback`. If they link to the base URL or another page, double check you have the config above set correctly.
- OAuth Logins
  - Decide which oauth logins you want to support, and set them up in the Supabase Auth console under “Auth Providers”. Be sure to provide them the Supabase callback URL. Also be sure to set any platform specific permissions/settings to retrieve their email as part of the login (for example, for Github it's under `Account Permissions > Email Address > Read Only Access`
  - Edit `oauthProviders` list in `/src/routes/(marketing)/login/login_config.ts` with the list of providers you chose. If you don’t want any OAuth options, make this an empty array.
  - Test each provider to ensure you setup the client ID, client secret and callback correctly for each
- Auth Email SMTP
  - Supabase has a limit of 4 emails per hour on their development server. You should [Configure a Custom SMTP](https://supabase.com/docs/guides/auth/auth-smtp) sending emails from your own domain.
  - Customize the email templates in the Supabase Auth console to include your product name and branding
- Test authentication
  - Open the `/login` page in your browser, and ensure you can sign up, confirm email, log in, and edit your account.

## Setup Stripe

- Create a Stripe account
- Create a product and price Tiers
  - Create your [products](https://stripe.com/docs/api/products) and their [prices](https://stripe.com/docs/api/prices) in the Dashboard or with the Stripe CLI.
  - SaaS Starter works best if you define each tier as a separate product (eg, `SaaS Starter Free`, `Saas Starter Pro`, `Saas Starter Enterprise`). Include a monthly and annual price for each product if you want to support multiple billing periods.
  - You do not need to create a free plan in Stripe. The free plan is managed within the app.
- Setup your environment
  - Get your [Secret API](https://dashboard.stripe.com/test/apikeys) key, and add it as an environment variable PRIVATE_STRIPE_API_KEY (`.env.local` locally, and Cloudflare environment for prod). Be sure to use test keys for development, and keep your production/live keys secret and secure.
- Optional: theme your Stripe integration
  - Change the colors and fonts to match your brand [here](https://dashboard.stripe.com/settings/branding)
- Update your pricing plan data to align to your stripe data
  - See `/src/routes/(marketing)/pricing/pricing_plans.ts` and Fill in all fields for each plan. stripe_price_id and stripe_product_id should only be omitted on a single “free” plan. Multiple free plans are not supported.
    - The product in Stripe can contain several prices for the same product (annual, monthly, etc). The stripe_price_id you choose to put in this json will be the default we use for the checkout experience. However, if you have more prices configured for a product configured, the user can switch between them in the management portal.
  - Set the `defaultPlanId` to the plan the user will see as their “current plan” after signup, but before subscribing to a paid plan (typically “free”). It should align to the plan with no stripe_price_id.
  - if you want an item highlighted on `/pricing`, specify that plan ID in `/src/routes/(marketing)/pricing/+page.svelte`
- Update your portal configuration
  - Open [stripe portal config](https://dashboard.stripe.com/test/settings/billing/portal) and make the following changes
    - Disallow editing email under customer information (since we allow editing in primary portal)
    - Optional: setup a custom domain so Stripe pages use your own domain
- Repeat steps in production environment

## Deploy

We have two documented options for deploying SaaS Starter: Cloudflare Pages and Vercel. However, it can be hosted anywhere you can host a SvelteKit app.

Our [official demo](https://saasstarter.work) is hosted on Cloudflare Pages, and deployed each time the main branch is updated.

### Deploy To Cloudflare

Cloudflare Pages and Workers is one of the most popular options for deploying SvelteKit and we recommend it. [Follow Cloudflare’s instructions](https://developers.cloudflare.com/pages/get-started/git-integration/) to deploy in a few clicks. Be sure to select “SvelteKit” as framework, and the rest of the defaults will work.

When prompted: add environment variables for your production environment (PUBLIC_SUPABASE_URL,
PUBLIC_SUPABASE_ANON_KEY, PRIVATE_SUPABASE_SERVICE_ROLE, and PRIVATE_STRIPE_API_KEY).

Optional: enable [Cloudflare Analytics](https://www.cloudflare.com/en-ca/application-services/products/analytics/) for usage metrics.

### Deploy to Vercel

Deploy using Vercel's deploy button:

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2FCriticalMoments%2FCMSaasStarter&env=PUBLIC_SUPABASE_URL,PUBLIC_SUPABASE_ANON_KEY,PRIVATE_SUPABASE_SERVICE_ROLE,PRIVATE_STRIPE_API_KEY&envDescription=Each%20environment%20variable%20is%20documented%20in%20our%20quick%20start%20guide%3A%20https%3A%2F%2Fgithub.com%2FCriticalMoments%2FCMSaasStarter%3Ftab%3Dreadme-ov-file%23quick-start&envLink=https%3A%2F%2Fgithub.com%2FCriticalMoments%2FCMSaasStarter%3Ftab%3Dreadme-ov-file%23quick-start&demo-title=SaasStarter%20Demo&demo-description=A%20live%20demo%20of%20this%20template%2C%20deployed%20from%20the%20main%20branch.&demo-url=https%3A%2F%2Fsaasstarter.work&demo-image=https%3A%2F%2Fprivate-user-images.githubusercontent.com%2F848343%2F297197975-34944c09-df72-4ac2-9099-01d25d99911b.png%3Fjwt%3DeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjE0NTAwMzMsIm5iZiI6MTcyMTQ0OTczMywicGF0aCI6Ii84NDgzNDMvMjk3MTk3OTc1LTM0OTQ0YzA5LWRmNzItNGFjMi05MDk5LTAxZDI1ZDk5OTExYi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwNzIwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDcyMFQwNDI4NTNaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zY2E4ZmY3YjVhMTc3YWE5YmI2MzI3YWE3MWQ2OWIzMjI3MGU2YzhmZDJjNjhlNDJhY2VjMDExMDk5ZjMyM2M4JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.O8e9x5qFiij0TILjUncTOXjAs5Di2-8221K-N0YttbE)

Here is a demo of of Saas Starter hosted on Vercel: [vercel.saasstarter.work](https://vercel.saasstarter.work)

### Deploy Alternatives

If you prefer another host you can explore alternatives:

- [SvelteKit official adapters](https://kit.svelte.dev/docs/adapters) including Netlify, Vercel, and Node
- [Community adapters](https://sveltesociety.dev/components#adapters) including Github pages, AppEngine, Azure, and more
- [Supabase](https://supabase.com/docs/guides/getting-started/quickstarts/sveltekit) if you want one host for everything. Note: they do charge $10 a month for custom domains, unlike Cloudflare.

## Setup Emailer -- Optional

SaaS Starter includes email capabilities for sending emails to users and admins.

These are optional and disabled by default. See [email docs](email_docs.md) for details on how to enable and customize them.

## Add Your Content

After the steps above, you’ll have a working version like the demo page. However, it’s not branded, and doesn’t have your content. The following checklist helps you customize the template to make a SaaS homepage for your company.

- Describe your site with a name, description and base URL in in `src/config.ts:`. These values are used for SEO.
- Content
  - Add actual content for marketing homepage
  - Add actual content for your blog (or delete the blog)
    - Update all fields in `src/routes/(marketing)/blog/posts.ts`, and replace the post pages under `src/routes/(marketing)/blog/posts` to align to the urls from `posts.ts`.
    - Alternatively remove the blog by removing the src/routes/(marketing)/blog directory, and remove any links to the blog in the header and footer. You can always bring it back later.
  - Add any pages you want on top of our boiler plate (about, terms of service, etc). Be sure to add links to them in the header, mobile menu header, and footer as appropriate (`src/routes/(marketing)/+layout.svelte`).
  - Note: if you add any dynamic content to the main marketing page, pricing page or blog, be sure to set `prerender = false` in the appropriate `+page.ts` file. These are currently pre-rendered and served as static assets for performance reasons, but that will break if you add server side rendering requirements.
- Update SEO content
  - Update title and meta description tags for every public page. We include generic ones using your site name (`src/config.ts`), but the more specific these are the better.
  - This done automatically for blog posts from `posts.ts` metadata
- Style
  - Theme: Update the theme to match your brand, or use one of the built in themes from DaisyUI (see `app.css`). DaisyUI can automatically use a dark mode theme on systems with dark mode enabled (disabled by default) -- to enable if remove `themes: false;` and specify a dark mode theme. Docs: https://daisyui.com/docs/themes/
  - Update the marketing page layout `src/routes/(marketing)/+layout.svelte`: customize design, delete unwanted pages from header and footer
  - Style: make it your own look and feel.
  - Update the favicon in the `/static/` directory
  - The Authentication UI should automatically update based on your DaisyUI style, but check out the login in pages, and further design tweaks can be made in `src/routes/(marketing)/login/login_config.ts` (see [Auth UI](https://supabase.com/docs/guides/auth/auth-helpers/auth-ui#customization) for options).
- Site Search: any [prerendered](https://kit.svelte.dev/docs/page-options#prerender) content will automatically be indexed by the site search. To exclude a page, add it to `excludePaths` in `src/lib/build_index.ts`.
- Functionality
  - Add actual SaaS functionality!
  - Replace the admin dashboard with real content (`/src/routes/(admin)/account/+page.svelte`).
  - Add API endpoints and database tables as needed to deliver your SaaS product.
- Analytics: optionally add analytics to your project. [guide](/analytics_docs.md)

## Community Extensions

The open source community is extending and improving SaasStarter!

These extensions are reference implementations of commonly needed features. We don't integrate them into the main branch to keep our dependencies minimal and simplify maintenance. However, if you need them you can cherry pick into your fork/repo:

- Internationalization: [branch](https://github.com/CriticalMoments/CMSaasStarter/tree/extension/internationalization), and [instructions](https://github.com/CriticalMoments/CMSaasStarter/pull/49)
- Fork using Shadcn/ui instead of DaisyUI: [kizivat/saas-kit](https://github.com/kizivat/saas-kit)

### Icons Credits

Homescreen Icons are from [Solar Broken Line Icons](https://www.svgrepo.com/collection/solar-broken-line-icons/) and [Solar Linear Icons](https://www.svgrepo.com/collection/solar-linear-icons) via CC Attribution License.

# Sponsor: Kiln AI

CMSaasStarter is sponsored by [Kiln AI](https://getkiln.ai): the easiest way to build AI products.

- 🚀 Intuitive Desktop Apps: One-click apps for Windows, MacOS, and Linux. Truly intuitive design.
- 🎛️ Fine Tuning: Zero-code fine-tuning for Llama, GPT-4o, and more. Automatic serverless deployment of models.
- 📊 Evals: Evaluate the quality of your models/tasks using state of the art evaluators.
- 🤖 Synthetic Data Generation: Generate training data with our interactive visual tooling.
- 🧠 Reasoning Models: Train or distill your own custom reasoning models.
- 🤝 Team Collaboration: Git-based version control for your AI datasets. Intuitive UI makes it easy to collaborate with QA, PM, and subject matter experts on structured data (examples, prompts, ratings, feedback, issues, etc.).

**Demo of Kiln AI:**

https://github.com/user-attachments/assets/0fb3cd48-0f2c-40f5-baf2-b38f11ed85ea
</file>

<file path="package.json">
{
  "name": "cmsassstarter",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "vite dev",
    "build": "vite build",
    "preview": "vite preview",
    "check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
    "check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
    "test": "vitest",
    "test_run": "vitest run",
    "lint": "eslint .",
    "format": "prettier --write --plugin prettier-plugin-svelte ./",
    "format_check": "prettier --check --plugin prettier-plugin-svelte ./"
  },
  "devDependencies": {
    "@sveltejs/adapter-auto": "^6.0.0",
    "@sveltejs/kit": "^2.21.1",
    "@sveltejs/vite-plugin-svelte": "^5.0.3",
    "@tailwindcss/typography": "^0.5.13",
    "@types/glob": "^8.1.0",
    "@types/html-to-text": "^9.0.4",
    "@types/jsdom": "^21.1.7",
    "@typescript-eslint/eslint-plugin": "^6.20.0",
    "@typescript-eslint/parser": "^6.19.0",
    "autoprefixer": "^10.4.19",
    "daisyui": "^4.12.10",
    "eslint": "^8.28.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-svelte": "^2.45.1",
    "fuse.js": "^7.0.0",
    "glob": "^10.4.5",
    "html-to-text": "^9.0.5",
    "jsdom": "^24.1.1",
    "postcss": "^8.4.31",
    "prettier": "^3.1.0",
    "prettier-plugin-svelte": "^3.2.6",
    "super-sitemap": "^0.15.1",
    "svelte": "^5.0.0",
    "svelte-check": "^4.0.0",
    "tailwindcss": "^3.4.7",
    "typescript": "^5.5.0",
    "vite": "^6.3.5",
    "vitest": "^3.0.7"
  },
  "type": "module",
  "dependencies": {
    "@supabase/auth-ui-shared": "^0.1.8",
    "@supabase/auth-ui-svelte": "^0.2.9",
    "@supabase/ssr": "^0.5.2",
    "@supabase/supabase-js": "^2.45.2",
    "handlebars": "^4.7.8",
    "resend": "^3.5.0",
    "stripe": "^13.3.0"
  },
  "overrides": {
    "@supabase/auth-ui-svelte": {
      "svelte": "$svelte"
    },
    "@supabase/ssr": {
      "cookie": "^0.7.0"
    },
    "@sveltejs/kit": {
      "cookie": "^0.7.0"
    }
  }
}
</file>

</files>

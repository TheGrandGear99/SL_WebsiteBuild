This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.env.example
.eslintignore
.eslintrc.cjs
.github/dependabot.yml
.github/workflows/build-check.yml
.github/workflows/format.yml
.github/workflows/lint-and-type-check.yml
.github/workflows/run-tests.yml
.gitignore
.npmrc
.prettierignore
.prettierrc
analytics_docs.md
checks.sh
email_docs.md
LICENSE
package.json
playwright.config.ts
postcss.config.js
README.md
SECURITY.md
src/ambient.d.ts
src/app.css
src/app.d.ts
src/app.html
src/config.ts
src/DatabaseDefinitions.ts
src/hooks.server.ts
src/lib/build_index.ts
src/lib/components/login/AuthWrapper.svelte
src/lib/components/pricing_module.svelte
src/lib/components/ProductCard.svelte
src/lib/data/products.ts
src/lib/emails/welcome_email_html.hbs
src/lib/emails/welcome_email_text.hbs
src/lib/index.js
src/lib/mailer.test.ts
src/lib/mailer.ts
src/lib/server/subscription.ts
src/routes/(admin)/account/(menu)/+layout.svelte
src/routes/(admin)/account/(menu)/+page.server.ts
src/routes/(admin)/account/(menu)/+page.svelte
src/routes/(admin)/account/(menu)/billing/+page.server.ts
src/routes/(admin)/account/(menu)/billing/+page.svelte
src/routes/(admin)/account/(menu)/billing/manage/+page.server.ts
src/routes/(admin)/account/(menu)/reset-machine-id/+page.server.ts
src/routes/(admin)/account/(menu)/reset-machine-id/+page.svelte
src/routes/(admin)/account/(menu)/settings/+page.svelte
src/routes/(admin)/account/(menu)/settings/change_email_subscription/+page.svelte
src/routes/(admin)/account/(menu)/settings/change_email/+page.svelte
src/routes/(admin)/account/(menu)/settings/change_password/+page.svelte
src/routes/(admin)/account/(menu)/settings/delete_account/+page.svelte
src/routes/(admin)/account/(menu)/settings/edit_profile/+page.svelte
src/routes/(admin)/account/(menu)/settings/reset_password/+page.svelte
src/routes/(admin)/account/(menu)/settings/settings_module.svelte
src/routes/(admin)/account/+layout.server.ts
src/routes/(admin)/account/+layout.svelte
src/routes/(admin)/account/+layout.ts
src/routes/(admin)/account/api/+page.server.ts
src/routes/(admin)/account/api/page.server.test.ts
src/routes/(admin)/account/create_profile/+page.svelte
src/routes/(admin)/account/create_profile/+page.ts
src/routes/(admin)/account/downloads/+page.server.ts
src/routes/(admin)/account/downloads/+page.svelte
src/routes/(admin)/account/select_plan/+page.svelte
src/routes/(admin)/account/sign_out/+page.svelte
src/routes/(admin)/account/subscribe/[slug]/+page.server.ts
src/routes/(admin)/account/subscription_helpers.server.test.ts
src/routes/(admin)/account/subscription_helpers.server.ts
src/routes/(marketing)/+layout.svelte
src/routes/(marketing)/+page.svelte
src/routes/(marketing)/+page.ts
src/routes/(marketing)/auth/callback/+server.js
src/routes/(marketing)/contact_us/+page.server.ts
src/routes/(marketing)/contact_us/+page.svelte
src/routes/(marketing)/docs/+page.svelte
src/routes/(marketing)/faq/+page.svelte
src/routes/(marketing)/license-hub/+page.svelte
src/routes/(marketing)/license-hub/+page.ts
src/routes/(marketing)/login/+layout.server.ts
src/routes/(marketing)/login/+layout.svelte
src/routes/(marketing)/login/+layout.ts
src/routes/(marketing)/login/+page.svelte
src/routes/(marketing)/login/current_password_error/+page.svelte
src/routes/(marketing)/login/forgot_password/+page.server.ts
src/routes/(marketing)/login/forgot_password/+page.svelte
src/routes/(marketing)/login/login_config.ts
src/routes/(marketing)/login/sign_in/+page.server.ts
src/routes/(marketing)/login/sign_in/+page.svelte
src/routes/(marketing)/login/sign_up/+page.server.ts
src/routes/(marketing)/login/sign_up/+page.svelte
src/routes/(marketing)/search/+page.server.ts
src/routes/(marketing)/search/+page.svelte
src/routes/(marketing)/search/api.json/+server.ts
src/routes/(marketing)/sitemap.xml/+server.ts
src/routes/(marketing)/trading-automation/+layout.ts
src/routes/(marketing)/trading-automation/+page.svelte
src/routes/+error.svelte
src/routes/+layout.svelte
src/routes/api/stripe/app-events/+server.ts
static/images/rss.svg
static/robots.txt
supabase/migrations/20240730010101_initial.sql
supabase/migrations/20240731051052_add_unsubscribed_to_profiles.sql
svelte.config.js
tailwind.config.ts
tests/auth.spec.ts
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".eslintignore">
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock
</file>

<file path=".github/dependabot.yml">
version: 2
updates:
  # Maintain dependencies for npm
  - package-ecosystem: "npm"
    directory: "/" # Location of package files
    schedule:
      interval: "weekly"
    reviewers:
      # Add your GitHub username here to be automatically assigned to review the PRs
      - "TheGrandGear99" 
    labels:
      - "dependencies"
      - "automated"
    commit-message:
      prefix: "chore"
      include: "scope"

  # Maintain dependencies for GitHub Actions
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
    reviewers:
      - "TheGrandGear99"
    labels:
      - "ci"
      - "dependencies"
      - "automated"
    commit-message:
      prefix: "chore"
      include: "scope"
</file>

<file path=".github/workflows/build-check.yml">
name: Build Check

on: [push, pull_request]

env:
  PUBLIC_SUPABASE_URL: "https://fake_test_url.supabase.co"
  PUBLIC_SUPABASE_ANON_KEY: "fake_anon_key"
  PRIVATE_SUPABASE_SERVICE_ROLE: "fake_service_role"
  PRIVATE_STRIPE_API_KEY: "fake_strip_api_key"

jobs:
  build_and_test:
    name: SvelteKit Build Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: NPM install
        run: npm install

      - name: SvelteKit Build
        run: npm run build
</file>

<file path=".github/workflows/lint-and-type-check.yml">
name: Linting & Type-Checking

on: [push, pull_request]

env:
  PUBLIC_SUPABASE_URL: "https://fake_test_url.supabase.co"
  PUBLIC_SUPABASE_ANON_KEY: "fake_anon_key"
  PRIVATE_SUPABASE_SERVICE_ROLE: "fake_service_role"
  PRIVATE_STRIPE_API_KEY: "fake_strip_api_key"

jobs:
  build_and_test:
    name: Linting and Type-checking
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: NPM install
        run: npm install

      - name: Linting
        run: npm run lint

      - name: Type-checking
        run: npm run check
</file>

<file path=".github/workflows/run-tests.yml">
name: Run Vitest Tests

on: [push, pull_request]

env:
  PUBLIC_SUPABASE_URL: "https://fake_test_url.supabase.co"
  PUBLIC_SUPABASE_ANON_KEY: "fake_anon_key"
  PRIVATE_SUPABASE_SERVICE_ROLE: "fake_service_role"
  PRIVATE_STRIPE_API_KEY: "fake_strip_api_key"

jobs:
  build_and_test:
    name: Vitest Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: NPM install
        run: npm install

      - name: Run Tests
        run: npm run test_run
</file>

<file path=".gitignore">
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example

# SvelteKit/Vite auto-generated temporary files
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

# Playwright test artifacts
/playwright-report/
/test-results/
</file>

<file path="playwright.config.ts">
import { defineConfig, devices } from '@playwright/test';

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  testDir: './tests',
  /* Run tests in files in parallel */
  fullyParallel: true,
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI only */
  retries: process.env.CI ? 2 : 0,
  /* Opt out of parallel tests on CI. */
  workers: process.env.CI ? 1 : undefined,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: 'html',
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: 'http://localhost:5173',

    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'on-first-retry',
  },

  /* Configure projects for major browsers */
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
  ],

  /* Run your local dev server before starting the tests */
  webServer: {
    command: 'npm run dev',
    url: 'http://localhost:5173',
    reuseExistingServer: !process.env.CI,
  },
});
</file>

<file path="src/ambient.d.ts">
declare global {
  type FormAccountUpdateResult = {
    errorMessage?: string
    errorFields?: string[]
    fullName?: string
    companyName?: string
    website?: string
    email?: string
  }
}

export {}
</file>

<file path="src/lib/components/login/AuthWrapper.svelte">
<script lang="ts">
  import { Auth } from '@supabase/auth-ui-svelte';
  import { sharedAppearance, oauthProviders } from './login_config';

  type AuthView = 'sign_in' | 'sign_up' | 'forgotten_password';

  interface Props {
    view: AuthView;
    data: any; // The page data containing supabase and url
  }

  let { view, data }: Props = $props();

  const titles = {
    sign_in: 'Sign In',
    sign_up: 'Sign Up',
    forgotten_password: 'Forgot Password'
  };

  const title = titles[view];

  const redirectTo = view === 'forgotten_password'
    ? `${data.url}/auth/callback?next=%2Faccount%2Fsettings%2Freset_password`
    : `${data.url}/auth/callback`;
</script>

<svelte:head>
  <title>{title} - Signal Lynx</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">{title}</h1>
<Auth
  supabaseClient={data.supabase}
  {view}
  {redirectTo}
  providers={oauthProviders}
  socialLayout="horizontal"
  showLinks={false}
  appearance={sharedAppearance}
  additionalData={undefined}
/>

{#if view === 'sign_in'}
  <div class="text-l mt-4">
    <a class="link" href="/login/forgot_password">Forgot password?</a>
  </div>
  <div class="text-l mt-3">
    Don't have an account? <a class="link" href="/login/sign_up">Sign up</a>.
  </div>
{:else if view === 'sign_up'}
  <div class="text-l mt-4 mb-2">
    Have an account? <a class="link" href="/login/sign_in">Sign in</a>.
  </div>
{:else if view === 'forgotten_password'}
  <div class="text-l text-slate-800 mt-4">
    Remember your password? <a class="underline" href="/login/sign_in">Sign in</a>.
  </div>
{/if}
</file>

<file path="src/lib/index.js">
// place files you want to import through the `$lib` alias in this folder.
</file>

<file path="src/lib/server/subscription.ts">
import type { User } from '@supabase/supabase-js';
import { error } from '@sveltejs/kit';
import { getOrCreateCustomerId, fetchSubscription } from '../../routes/(admin)/account/subscription_helpers.server';
import { allProducts } from '$lib/data/products';
import type { SupabaseClient } from '@supabase/supabase-js';
import type { Database } from '../../DatabaseDefinitions';

export async function getUserSubscriptionState(user: User, supabaseServiceRole: SupabaseClient<Database>) {
  const { error: idError, customerId } = await getOrCreateCustomerId({
    supabaseServiceRole,
    user,
  });

  if (idError || !customerId) {
    console.error("Critical Error: Failed to get or create customer ID for user:", user.id, idError);
    throw error(500, { message: 'Could not retrieve your account data. Please contact support.' });
  }

  const { primarySubscription, hasEverHadSubscription, error: fetchErr } = await fetchSubscription({
    customerId,
  });

  if (fetchErr) {
    console.error("Non-critical Error: Failed to fetch subscription for customerId:", customerId, fetchErr);
    // In this case, we can often proceed, assuming the user has no active plan.
  }

  const isActiveCustomer = !!primarySubscription;
  const currentPlanId = primarySubscription?.appSubscription?.id;
  const currentPlan = allProducts.find((p) => p.id === currentPlanId);
  const planStatus = primarySubscription?.stripeSubscription?.status;

  return {
    isActiveCustomer,
    hasEverHadSubscription,
    currentPlanId,
    currentPlan,
    planStatus,
  };
}
</file>

<file path="src/routes/(admin)/account/(menu)/reset-machine-id/+page.server.ts">
import { fail } from '@sveltejs/kit';
import { PRIVATE_LICENSE_MANAGER_URL } from '$env/static/private';
import type { Actions } from './$types';

export const actions: Actions = {
  default: async ({ request, locals: { safeGetSession } }) => {
    const { session } = await safeGetSession();

    if (!session) {
      return fail(401, { error: 'Authentication required. Please log in.' });
    }

    const formData = await request.formData();
    const licenseKey = formData.get('licenseKey') as string;
    const email = formData.get('email') as string;

    if (!licenseKey || !email) {
      return fail(400, { error: 'Email and License Key are required.', licenseKey, email });
    }
    
    if (email.toLowerCase() !== session.user.email?.toLowerCase()) {
        return fail(403, { error: 'Forbidden: You can only reset licenses associated with your own account email.', licenseKey, email });
    }

    try {
      const response = await fetch(PRIVATE_LICENSE_MANAGER_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          license_key: licenseKey,
          email: email,
        }),
      });

      const responseBody = await response.json();

      if (!response.ok) {
        return fail(response.status, { error: responseBody.detail || 'An unknown error occurred.', licenseKey, email });
      }

      return { success: true, message: responseBody.message };

    } catch (error) {
      console.error('Machine ID Reset Server Error:', error);
      return fail(500, { error: 'Could not connect to the license server. Please try again later.', licenseKey, email });
    }
  },
};
</file>

<file path="src/routes/(admin)/account/(menu)/reset-machine-id/+page.svelte">
<script lang="ts">
  import { getContext } from 'svelte';
  import { enhance } from '$app/forms';
  import type { Writable } from 'svelte/store';

  let adminSection: Writable<string> = getContext('adminSection');
  adminSection.set('reset-machine-id');

  let { data, form } = $props();
  
  // By declaring isLoading with $state, we make it reactive.
  let isLoading = $state(false);
</script>

<svelte:head>
  <title>Reset Machine ID - Signal Lynx</title>
</svelte:head>

<h1 class="text-3xl font-bold text-primary mb-2">Machine ID Reset</h1>
<p class="text-base-content/80">
  Use this tool to clear all existing machine activations from your license key. This allows you to activate your software on a new computer.
</p>
<p class="text-base-content/80 mt-1">
  Please note: This action can only be performed **once every 30 days** per license key.
</p>

<div class="card w-full max-w-lg bg-base-200 shadow-xl mt-8">
  <div class="card-body">
    <form 
      method="POST" 
      use:enhance={() => {
        isLoading = true;
        return async ({ update }) => {
          await update();
          isLoading = false;
        };
      }}
      class="space-y-4"
    >
      <div>
        <label for="email" class="label">
          <span class="label-text">Your Account Email</span>
        </label>
        <input
          id="email"
          name="email"
          type="email"
          placeholder="Your account email"
          class="input input-bordered w-full"
          value={data.user?.email ?? ''}
          readonly
        />
        <div class="label">
          <span class="label-text-alt">This is locked to your logged-in account for security.</span>
        </div>
      </div>

      <div>
        <label for="licenseKey" class="label">
          <span class="label-text">Your License Key</span>
        </label>
        <input
          id="licenseKey"
          name="licenseKey"
          type="text"
          placeholder="LM-ABCD-1234-EFGH-5678-IJKL"
          class="input input-bordered w-full"
          value={form?.licenseKey ?? ''}
          required
        />
      </div>
      
      {#if form?.success}
        <div role="alert" class="alert alert-success">
          <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
          <span>{form.message}</span>
        </div>
      {/if}

      {#if form?.error}
        <div role="alert" class="alert alert-error">
          <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
          <span>{form.error}</span>
        </div>
      {/if}

      <div class="card-actions justify-end pt-4">
        <button type="submit" class="btn btn-primary btn-gradient-electric" disabled={isLoading}>
          {#if isLoading}
            <span class="loading loading-spinner"></span>
            Processing...
          {:else}
            Reset Activations
          {/if}
        </button>
      </div>
    </form>
  </div>
</div>
</file>

<file path="src/routes/(admin)/account/subscription_helpers.server.test.ts">
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { getOrCreateCustomerId, fetchSubscription } from './subscription_helpers.server';
import type { User } from '@supabase/supabase-js';

// Mock the Stripe library
vi.mock('stripe', () => {
  const mockStripe = {
    customers: {
      create: vi.fn(),
      list: vi.fn(),
    },
    subscriptions: {
      list: vi.fn(),
    },
  };
  // The default export is a class, so we return a constructor
  return {
    default: vi.fn(() => mockStripe),
  };
});

// Mock our products data
vi.mock('$lib/data/products', () => ({
  allProducts: [
    { 
      id: 'engine', 
      name: 'Lynx-Relay', 
      stripe_product_id: 'prod_engine_123' 
    },
    { 
      id: 'license-hub', 
      name: 'Key Commander', 
      stripe_product_id: 'prod_hub_123' 
    },
  ],
}));

describe('Subscription Helpers', () => {
  const mockSupabase: any = {
    from: vi.fn().mockReturnThis(),
    select: vi.fn().mockReturnThis(),
    eq: vi.fn().mockReturnThis(),
    single: vi.fn(),
    insert: vi.fn(),
  };

  const mockUser = {
    id: 'user-uuid-123',
    email: 'test@example.com',
  } as User;
  
  // We need to access the mocked constructor to reset mocks
  let Stripe: any;

  beforeEach(async () => {
    vi.clearAllMocks();
    // Dynamically import the mocked stripe to access its instances
    Stripe = (await import('stripe')).default;
  });

  describe('getOrCreateCustomerId', () => {
    it('should return existing customer ID if found in DB', async () => {
      mockSupabase.single.mockResolvedValueOnce({
        data: { stripe_customer_id: 'cus_existing_123' },
        error: null,
      });

      const result = await getOrCreateCustomerId({ supabaseServiceRole: mockSupabase, user: mockUser });

      expect(result.customerId).toBe('cus_existing_123');
      expect(mockSupabase.from).toHaveBeenCalledWith('stripe_customers');
      expect(Stripe().customers.create).not.toHaveBeenCalled();
    });

    it('should create a new Stripe customer and save it to DB if not found', async () => {
      // Step 1: DB returns no customer
      mockSupabase.single.mockResolvedValueOnce({ data: null, error: { code: 'PGRST116' } });
      // Step 2: DB returns profile for new customer creation
      mockSupabase.single.mockResolvedValueOnce({ data: { full_name: 'Test User' }, error: null });
      // Step 3: Stripe API mock for creating a customer
      const mockStripeCustomer = { id: 'cus_new_456' };
      Stripe().customers.create.mockResolvedValue(mockStripeCustomer);
      // Step 4: DB insert mock returns no error
      mockSupabase.insert.mockResolvedValue({ error: null });

      const result = await getOrCreateCustomerId({ supabaseServiceRole: mockSupabase, user: mockUser });

      expect(Stripe().customers.create).toHaveBeenCalledWith({
        email: mockUser.email,
        name: 'Test User',
        metadata: expect.any(Object),
      });
      expect(mockSupabase.insert).toHaveBeenCalledWith({
        user_id: mockUser.id,
        stripe_customer_id: 'cus_new_456',
        updated_at: expect.any(Date),
      });
      expect(result.customerId).toBe('cus_new_456');
    });

    it('should return an error if user is null', async () => {
        const result = await getOrCreateCustomerId({ supabaseServiceRole: mockSupabase, user: null });
        expect(result.error).toBeDefined();
    });
  });

  describe('fetchSubscription', () => {
    it('should return primary subscription if an active one is found', async () => {
        const mockStripeSubscriptions = {
            data: [
                { status: 'canceled', items: { data: [{ price: { product: 'prod_old_789' } }] } },
                { status: 'active', items: { data: [{ price: { product: 'prod_engine_123' } }] } },
            ]
        };
        Stripe().subscriptions.list.mockResolvedValue(mockStripeSubscriptions);

        const result = await fetchSubscription({ customerId: 'cus_123' });

        expect(result.primarySubscription).toBeDefined();
        expect(result.primarySubscription?.appSubscription.id).toBe('engine');
        expect(result.hasEverHadSubscription).toBe(true);
    });

    it('should return null if no active subscription is found', async () => {
        const mockStripeSubscriptions = {
            data: [
                 { status: 'canceled', items: { data: [{ price: { product: 'prod_old_789' } }] } },
            ]
        };
        Stripe().subscriptions.list.mockResolvedValue(mockStripeSubscriptions);

        const result = await fetchSubscription({ customerId: 'cus_123' });

        expect(result.primarySubscription).toBeNull();
        expect(result.hasEverHadSubscription).toBe(true);
    });

     it('should return hasEverHadSubscription as false if no subscriptions ever', async () => {
        const mockStripeSubscriptions = { data: [] };
        Stripe().subscriptions.list.mockResolvedValue(mockStripeSubscriptions);

        const result = await fetchSubscription({ customerId: 'cus_123' });

        expect(result.primarySubscription).toBeNull();
        expect(result.hasEverHadSubscription).toBe(false);
    });
  });
});
</file>

<file path="src/routes/(marketing)/+page.ts">
export const prerender = true
</file>

<file path="src/routes/(marketing)/login/forgot_password/+page.server.ts">
export const ssr = false
</file>

<file path="src/routes/(marketing)/login/sign_in/+page.server.ts">
export const ssr = false
</file>

<file path="src/routes/(marketing)/login/sign_up/+page.server.ts">
export const ssr = false
</file>

<file path="src/routes/api/stripe/app-events/+server.ts">
import { PRIVATE_STRIPE_API_KEY, PRIVATE_STRIPE_WEBHOOK_SECRET, PRIVATE_SUPABASE_SERVICE_ROLE } from '$env/static/private';
import { PUBLIC_SUPABASE_URL } from '$env/static/public';
import { error, json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import Stripe from 'stripe';
import { createClient } from '@supabase/supabase-js';
import type { Database } from '../../../../DatabaseDefinitions';

const stripe = new Stripe(PRIVATE_STRIPE_API_KEY, {
  apiVersion: '2023-08-16'
});

// Create a Supabase client with the service role key to bypass RLS
const supabaseAdmin = createClient<Database>(PUBLIC_SUPABASE_URL, PRIVATE_SUPABASE_SERVICE_ROLE);

export const POST: RequestHandler = async ({ request }) => {
  const sig = request.headers.get('stripe-signature');
  const body = await request.text();

  if (!sig) {
    throw error(400, 'Missing Stripe signature');
  }

  let event: Stripe.Event;

  try {
    event = stripe.webhooks.constructEvent(body, sig, PRIVATE_STRIPE_WEBHOOK_SECRET);
  } catch (err: any) {
    console.error('Error constructing Stripe webhook event:', err.message);
    throw error(400, `Webhook Error: ${err.message}`);
  }

  // --- HANDLE THE EVENT ---
  console.log(`Received Stripe event: ${event.type}`);

  switch (event.type) {
    case 'checkout.session.completed':
      // This event fires when a user successfully completes a checkout.
      // We can use this to know a subscription has been created.
      const session = event.data.object as Stripe.Checkout.Session;
      console.log(`Checkout session for ${session.customer_email} was successful. Customer: ${session.customer}`);
      // NOTE: Stripe also sends a 'customer.subscription.created' event, which is often a better
      // place to handle new subscriptions, as it contains the full subscription object.
      // We are logging here for completeness but will act on the subscription event.
      break;

    case 'customer.subscription.created':
    case 'customer.subscription.updated':
    case 'customer.subscription.deleted':
      const subscription = event.data.object as Stripe.Subscription;
      const customerId = subscription.customer as string;

      // Find our internal user ID from the Stripe customer ID
      const { data: customerData, error: customerError } = await supabaseAdmin
        .from('stripe_customers')
        .select('user_id')
        .eq('stripe_customer_id', customerId)
        .single();
        
      if (customerError || !customerData) {
        console.error(`Webhook Error: Could not find user for Stripe customer ID ${customerId}`);
        // We return a 200 here because the webhook itself was valid, but we couldn't process it.
        // Returning a 500 would cause Stripe to retry, which we don't want if the customer doesn't exist.
        return json({ received: true, message: "Customer not found in our database." });
      }

      const userId = customerData.user_id;
      
      // Here you could update your `profiles` or a `subscriptions` table.
      // For example, setting a `is_subscribed` flag or storing the `plan_id`.
      // For this example, we'll just log that we would perform the update.
      console.log(`DATABASE ACTION: Updating subscription status for user ${userId}. New status: ${subscription.status}`);
      // Example DB update (you would uncomment and adapt this):
      /*
      const { error: updateError } = await supabaseAdmin
        .from('profiles')
        .update({ 
            subscription_status: subscription.status,
            plan_id: subscription.items.data[0].price.product
        })
        .eq('id', userId);

      if (updateError) {
        console.error(`Webhook DB Error: Failed to update subscription status for user ${userId}`, updateError);
      }
      */
      break;
  }

  return json({ received: true });
};
</file>

<file path="static/images/rss.svg">
<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><title>RSS</title><path d="M19.199 24C19.199 13.467 10.533 4.8 0 4.8V0c13.165 0 24 10.835 24 24h-4.801zM3.291 17.415c1.814 0 3.293 1.479 3.293 3.295 0 1.813-1.485 3.29-3.301 3.29C1.47 24 0 22.526 0 20.71s1.475-3.294 3.291-3.295zM15.909 24h-4.665c0-6.169-5.075-11.245-11.244-11.245V8.09c8.727 0 15.909 7.184 15.909 15.91z"/></svg>
</file>

<file path="static/robots.txt">
User-agent: *
Disallow:
</file>

<file path="tests/auth.spec.ts">
import { test, expect } from '@playwright/test';

// Test suite for Authentication flows
test.describe('Authentication and Onboarding', () => {

  // Test case for the main sign-up navigation
  test('should allow a user to navigate to the sign-up page', async ({ page }) => {
    // 1. Start at the homepage
    await page.goto('/');

    // 2. Find and click the "Account" link in the main navigation bar.
    await page.getByRole('link', { name: 'Account' }).click();
    
    // 3. We should now be on the /login page. Verify the "Get Started" heading is visible.
    await expect(page.getByRole('heading', { name: 'Get Started' })).toBeVisible();

    // 4. Find and click the "Sign Up" button on the login page.
    await page.getByRole('button', { name: 'Sign Up' }).click();

    // 5. Verify that the URL is now the login/sign_up page.
    await expect(page).toHaveURL('/login/sign_up');

    // 6. Verify that the "Sign Up" heading is visible on the final page.
    await expect(page.getByRole('heading', { name: 'Sign Up' }).first()).toBeVisible();
  });

});
</file>

<file path=".env.example">
# Supabase settings
PUBLIC_SUPABASE_URL='https://REPLACE_ME.supabase.co'
PUBLIC_SUPABASE_ANON_KEY='REPLACE_ME'
PRIVATE_SUPABASE_SERVICE_ROLE='REPLACE_ME'

# Stripe settings
PRIVATE_STRIPE_API_KEY='REPLACE_ME'
PRIVATE_STRIPE_WEBHOOK_SECRET='whsec_REPLACE_ME'

# Optional - settings for email
# PRIVATE_ADMIN_EMAIL='your_email@example.com'
# PRIVATE_FROM_ADMIN_EMAIL='no_reply@example.com'
# PRIVATE_RESEND_API_KEY='your_resend_api_key'

# License Manager settings
PRIVATE_LICENSE_MANAGER_URL='https://your-license-manager.com/api/v1/public/reset-activations'

# Feature Flags (publicly accessible)
# Determines if the "Create Profile" step is mandatory after sign-up.
# Use 'true' or 'false'.
PUBLIC_CREATE_PROFILE_STEP='true'
</file>

<file path=".eslintrc.cjs">
module.exports = {
  root: true,
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:svelte/recommended",
    "prettier",
  ],
  parser: "@typescript-eslint/parser",
  plugins: ["@typescript-eslint"],
  parserOptions: {
    sourceType: "module",
    ecmaVersion: 2020,
    extraFileExtensions: [".svelte"],
  },
  overrides: [
    {
      files: ["*.svelte"],
      parser: "svelte-eslint-parser",
      parserOptions: {
        parser: {
          // Specify a parser for each lang.
          ts: "@typescript-eslint/parser",
          js: "espree",
          typescript: "@typescript-eslint/parser",
        },
      },
    },
    {
      // Apply to all test files. Proper type checking in tests with mocks can be tedious and counterproductive.
      files: ["**/*.test.ts", "**/*.spec.ts"],
      rules: {
        "@typescript-eslint/no-explicit-any": "off",
      },
    },
  ],
  env: {
    browser: true,
    es2017: true,
    node: true,
  },
  rules: {
    "no-undef": "off",
    // no-undef has been turned off because of this:
    // basically, it causes issues and TS does those checks so it's redundant
    // https://typescript-eslint.io/linting/troubleshooting#i-get-errors-from-the-no-undef-rule-about-global-variables-not-being-defined-even-though-there-are-no-typescript-errors
  },
}
</file>

<file path=".npmrc">
engine-strict=true
resolution-mode=highest
</file>

<file path=".prettierrc">
{
  "plugins": ["prettier-plugin-svelte"],
  "useTabs": false,
  "tabWidth": 2,
  "semi": false,
  "overrides": [{ "files": "*.svelte", "options": { "parser": "svelte" } }]
}
</file>

<file path="analytics_docs.md">
# Adding Analytics

Adding analytics to your SaaS Starter project is optional.

Since each analytics platform has different setup instructions, we've created a guide instead of adding it in code.

### PostHog

- Create a PostHog Account
- Install PostHog JS Library
  - Run `npm install posthog-js` in your terminal. This will add PostHog dependencies to your `package.json` and `package-lock.json`.
- Set Up PostHog
  - in `src/routes/+layout.svelte` add PostHog to the script section following the [Posthog Svelte Guide](https://posthog.com/docs/libraries/svelte#client-side-setup). Note: ensure you’re logged into PostHog so that the code includes your unique API key automatically.
- Test analytics
  - Click around and view a few pages on your site to generate some events. You can view these events in PostHog to ensure tracking is active.

### Google Analytics

Follow the [Google Analytics Guide](https://support.google.com/analytics/answer/9304153?hl=en) to add Google Analytics to your project.

The ideal place to add Google Analytics is in `src/routes/+layout.svelte`.
</file>

<file path="checks.sh">
#!/bin/sh

# error on first error
set -e

if ! command -v misspellx &> /dev/null
then
    echo "=== Skipping Spell Check ==="
    echo "Skip running spell check using 'misspell' as the tool is not installed."
    echo "Install it using the instructions here: https://github.com/client9/misspell"
    echo "Skipping this check now, but it may fail in CI.\n"
else
    echo "=== Running Spell Check ==="
    misspell -error ./src README.md
    echo "no spelling mistakes found\n"
fi

echo "=== Running Format Check With Prettier ==="
npm run format_check

echo "=== Running Linter ==="
npm run lint

echo "=== Running Svelte Check ===" 
npm run check

echo "=== Running Tests ==="
npm run test_run

echo "\n=== All Checks Pass ===\n"
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2023 Steve Cosman

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="SECURITY.md">
# Security Policy

## Reporting a Vulnerability

Please report any vulnerabilities via this repository's security tab: https://github.com/TheGrandGear99/Signal-Lynx/security

This allows us to privately track, fix, and publish the fix before public disclosure.
</file>

<file path="src/app.d.ts">
import { Session, SupabaseClient, type AMREntry, type User } from "@supabase/supabase-js"
import { Database } from "./DatabaseDefinitions"

// --- HARDENING UPGRADE ---
// Define a concrete type for the return value of our custom session function.
// This provides full type safety and autocompletion throughout the app.
type SafeSession = {
  session: Session | null
  user: User | null
  amr: AMREntry[] | null
}

// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces
declare global {
  namespace App {
    interface Locals {
      supabase: SupabaseClient<Database>
      supabaseServiceRole: SupabaseClient<Database>
      safeGetSession: () => Promise<SafeSession> // Use our new, explicit type here
      session: Session | null
      user: User | null
    }
    interface PageData {
      session: Session | null
    }
    // interface Error {}
    // interface Platform {}
  }
}

export {}
</file>

<file path="src/DatabaseDefinitions.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      contact_requests: {
        Row: {
          company_name: string | null
          email: string | null
          first_name: string | null
          id: string
          last_name: string | null
          message_body: string | null
          phone: string | null
          updated_at: Date | null
        }
        Insert: {
          company_name?: string | null
          email?: string | null
          first_name?: string | null
          id?: string
          last_name?: string | null
          message_body?: string | null
          phone?: string | null
          updated_at?: Date | null
        }
        Update: {
          company_name?: string | null
          email?: string | null
          first_name?: string | null
          id?: string
          last_name?: string | null
          message_body?: string | null
          phone?: string | null
          updated_at?: Date | null
        }
        Relationships: []
      }
      profiles: {
        Row: {
          avatar_url: string | null
          full_name: string | null
          id: string
          updated_at: string | null
          company_name: string | null
          website: string | null
          unsubscribed: boolean
        }
        Insert: {
          avatar_url?: string | null
          full_name?: string | null
          id: string
          updated_at?: Date | null
          company_name?: string | null
          website?: string | null
          unsubscribed: boolean
        }
        Update: {
          avatar_url?: string | null
          full_name?: string | null
          id?: string
          updated_at?: string | null
          company_name?: string | null
          website?: string | null
          unsubscribed: boolean
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
      stripe_customers: {
        Row: {
          stripe_customer_id: string
          updated_at: Date | null
          user_id: string
        }
        Insert: {
          stripe_customer_id: string
          updated_at?: Date | null
          user_id: string
        }
        Update: {
          stripe_customer_id?: string
          updated_at?: Date | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "stripe_customers_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}
</file>

<file path="src/lib/components/ProductCard.svelte">
<script lang="ts">
  import type { Product } from '$lib/data/products';

  let { product }: { product: Product } = $props();
</script>

<div class="card bg-base-200 w-full lg:w-1/2 flex-none shadow-xl border-2 {product.id === 'engine' || product.id === 'license-hub' ? 'border-secondary' : 'border-transparent'}">
  <div class="card-body p-8 flex flex-col">
    <h3 class="card-title text-2xl text-primary">{product.title}</h3>
    <p class="text-base-content/80 flex-grow mt-4">{product.tagline}</p>
    
    {#if product.features}
    <ul class="my-6 space-y-3 text-left">
      {#each product.features as feature}
        <li class="flex items-start gap-3">
          <svg class="w-6 h-6 text-success shrink-0 mt-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 16.4L6 12.4L7.4 11L10 13.6L16.6 7L18 8.4L10 16.4Z" fill="currentColor"/></svg>
          <span>{feature}</span>
        </li>
      {/each}
    </ul>
    {/if}

    <div class="mt-auto pt-4">
      <p class="text-4xl font-bold text-center">{product.price}</p>
      <div class="card-actions justify-center mt-4">
        <a href={product.stripe_price_id ? `/account/subscribe/${product.stripe_price_id}` : '/login'} class="btn btn-primary btn-wide">{product.ctaLabel}</a>
      </div>
      <p class="text-center text-xs text-base-content/50 mt-2">{product.footnote}</p>
    </div>
  </div>
</div>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/reset_password/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")
</script>

<svelte:head>
  <title>Reset Password</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Set New Password</h1>

<SettingsModule
  title="Reset Password"
  editable={true}
  saveButtonTitle="Set New Password"
  successTitle="Password Reset"
  successBody="Authentication confirmed. Your new password is now active."
  formTarget="/account/api?/updatePassword"
  saveButtonClass="btn-gradient-electric"
  fields={[
    {
      id: "newPassword1",
      label: "New Password",
      initialValue: "",
      inputType: "password",
    },
    {
      id: "newPassword2",
      label: "Confirm New Password",
      initialValue: "",
      inputType: "password",
    },
  ]}
/>
</file>

<file path="src/routes/(admin)/account/api/page.server.test.ts">
import { describe, it, expect, vi, beforeEach } from "vitest"
import { actions } from "./+page.server"
import { fail, redirect } from "@sveltejs/kit"

vi.mock("@sveltejs/kit", async () => {
  const actual = await vi.importActual("@sveltejs/kit")
  return {
    ...actual,
    fail: vi.fn(),
    redirect: vi.fn().mockImplementation(() => {
      throw new Error("Redirect error")
    }),
  }
})

describe("toggleEmailSubscription", () => {
  const mockSupabase = {
    from: vi.fn().mockReturnThis(),
    select: vi.fn().mockReturnThis(),
    eq: vi.fn().mockReturnThis(),
    single: vi.fn().mockResolvedValue({ data: null }),
    update: vi.fn().mockReturnThis(),
  }

  const mockSafeGetSession = vi.fn()

  beforeEach(() => {
    vi.clearAllMocks()
  })

  it("should redirect if no session", async () => {
    mockSafeGetSession.mockResolvedValue({ session: null })

    await expect(
      actions.toggleEmailSubscription({
        locals: {
          supabase: mockSupabase,
          safeGetSession: mockSafeGetSession,
        },
      } as any),
    ).rejects.toThrow("Redirect")

    expect(redirect).toHaveBeenCalledWith(303, "/login")
  })

  it("should toggle subscription status from false to true", async () => {
    const mockSession = { user: { id: "user123" } }
    mockSafeGetSession.mockResolvedValue({ session: mockSession })

    // Mock the first query to get the current status
    mockSupabase.single.mockResolvedValueOnce({ data: { unsubscribed: false } })

    // Mock the update query
    const mockUpdateChain = {
      eq: vi.fn().mockResolvedValue({ error: null }),
    }

    mockSupabase.update.mockReturnValue(mockUpdateChain)

    const result = await actions.toggleEmailSubscription({
      locals: { supabase: mockSupabase, safeGetSession: mockSafeGetSession },
    } as any)

    expect(mockSupabase.from).toHaveBeenCalledWith("profiles")
    expect(mockSupabase.select).toHaveBeenCalledWith("unsubscribed")
    expect(mockSupabase.eq).toHaveBeenCalledWith("id", "user123")
    expect(mockSupabase.single).toHaveBeenCalled()
    expect(mockSupabase.update).toHaveBeenCalledWith({ unsubscribed: true })
    expect(mockUpdateChain.eq).toHaveBeenCalledWith("id", "user123")
    expect(result).toEqual({ unsubscribed: true })
  })

  it("should toggle subscription status from true to false", async () => {
    const mockSession = { user: { id: "user123" } }
    mockSafeGetSession.mockResolvedValue({ session: mockSession })

    // Mock the first query to get the current status
    mockSupabase.single.mockResolvedValueOnce({ data: { unsubscribed: true } })

    // Mock the update query
    const mockUpdateChain = {
      eq: vi.fn().mockResolvedValue({ error: null }),
    }

    mockSupabase.update.mockReturnValue(mockUpdateChain)

    const result = await actions.toggleEmailSubscription({
      locals: { supabase: mockSupabase, safeGetSession: mockSafeGetSession },
    } as any)

    expect(mockSupabase.from).toHaveBeenCalledWith("profiles")
    expect(mockSupabase.select).toHaveBeenCalledWith("unsubscribed")
    expect(mockSupabase.eq).toHaveBeenCalledWith("id", "user123")
    expect(mockSupabase.single).toHaveBeenCalled()
    expect(mockSupabase.update).toHaveBeenCalledWith({ unsubscribed: false })
    expect(mockUpdateChain.eq).toHaveBeenCalledWith("id", "user123")
    expect(result).toEqual({ unsubscribed: false })
  })

  it("should return fail response if update operation fails", async () => {
    const mockSession = { user: { id: "user123" } }
    mockSafeGetSession.mockResolvedValue({ session: mockSession })

    // Mock the first query to get the current status
    mockSupabase.single.mockResolvedValueOnce({ data: { unsubscribed: false } })

    // Mock the update query to return an error
    const mockUpdateChain = {
      eq: vi.fn().mockResolvedValue({ error: new Error("Update failed") }),
    }

    mockSupabase.update.mockReturnValue(mockUpdateChain)

    await actions.toggleEmailSubscription({
      locals: { supabase: mockSupabase, safeGetSession: mockSafeGetSession },
    } as any)

    // Check if fail was called with the correct arguments
    expect(fail).toHaveBeenCalledWith(500, {
      message: "Failed to update subscription status",
    })
  })
})
</file>

<file path="src/routes/(admin)/account/create_profile/+page.ts">
import { _hasFullProfile } from "../+layout.js"
import { redirect } from "@sveltejs/kit"

export async function load({ parent }) {
  const data = await parent()

  // They completed their profile! Redirect to "Select a Plan" screen.
  if (_hasFullProfile(data?.profile)) {
    redirect(303, "/account/select_plan")
  }

  return data
}
</file>

<file path="src/routes/(admin)/account/downloads/+page.server.ts">
import { error } from '@sveltejs/kit';
import { getUserSubscriptionState } from '$lib/server/subscription';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ locals: { safeGetSession, supabaseServiceRole } }) => {
  const { session, user } = await safeGetSession();
  if (!session || !user) {
    throw error(401, 'Unauthorized');
  }

  // Set default entitlements
  const entitlements = {
    setupScript: false,
    webhookEngine: false,
    licenseHub: false,
  };

  // All logged-in users get access to the setup script
  entitlements.setupScript = true;

  // Use the new, centralized function
  const subscriptionState = await getUserSubscriptionState(user, supabaseServiceRole);

  if (subscriptionState.isActiveCustomer) {
    const subscribedProductId = subscriptionState.currentPlan?.id;
    if (subscribedProductId === 'engine') {
      entitlements.webhookEngine = true;
    }
    if (subscribedProductId === 'license-hub') {
      entitlements.licenseHub = true;
    }
  }

  return { entitlements };
};
</file>

<file path="src/routes/(admin)/account/select_plan/+page.svelte">
<script lang="ts">
  import PricingModule from "$lib/components/pricing_module.svelte";
  import { WebsiteName } from "../../../../config";
</script>

<svelte:head>
  <title>Choose Your Arsenal - {WebsiteName}</title>
</svelte:head>

<div class="min-h-screen flex items-center justify-center bg-base-100 p-4">
  <div class="card w-full max-w-4xl bg-base-200 shadow-xl">
    <div class="card-body items-center text-center">
      <h1 class="card-title text-4xl font-bold text-primary mb-2">Choose Your Arsenal</h1>
      <p class="text-lg text-base-content/80 max-w-2xl">
        Your account is ready. Select a plan below to deploy your tools and go live. For full details, you can review the public 
        <a href="/trading-automation" target="_blank" class="link link-accent">product pages</a>.
      </p>
      <div class="mt-8 w-full">
        <PricingModule 
          callToAction="Deploy Plan" 
          center={true} 
          ctaClass="btn-gradient-electric" 
        />
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/routes/(marketing)/auth/callback/+server.js">
// src/routes/auth/callback/+server.js
import { redirect } from "@sveltejs/kit"
import { isAuthApiError } from "@supabase/supabase-js"

export const GET = async ({ url, locals: { supabase } }) => {
  const code = url.searchParams.get("code")
  if (code) {
    try {
      await supabase.auth.exchangeCodeForSession(code)
    } catch (error) {
      // If you open in another browser, need to redirect to login.
      // Should not display error
      if (isAuthApiError(error)) {
        redirect(303, "/login/sign_in?verified=true")
      } else {
        throw error
      }
    }
  }

  const next = url.searchParams.get("next")
  if (next) {
    redirect(303, next)
  }

  redirect(303, "/account")
}
</file>

<file path="src/routes/(marketing)/license-hub/+page.ts">
export const prerender = true
</file>

<file path="src/routes/(marketing)/login/+page.svelte">
<script lang="ts">
  import { goto } from '$app/navigation';
</script>

<svelte:head>
  <title>Get Started - Signal Lynx</title>
</svelte:head>

<div>
  <h1 class="text-xl font-bold">Get Started</h1>
  <form on:submit|preventDefault={() => goto('/login/sign_up')} style="display: contents;">
    <button type="submit" class="btn btn-primary mt-3 btn-wide btn-gradient-electric">Sign Up</button>
  </form>

  <h1 class="text-xl mt-6">Already have an account?</h1>
  <form on:submit|preventDefault={() => goto('/login/sign_in')} style="display: contents;">
    <button type="submit" class="btn btn-outline btn-primary mt-3 btn-wide">Sign In</button>
  </form>
</div>
</file>

<file path="src/routes/(marketing)/login/current_password_error/+page.svelte">
<svelte:head>
  <title>Authentication Failure - Signal Lynx</title>
</svelte:head>

<div class="text-center">
    <div class="text-6xl text-error mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-20 w-20 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
    </div>
    <h1 class="text-2xl font-bold text-primary mb-4">Authentication Failure</h1>
    <p class="text-base-content/80">
        For your security, an incorrect password was detected during an account modification attempt, and your session has been terminated.
    </p>
    <div class="mt-6 space-y-2">
        <p>If you remember your password, please <a href="/login/sign_in" class="link link-secondary">sign in</a> and try again.</p>
        <p>If you've forgotten your password, you can <a href="/login/forgot_password" class="link link-secondary">reset it here</a>.</p>
    </div>
</div>
</file>

<file path="src/routes/(marketing)/search/+page.server.ts">
export const prerender = true
</file>

<file path="src/routes/(marketing)/trading-automation/+layout.ts">
export const prerender = true
</file>

<file path="src/routes/+layout.svelte">
<script module lang="ts">
  // By declaring gtag in the module context, we make TypeScript aware of the global function
  // that will be loaded by the Google Analytics script in the <head>.
  // This script block runs once per module, not once per component instance.
  declare const gtag: (
    command: 'config',
    targetId: string,
    config?: { page_path: string }
  ) => void;
</script>

<script lang="ts">
  import "../app.css"
  import { navigating, page } from "$app/stores"
  import { expoOut } from "svelte/easing"
  import { slide } from "svelte/transition"
  import { browser } from '$app/environment';
  
  interface Props {
    children?: import("svelte").Snippet
  }

  let { children }: Props = $props()

  // --- Google Analytics Integration ---
  
  // IMPORTANT: Replace this with your actual Google Analytics Measurement ID
  const GA_MEASUREMENT_ID = 'G-YOUR_MEASUREMENT_ID_HERE';

  // The $effect rune will re-run automatically whenever $page.url changes.
  $effect(() => {
    if (browser && typeof gtag !== 'undefined') {
      gtag('config', GA_MEASUREMENT_ID, {
        page_path: $page.url.pathname,
      });
    }
  });
</script>

<svelte:head>
  <!-- Google Analytics Global Site Tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id={GA_MEASUREMENT_ID}"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', GA_MEASUREMENT_ID);
  </script>
</svelte:head>


{#if $navigating}
  <!-- Loading animation -->
  <div
    class="fixed w-full top-0 right-0 left-0 h-1 z-50 bg-primary"
    in:slide={{ delay: 100, duration: 12000, axis: "x", easing: expoOut }}
  ></div>
{/if}
{@render children?.()}
</file>

<file path="supabase/migrations/20240730010101_initial.sql">
-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  company_name text,
  avatar_url text,
  website text
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Profiles are viewable by self." on profiles
  for select using (auth.uid() = id);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- Create Stripe Customer Table
-- One stripe customer per user (PK enforced)
-- Limit RLS policies -- mostly only server side access
create table stripe_customers (
  user_id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  stripe_customer_id text unique
);
alter table stripe_customers enable row level security;

-- Create a table for "Contact Us" form submissions
-- Limit RLS policies -- only server side access
create table contact_requests (
  id uuid primary key default gen_random_uuid(),
  updated_at timestamp with time zone,
  first_name text,
  last_name text,
  email text,
  phone text,
  company_name text,
  message_body text
);
alter table contact_requests enable row level security;

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');
</file>

<file path="supabase/migrations/20240731051052_add_unsubscribed_to_profiles.sql">
ALTER TABLE profiles
ADD COLUMN IF NOT EXISTS unsubscribed boolean NOT NULL DEFAULT false;
</file>

<file path=".github/workflows/format.yml">
name: Format Check

on: [push, pull_request]

env:
  PUBLIC_SUPABASE_URL: "https://fake_test_url.supabase.co"
  PUBLIC_SUPABASE_ANON_KEY: "fake_anon_key"
  PRIVATE_SUPABASE_SERVICE_ROLE: "fake_service_role"
  PRIVATE_STRIPE_API_KEY: "fake_strip_api_key"

jobs:
  build_and_test:
    name: Code Format Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: NPM install
        run: npm install

      - name: Check Code Format
        run: npm run format_check

      - name: Run misspell to find misspelled words
        uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-check
          level: error
          path: "."
          options: "README.md ./src"
</file>

<file path=".prettierignore">
**/.svelte-kit/
**/node_modules/
**/package-lock.json

# Don't format plaintext email templates, the new lines are important
src/lib/emails/*_text.svelte
src/lib/emails/*_text.hbs
</file>

<file path="src/app.html">
<!doctype html>
<html lang="en" data-theme="saasstartertheme">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%sveltekit.assets%/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Kalam:wght@400;700&display=swap"
      rel="stylesheet"
    />
    %sveltekit.head%
  </head>
  <body
    data-sveltekit-preload-data="hover"
    style="min-height: 100vh; display: flex; flex-direction: column"
  >
    <div style="display: contents">%sveltekit.body%</div>
  </body>
</html>
</file>

<file path="src/config.ts">
import { PUBLIC_CREATE_PROFILE_STEP } from '$env/static/public';

export const WebsiteName: string = "Signal Lynx"
export const WebsiteBaseUrl: string = "https://www.signallynx.com" // Live production domain
export const WebsiteDescription: string =
  "Automation for the Night-Shift Nation. Webhook & licensing tools for traders and builders who value control and low cost."

// This feature flag is now controlled by your .env file.
export const CreateProfileStep: boolean = (PUBLIC_CREATE_PROFILE_STEP === 'true');
</file>

<file path="src/lib/data/products.ts">
// Define a common type for all products for stability
export type Product = {
  id: string;
  name: string;
  title: string;
  tagline: string;
  features: string[];
  price: string;
  ctaLabel: string;
  footnote: string;
  stripe_product_id?: string;
  stripe_price_id?: string;
};

export const automationProducts: Product[] = [
  {
    id: "script",
    name: "Signal Shield",
    title: "Automated Trade Configurator",
    tagline: "One click. One minute. You’re all set.",
    features: [
      "Enables your PC for Automated Trading",
      "Safely Configures your PC for Webhooks",
      "Establishs a secure connection to TradingView",
      "Shields your PC from unwanted access",
      "Your first step to automated trading"
    ],
    price: "$1 one-time",
    ctaLabel: "Download for $1",
    footnote: "Digital good · no refunds"
  },
  {
    id: "engine",
    name: "Lynx-Relay",
    title: "Automated Trading Executor",
    tagline: "Turn TradingView alerts into automatic order execution",
    features: [
      "Advanced Order Management and Fill Protection",
      "Track Fills and Trade Performance",
      "Live Telegram updates - never miss a trade",
      "Works with Kraken, BinanceUS & Gemini spot markets",
      "Signal Shield included for free"
    ],
    price: "$5 / month",
    ctaLabel: "Start Free Trial",
    footnote: "7-day trial · cancel anytime",
    stripe_product_id: "prod_OXj1CcemGMWOlU",
    stripe_price_id: "price_1NkdZCHMjzZ8mGZnRSjUm4yA"
  }
];

export const licenseHubProduct: Product = {
  id: "license-hub",
  name: "Key Commander",
  title: "Ship Software, Not Headaches",
  tagline: "Self-Hosted, 100% GUI License Manager",
  features: [
    "Manage One Time Buys, Subscriptions, and Trials",
    "Multiple Products and Tiers Supported",
    "Instantly generate and deliver license keys to customers",
    "Visual dashboard to manage users, seats, and activations",
    "Automatic backups keep your data safe",
  ],
  price: "$5 / month",
  ctaLabel: "Start Free Trial",
  footnote: "7-day trial · no refunds",
  stripe_product_id: "prod_OXj20YNpHYOXi7",
  stripe_price_id: "price_1Nkda2HMjzZ8mGZn4sKvbDAV"
};

// A combined list for use in places that need all plans
export const allProducts: Product[] = [...automationProducts, licenseHubProduct];

// The default free plan for new users
export const defaultPlanId = "script";
</file>

<file path="src/routes/(admin)/account/(menu)/+page.server.ts">
import { error } from '@sveltejs/kit';
import { getOrCreateCustomerId, fetchSubscription } from '../subscription_helpers.server';
import { allProducts } from '$lib/data/products';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ locals: { safeGetSession, supabaseServiceRole } }) => {
  const { session, user } = await safeGetSession();
  // The layout guard should prevent this, but we'll check for safety
  if (!session || !user) {
    return error(401, 'Unauthorized');
  }

  const { error: idError, customerId } = await getOrCreateCustomerId({
    supabaseServiceRole,
    user
  });

  if (idError || !customerId) {
    return error(500, { message: 'Error getting customer data. Please try again later.' });
  }

  const { primarySubscription } = await fetchSubscription({ customerId });

  const isActiveCustomer = !!primarySubscription;
  const currentPlanId = primarySubscription?.appSubscription?.id;
  const currentPlanName = allProducts.find((p) => p.id === currentPlanId)?.title;
  const planStatus = primarySubscription?.stripeSubscription?.status;

  return {
    isActiveCustomer,
    currentPlanId,
    currentPlanName,
    planStatus,
  };
};
</file>

<file path="src/routes/(admin)/account/(menu)/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("home")

  let { data } = $props()
  const { user, profile, isActiveCustomer, currentPlanName, planStatus } = data;

  // A helper to make the Stripe status more human-readable
  function formatStatus(status: string | undefined) {
    if (!status) return 'Inactive';
    return status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase());
  }
</script>

<svelte:head>
  <title>Operator Dashboard</title>
</svelte:head>

<div class="mb-8">
  <h1 class="text-4xl font-bold text-primary">Operator Dashboard</h1>
  <p class="text-xl mt-2">Welcome back, {profile?.full_name || user?.email || 'Operator'}.</p>
</div>

{#if isActiveCustomer}
  <!-- ========== VIEW FOR ACTIVE SUBSCRIBERS ========== -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    
    <!-- Subscription Status Card -->
    <div class="card bg-base-200 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-2xl text-secondary">Subscription Status</h2>
        <p class="text-lg">Your Plan: <span class="font-bold">{currentPlanName || 'N/A'}</span></p>
        <div class="badge badge-success badge-lg my-2">{formatStatus(planStatus)}</div>
        <div class="card-actions justify-start mt-4">
          <a href="/account/billing/manage" class="btn btn-primary btn-gradient-electric">Manage Billing & Invoices</a>
        </div>
      </div>
    </div>

    <!-- Your Arsenal Card -->
    <div class="card bg-base-200 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-2xl text-secondary">Your Arsenal</h2>
        <p>Access your licensed software, tools, and setup guides here. All systems are go.</p>
        <div class="card-actions justify-start mt-4">
          <a href="/account/downloads" class="btn btn-primary btn-gradient-electric">Access Your Downloads</a>
        </div>
      </div>
    </div>

    <!-- Mission-Critical Links -->
    <div class="card bg-base-200 shadow-xl lg:col-span-2">
       <div class="card-body">
        <h2 class="card-title text-2xl text-secondary">Mission-Critical Links</h2>
        <p>Quick access to manage your profile or get support from the community.</p>
        <div class="card-actions justify-start mt-4 gap-4">
          <a href="/account/settings" class="btn btn-outline">Adjust Operator Profile</a>
           <a href="/docs" class="btn btn-outline">Read the Docs</a>
          <a href="https://t.me/SignalLynx" target="_blank" rel="noopener noreferrer" class="btn btn-outline">Join Command on Telegram</a>
        </div>
      </div>
    </div>

  </div>
{:else}
  <!-- ========== VIEW FOR NEW USERS (NO ACTIVE PLAN) ========== -->
  <div class="card bg-base-200 shadow-xl border-2 border-accent">
    <div class="card-body text-center items-center">
      <h2 class="card-title text-3xl text-secondary">Welcome to the Command Center</h2>
      <p class="max-w-md my-4">
        Your account is active, but you haven't deployed an arsenal yet. Select a plan to unlock your tools and go live.
      </p>
      <div class="card-actions">
        <a href="/account/billing" class="btn btn-primary btn-lg btn-gradient-electric">Choose Your Arsenal</a>
      </div>
    </div>
  </div>

  <div class="mt-8 text-center">
    <p>Need to adjust your basic profile or password? <a href="/account/settings" class="link">Go to Settings</a>.</p>
  </div>
{/if}
</file>

<file path="src/routes/(admin)/account/(menu)/billing/+page.server.ts">
import { error } from '@sveltejs/kit';
import { getUserSubscriptionState } from '$lib/server/subscription';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ locals: { safeGetSession, supabaseServiceRole } }) => {
  const { session, user } = await safeGetSession();
  if (!session || !user) {
    throw error(401, 'Unauthorized');
  }

  // Use the new, centralized function to get all subscription data
  const subscriptionState = await getUserSubscriptionState(user, supabaseServiceRole);

  return {
    isActiveCustomer: subscriptionState.isActiveCustomer,
    hasEverHadSubscription: subscriptionState.hasEverHadSubscription,
    currentPlanId: subscriptionState.currentPlanId,
  };
};
</file>

<file path="src/routes/(admin)/account/(menu)/billing/manage/+page.server.ts">
import { PRIVATE_STRIPE_API_KEY } from "$env/static/private"
import { error, redirect } from "@sveltejs/kit"
import Stripe from "stripe"
import { getOrCreateCustomerId } from "../../../subscription_helpers.server"
import type { PageServerLoad } from "./$types"

const stripe = new Stripe(PRIVATE_STRIPE_API_KEY, { apiVersion: "2023-08-16" })

export const load: PageServerLoad = async ({
  url,
  locals: { safeGetSession, supabaseServiceRole },
}) => {
  const { session, user } = await safeGetSession()
  if (!session) {
    redirect(303, "/login")
  }

  const { error: idError, customerId } = await getOrCreateCustomerId({
    supabaseServiceRole,
    user,
  })
  if (idError || !customerId) {
    console.error("Error creating customer id", idError)
    error(500, {
      message: "Unknown error (PCID). If issue persists, please contact us.",
    })
  }

  let portalLink
  try {
    const portalSession = await stripe.billingPortal.sessions.create({
      customer: customerId,
      return_url: `${url.origin}/account/billing`,
    })
    portalLink = portalSession?.url
  } catch (e) {
    console.error("Error creating billing portal session", e)
    error(500, "Unknown error (PSE). If issue persists, please contact us.")
  }

  redirect(303, portalLink ?? "/account/billing")
}
</file>

<file path="src/routes/(admin)/account/(menu)/settings/delete_account/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()
  let { session } = data
</script>

<svelte:head>
  <title>Delete Account</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Danger Zone: Self-Destruct</h1>

<SettingsModule
  title="Delete Account"
  editable={true}
  dangerous={true}
  message="Warning: This is the big red button. This action is irreversible. All your data, subscriptions, and access will be permanently purged from our systems. There is no undo."
  saveButtonTitle="Initiate Self-Destruct"
  successTitle="Account Deletion In Progress"
  successBody="Signal received. Your account and all associated data are being permanently wiped."
  formTarget="/account/api?/deleteAccount"
  fields={[
    {
      id: "currentPassword",
      label: "Confirm Current Password",
      initialValue: "",
      inputType: "password",
    },
  ]}
/>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/edit_profile/+page.svelte">
<script lang="ts">
  import SettingsModule from "../settings_module.svelte"
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()

  let { profile } = data
</script>

<svelte:head>
  <title>Edit Profile</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Update Profile</h1>

<SettingsModule
  editable={true}
  title="Operator Details"
  successTitle="Profile Updated"
  successBody="Your command center information has been successfully updated."
  formTarget="/account/api?/updateProfile"
  saveButtonClass="btn-gradient-electric"
  fields={[
    {
      id: "fullName",
      label: "Name",
      initialValue: profile?.full_name ?? "",
      placeholder: "Your full name",
      maxlength: 50,
    },
    {
      id: "companyName",
      label: "Company Name",
      initialValue: profile?.company_name ?? "",
      maxlength: 50,
    },
    {
      id: "website",
      label: "Company Website",
      initialValue: profile?.website ?? "",
      maxlength: 50,
    },
  ]}
/>
</file>

<file path="src/routes/(admin)/account/+layout.svelte">
<script lang="ts">
  import { invalidate } from "$app/navigation"
  import { onMount } from "svelte"

  let { data, children } = $props()

  let { supabase, session } = $state(data)
  $effect(() => {
    ;({ supabase, session } = data)
  })

  onMount(() => {
    const { data } = supabase.auth.onAuthStateChange((event, _session) => {
      if (_session?.expires_at !== session?.expires_at) {
        invalidate("supabase:auth")
      }
    })

    return () => data.subscription.unsubscribe()
  })
</script>

{@render children?.()}
</file>

<file path="src/routes/(admin)/account/create_profile/+page.svelte">
<script lang="ts">
  import { applyAction, enhance } from "$app/forms"
  import type { SubmitFunction } from "@sveltejs/kit"
  import { WebsiteName } from "../../../../config"

  interface User {
    email: string
  }

  interface Profile {
    full_name?: string
    company_name?: string
    website?: string
  }

  interface Props {
    data: { user: User; profile: Profile }
    form: FormAccountUpdateResult
  }

  let { data, form }: Props = $props()

  let { user, profile } = data

  let loading = $state(false)
  let fullName: string = profile?.full_name ?? ""
  let companyName: string = profile?.company_name ?? ""
  let website: string = profile?.website ?? ""

  const fieldError = (liveForm: FormAccountUpdateResult, name: string) => {
    let errors = liveForm?.errorFields ?? []
    return errors.includes(name)
  }

  const handleSubmit: SubmitFunction = () => {
    loading = true
    return async ({ update, result }) => {
      await update({ reset: false })
      await applyAction(result)
      loading = false
    }
  }
</script>

<svelte:head>
  <title>Create Your Profile - {WebsiteName}</title>
</svelte:head>

<div
  class="min-h-screen flex items-center justify-center bg-base-100 p-4"
>
  <div class="card w-full max-w-md bg-base-200 shadow-xl">
    <div class="card-body">
      <h1 class="card-title text-3xl text-primary mb-2">Complete Your Operator Profile</h1>
      <p class="text-base-content/80 mb-6">
        Welcome to the command center. We just need a few more details to get your account fully operational.
      </p>

      <form
        class="form-widget space-y-4"
        method="POST"
        action="/account/api?/updateProfile"
        use:enhance={handleSubmit}
      >
        <div>
          <label for="fullName" class="label">
            <span class="label-text">Your Name</span>
          </label>
          <input
            id="fullName"
            name="fullName"
            type="text"
            placeholder="e.g. Jane 'Glitch' Doe"
            class="input input-bordered w-full {fieldError(form, 'fullName') ? 'input-error' : ''}"
            value={form?.fullName ?? fullName}
            maxlength="50"
          />
        </div>

        <div>
          <label for="companyName" class="label">
            <span class="label-text">Company / Organization</span>
          </label>
          <input
            id="companyName"
            name="companyName"
            type="text"
            placeholder="e.g. Cyberdyne Systems"
            class="input input-bordered w-full {fieldError(form, 'companyName') ? 'input-error' : ''}"
            value={form?.companyName ?? companyName}
            maxlength="50"
          />
        </div>

        <div>
          <label for="website" class="label">
            <span class="label-text">Company Website</span>
          </label>
          <input
            id="website"
            name="website"
            type="text"
            placeholder="e.g. https://example.com"
            class="input input-bordered w-full {fieldError(form, 'website') ? 'input-error' : ''}"
            value={form?.website ?? website}
            maxlength="50"
          />
        </div>

        {#if form?.errorMessage}
          <div role="alert" class="alert alert-error text-sm">
            <span>{form?.errorMessage}</span>
          </div>
        {/if}
        
        <div class="card-actions justify-end pt-4">
          <button
            type="submit"
            class="btn btn-primary w-full btn-gradient-electric"
            disabled={loading}
          >
            {#if loading}
              <span class="loading loading-spinner"></span>
              <span>Saving...</span>
            {:else}
              Create Profile & Proceed
            {/if}
          </button>
        </div>
      </form>

      <div class="text-xs text-base-content/60 mt-6 text-center">
        <p>Logged in as: {user?.email}</p>
        <a class="link link-hover" href="/account/sign_out">Not you? Sign out.</a>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/routes/(admin)/account/downloads/+page.svelte">
<script lang="ts">
  import { getContext } from 'svelte';
  import type { Writable } from 'svelte/store';

  let adminSection: Writable<string> = getContext('adminSection');
  adminSection.set('downloads');

  let { data } = $props();
  const { entitlements } = data;

  // Define product info here to keep the template clean
  const products = {
    setupScript: {
      name: "Signal Shield",
      subtitle: "The One-Button Bodyguard",
      description: "Your one-click script to harden and prepare any Windows machine for secure, 24/7 automated trading.",
      readme: "/documents/Setup-Script-README.pdf"
    },
    webhookEngine: {
      name: "Lynx-Relay",
      subtitle: "The Automated Trading Executor",
      description: "The core engine that turns your TradingView alerts into real-money trades. Signal Shield is included.",
      readme: "/documents/Webhook-Engine-README.pdf"
    },
    licenseHub: {
      name: "Key Commander",
      subtitle: "The Self-Hosted License Hub",
      description: "Your self-hosted command center for software licensing, subscription management, and automated key delivery.",
      readme: "/documents/License-Hub-README.pdf"
    }
  };
</script>

<svelte:head>
  <title>Your Arsenal - Signal Lynx</title>
</svelte:head>

<h1 class="text-3xl font-bold text-primary">Your Arsenal</h1>
<p class="mt-2 text-lg">Download your licensed software and review the mission briefs (READMEs) here.</p>

<div class="mt-8 space-y-6">

  <!-- Setup Script Download -->
  {#if entitlements.setupScript}
    <div class="card bg-base-200 shadow-xl">
      <div class="card-body md:flex-row md:items-center md:justify-between">
        <div>
          <h2 class="card-title text-2xl text-secondary">{products.setupScript.name}</h2>
          <p class="font-semibold text-accent -mt-1">{products.setupScript.subtitle}</p>
          <p class="mt-2 text-base-content/80 max-w-lg">{products.setupScript.description}</p>
        </div>
        <div class="card-actions justify-start md:justify-end mt-4 md:mt-0 md:pl-4">
          <a href={products.setupScript.readme} target="_blank" class="btn btn-ghost">View README</a>
          <button class="btn btn-primary btn-gradient-electric" disabled>Download v1.0</button>
        </div>
      </div>
    </div>
  {/if}

  <!-- Webhook Engine Download -->
  {#if entitlements.webhookEngine}
    <div class="card bg-base-200 shadow-xl">
       <div class="card-body md:flex-row md:items-center md:justify-between">
        <div>
          <h2 class="card-title text-2xl text-secondary">{products.webhookEngine.name}</h2>
          <p class="font-semibold text-accent -mt-1">{products.webhookEngine.subtitle}</p>
          <p class="mt-2 text-base-content/80 max-w-lg">{products.webhookEngine.description}</p>
        </div>
        <div class="card-actions justify-start md:justify-end mt-4 md:mt-0 md:pl-4">
          <a href={products.webhookEngine.readme} target="_blank" class="btn btn-ghost">View README</a>
          <button class="btn btn-primary btn-gradient-electric" disabled>Download v1.0</button>
        </div>
      </div>
    </div>
  {/if}

  <!-- License Hub Download -->
  {#if entitlements.licenseHub}
    <div class="card bg-base-200 shadow-xl">
       <div class="card-body md:flex-row md:items-center md:justify-between">
        <div>
          <h2 class="card-title text-2xl text-secondary">{products.licenseHub.name}</h2>
          <p class="font-semibold text-accent -mt-1">{products.licenseHub.subtitle}</p>
          <p class="mt-2 text-base-content/80 max-w-lg">{products.licenseHub.description}</p>
        </div>
        <div class="card-actions justify-start md:justify-end mt-4 md:mt-0 md:pl-4">
          <a href={products.licenseHub.readme} target="_blank" class="btn btn-ghost">View README</a>
          <button class="btn btn-primary btn-gradient-electric" disabled>Download v1.0</button>
        </div>
      </div>
    </div>
  {/if}

  <!-- Empty State -->
  {#if !entitlements.webhookEngine && !entitlements.licenseHub && !entitlements.setupScript}
    <div class="text-center p-10 border-2 border-dashed border-base-300 rounded-lg">
        <h2 class="text-2xl font-bold">Your Arsenal is Empty</h2>
        <p class="mt-2">You do not have any active subscriptions. Deploy a plan to access your tools.</p>
        <a href="/account/billing" class="btn btn-primary btn-gradient-electric mt-4">Choose Your Arsenal</a>
    </div>
  {/if}
</div>
</file>

<file path="src/routes/(admin)/account/sign_out/+page.svelte">
<script lang="ts">
  import { goto } from "$app/navigation"
  import { onMount } from "svelte"

  let { data } = $props()

  let { supabase } = data
  let message = $state("Signing out....")

  // on mount, sign out
  onMount(() => {
    supabase.auth.signOut().then(({ error }) => {
      if (error) {
        message = "There was an issue signing out."
      } else {
        goto("/")
      }
    })
  })
</script>

<h1 class="text-2xl font-bold m-6 mx-auto my-auto">{message}</h1>
</file>

<file path="src/routes/(admin)/account/subscribe/[slug]/+page.server.ts">
import { PRIVATE_STRIPE_API_KEY } from "$env/static/private"
import { error, redirect } from "@sveltejs/kit"
import Stripe from "stripe"
import {
  fetchSubscription,
  getOrCreateCustomerId,
} from "../../subscription_helpers.server"
import type { PageServerLoad } from "./$types"

const stripe = new Stripe(PRIVATE_STRIPE_API_KEY, { apiVersion: "2023-08-16" })

export const load: PageServerLoad = async ({
  params,
  url,
  locals: { safeGetSession, supabaseServiceRole },
}) => {
  const { session, user } = await safeGetSession()
  if (!session) {
    redirect(303, "/login")
  }

  if (params.slug === "free_plan") {
    // plan with no stripe_price_id. Redirect to account home
    redirect(303, "/account")
  }

  const { error: idError, customerId } = await getOrCreateCustomerId({
    supabaseServiceRole,
    user,
  })
  if (idError || !customerId) {
    console.error("Error creating customer id", idError)
    error(500, {
      message: "Unknown error. If issue persists, please contact us.",
    })
  }

  const { primarySubscription } = await fetchSubscription({
    customerId,
  })
  if (primarySubscription) {
    // User already has plan, we shouldn't let them buy another
    redirect(303, "/account/billing")
  }

  let checkoutUrl
  try {
    const stripeSession = await stripe.checkout.sessions.create({
      line_items: [
        {
          price: params.slug,
          quantity: 1,
        },
      ],
      customer: customerId,
      mode: "subscription",
      success_url: `${url.origin}/account`,
      cancel_url: `${url.origin}/account/billing`,
    })
    checkoutUrl = stripeSession.url
  } catch (e) {
    console.error("Error creating checkout session", e)
    error(500, "Unknown Error (SSE): If issue persists please contact us.")
  }

  redirect(303, checkoutUrl ?? "/pricing")
}
</file>

<file path="src/routes/(admin)/account/subscription_helpers.server.ts">
import type { SupabaseClient, User } from "@supabase/supabase-js"
import type { Database } from "../../../DatabaseDefinitions"

import { PRIVATE_STRIPE_API_KEY } from "$env/static/private"
import Stripe from "stripe"
import { allProducts } from "$lib/data/products"

const stripe = new Stripe(PRIVATE_STRIPE_API_KEY, { apiVersion: "2023-08-16" })

export const getOrCreateCustomerId = async ({
  supabaseServiceRole,
  user,
}: {
  supabaseServiceRole: SupabaseClient<Database>
  // --- HARDENING UPGRADE ---
  // The user object can be null if the session is invalid.
  // We must handle this possibility.
  user: User | null 
}) => {
  // If no user exists, we cannot proceed.
  if (!user) {
    return { error: new Error("User not found.") }
  }

  const { data: dbCustomer, error } = await supabaseServiceRole
    .from("stripe_customers")
    .select("stripe_customer_id")
    .eq("user_id", user.id)
    .single()

  if (error && error.code != "PGRST116") {
    // PGRST116 == no rows
    return { error: error }
  }

  if (dbCustomer?.stripe_customer_id) {
    return { customerId: dbCustomer.stripe_customer_id }
  }

  // Fetch data needed to create customer
  const { data: profile, error: profileError } = await supabaseServiceRole
    .from("profiles")
    .select(`full_name, website, company_name`)
    .eq("id", user.id)
    .single()
  if (profileError) {
    return { error: profileError }
  }

  // Create a stripe customer
  let customer
  try {
    customer = await stripe.customers.create({
      email: user.email,
      name: profile?.full_name ?? "",
      metadata: {
        user_id: user.id,
        company_name: profile?.company_name ?? "",
        website: profile?.website ?? "",
      },
    })
  } catch (e) {
    return { error: e }
  }

  if (!customer.id) {
    return { error: new Error("Unknown stripe user creation error") }
  }

  // insert instead of upsert so we never over-write. PK ensures later attempts error.
  const { error: insertError } = await supabaseServiceRole
    .from("stripe_customers")
    .insert({
      user_id: user.id,
      stripe_customer_id: customer.id,
      updated_at: new Date(),
    })

  if (insertError) {
    return { error: insertError }
  }

  return { customerId: customer.id }
}

export const fetchSubscription = async ({
  customerId,
}: {
  customerId: string
}) => {
  // Fetch user's subscriptions
  let stripeSubscriptions
  try {
    stripeSubscriptions = await stripe.subscriptions.list({
      customer: customerId,
      limit: 100,
      status: "all",
    })
  } catch (e) {
    return { error: e }
  }

  // find "primary". The user may have several old ones, we want an active one (including trials, and past_due in grace period).
  const primaryStripeSubscription = stripeSubscriptions.data.find((x) => {
    return (
      x.status === "active" ||
      x.status === "trialing" ||
      x.status === "past_due"
    )
  })
  let appSubscription = null
  if (primaryStripeSubscription) {
    const productId =
      primaryStripeSubscription?.items?.data?.[0]?.price.product ?? ""
    
    if (!productId) {
      return {
        error: new Error("Stripe subscription is missing a product ID.")
      }
    }

    appSubscription = allProducts.find((x) => {
      return x.stripe_product_id === productId
    })
    if (!appSubscription) {
      return {
        error:
          new Error("Stripe subscription does not have matching app subscription.")
      }
    }
  }
  let primarySubscription = null
  if (primaryStripeSubscription && appSubscription) {
    primarySubscription = {
      stripeSubscription: primaryStripeSubscription,
      appSubscription: appSubscription,
    }
  }

  const hasEverHadSubscription = stripeSubscriptions.data.length > 0

  return {
    primarySubscription,
    hasEverHadSubscription,
  }
}
</file>

<file path="src/routes/(marketing)/contact_us/+page.server.ts">
import { fail } from "@sveltejs/kit"
import { sendAdminEmail } from "$lib/mailer.js"

// Industry-standard regex for basic email format validation
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

/** @type {import('./$types').Actions} */
export const actions = {
  submitContactUs: async ({ request, locals: { supabaseServiceRole } }) => {
    const formData = await request.formData()
    const errors: { [fieldName: string]: string } = {}

    const firstName = formData.get("first_name")?.toString() ?? ""
    if (firstName.length < 2) {
      errors["first_name"] = "First name is required"
    }
    if (firstName.length > 500) {
      errors["first_name"] = "First name too long"
    }

    const lastName = formData.get("last_name")?.toString() ?? ""
    if (lastName.length < 2) {
      errors["last_name"] = "Last name is required"
    }
    if (lastName.length > 500) {
      errors["last_name"] = "Last name too long"
    }

    const email = formData.get("email")?.toString() ?? ""
    if (email.length < 6) {
      errors["email"] = "Email is required"
    } else if (email.length > 500) {
      errors["email"] = "Email too long"
    } else if (!emailRegex.test(email)) { // --- HARDENING UPGRADE ---
      errors["email"] = "Invalid email format"
    }

    const company = formData.get("company")?.toString() ?? ""
    if (company.length > 500) {
      errors["company"] = "Company too long"
    }

    const phone = formData.get("phone")?.toString() ?? ""
    if (phone.length > 100) {
      errors["phone"] = "Phone number too long"
    }

    const message = formData.get("message")?.toString() ?? ""
    if (message.length > 2000) {
      errors["message"] = "Message too long (" + message.length + " of 2000)"
    }

    if (Object.keys(errors).length > 0) {
      return fail(400, { errors })
    }

    // Save to database
    const { error: insertError } = await supabaseServiceRole
      .from("contact_requests")
      .insert({
        first_name: firstName,
        last_name: lastName,
        email,
        company_name: company,
        phone,
        message_body: message,
        updated_at: new Date(),
      })

    if (insertError) {
      console.error("Error saving contact request", insertError)
      return fail(500, { errors: { _: "Error saving contact request." } })
    }

    // Send email to admin
    await sendAdminEmail({
      subject: "New contact request",
      body: `New contact request from ${firstName} ${lastName}.\n\nEmail: ${email}\n\nPhone: ${phone}\n\nCompany: ${company}\n\nMessage: ${message}`,
    })

    // Return a success state for the form
    return { success: true };
  },
}
</file>

<file path="src/routes/(marketing)/docs/+page.svelte">
<script lang="ts">
  // Array of documentation files for easy management
  const documents = [
    {
      title: "Signal Shield",
      subtitle: "The One-Button Bodyguard",
      description: "Your step-by-step mission brief for hardening any Windows machine. This guide covers the one-click installer, prerequisite checks, and what all those fancy automated steps are actually doing to make your rig a fortress.",
      href: "/documents/Setup-Script-README.pdf"
    },
    {
      title: "Lynx-Relay",
      subtitle: "The Automated Trading Executor",
      description: "The complete playbook for turning TradingView alerts into hands-off trades. Covers setup, exchange configuration, crafting perfect JSON alerts (with examples), and taming the Telegram bot for on-the-go updates.",
      href: "/documents/Webhook-Engine-README.pdf"
    },
    {
      title: "Key Commander",
      subtitle: "The Self-Hosted License Hub",
      description: "Your technical field guide to deploying and managing your own licensing empire. We're talking Docker deployment, Stripe webhook wrangling, and the disaster recovery plan for when your VPS inevitably face-plants.",
      href: "/documents/License-Hub-README.pdf"
    }
  ];
</script>

<svelte:head>
  <title>Documentation - Signal Lynx</title>
  <meta name="description" content="The Owner's Manuals. Downloadable READMEs, setup guides, and technical deep-dives for all Signal Lynx products." />
</svelte:head>

<div class="py-12 px-4 bg-base-100">
  <div class="max-w-3xl mx-auto">
    <div class="text-center mb-16">
      <h1 class="text-4xl md:text-6xl font-bold text-primary">The Owner's Manuals</h1>
      <p class="mt-4 text-xl max-w-2xl mx-auto">
        Don't just wing it. Here are the secret scrolls, the forbidden texts, and... well, they're READMEs. Read 'em before you accidentally summon a demon or, worse, file a support ticket for something that's on page one.
      </p>
    </div>

    <div class="space-y-8">
      {#each documents as doc}
        <div class="card card-bordered bg-base-200 shadow-xl transition-all duration-300 hover:border-accent">
          <div class="card-body">
            <h2 class="card-title text-2xl text-secondary">{doc.title}</h2>
            <p class="font-semibold text-accent -mt-2">{doc.subtitle}</p>
            <p class="mt-4 text-base-content/80">{doc.description}</p>
            <div class="card-actions justify-end mt-4">
              <a href={doc.href} target="_blank" rel="noopener noreferrer" class="btn btn-primary btn-gradient-electric">
                Read the Manual
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
                  <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
                </svg>
              </a>
            </div>
          </div>
        </div>
      {/each}
    </div>
  </div>
</div>
</file>

<file path="src/routes/(marketing)/login/+layout.svelte">
<script lang="ts">
  interface Props {
    children?: import("svelte").Snippet
  }

  let { children }: Props = $props()
</script>

<div
  class="text-center content-center max-w-lg mx-auto min-h-[70vh] pb-12 flex items-center place-content-center"
>
  <div class="flex flex-col w-64 lg:w-80">
    {@render children?.()}
  </div>
</div>
</file>

<file path="src/routes/(marketing)/login/forgot_password/+page.svelte">
<script lang="ts">
  import AuthWrapper from '$lib/components/login/AuthWrapper.svelte';

  let { data } = $props();
</script>

<AuthWrapper view="forgotten_password" {data} />
</file>

<file path="src/routes/(marketing)/login/login_config.ts">
import { ThemeSupa } from "@supabase/auth-ui-shared"
import type { Provider } from "@supabase/supabase-js"

export const oauthProviders = [] as Provider[]

// use the css variables from DaisyUI to style Supabase auth template
export const sharedAppearance = {
  theme: ThemeSupa,
  variables: {
    default: {
      colors: {
        brand: "oklch(var(--p))",
        brandAccent: "oklch(var(--ac))",
        inputText: "oklch(var(--n))",
        brandButtonText: "oklch(var(--pc))",
        messageText: "oklch(var(--b))",
        dividerBackground: "oklch(var(--n))",
        inputLabelText: "oklch(var(--p))", // This is the fix
        defaultButtonText: "oklch(var(--n))",
        anchorTextColor: "oklch(var(--p))",
      },
      fontSizes: {
        baseInputSize: "16px",
      },
    },
  },
  className: {
    button: "authBtn",
  },
}
</file>

<file path="src/routes/(marketing)/search/api.json/+server.ts">
import { buildSearchIndex } from "$lib/build_index";
import { json } from "@sveltejs/kit";

export const prerender = true;

export async function GET({ setHeaders }) {
  const searchData = await buildSearchIndex();
  
  // --- PERFORMANCE UPGRADE ---
  // Cache this response in the user's browser for 1 hour (3600 seconds)
  // and on public caches (like CDNs) for the same duration.
  setHeaders({
    'Cache-Control': 'public, max-age=3600'
  });

  return json(searchData);
}
</file>

<file path="src/routes/(marketing)/sitemap.xml/+server.ts">
import type { RequestHandler } from "@sveltejs/kit"
import * as sitemap from "super-sitemap"
import { WebsiteBaseUrl } from "../../../config"

export const prerender = true

export const GET: RequestHandler = async () => {
  return await sitemap.response({
    origin: WebsiteBaseUrl,
    excludeRoutePatterns: [
      ".*\\(admin\\).*", // i.e. exclude routes within admin group
      "/blog.*", // Exclude the blog and all its posts
    ],
  })
}
</file>

<file path="src/routes/+error.svelte">
<script lang="ts">
  import { page } from "$app/stores";
</script>

<svelte:head>
  <title>Error {$page.status} - Signal Lynx</title>
</svelte:head>

<div class="hero min-h-screen bg-base-100">
  <div class="hero-content text-center">
    <div class="max-w-md">
      <h1 class="text-8xl font-bold text-secondary">{$page.status}</h1>
      <p class="py-4 text-3xl font-bold text-primary">
        Houston, We Have a Glitch.
      </p>
      <p class="text-lg text-base-content/80">
        Looks like you've navigated to a dead signal or our system had a momentary lapse in judgement. These things happen. Here's the diagnostic:
      </p>

      {#if $page.error?.message}
        <div class="my-6 p-4 bg-base-200 rounded-lg text-left">
          <code class="text-accent">
            ERROR: {$page.error.message}
          </code>
        </div>
      {/if}

      <div>
        <a href="/" class="btn btn-primary btn-lg btn-gradient-electric">Return to Command Center</a>
      </div>
    </div>
  </div>
</div>
</file>

<file path="svelte.config.js">
import adapter from "@sveltejs/adapter-auto"
import { vitePreprocess } from "@sveltejs/vite-plugin-svelte"

/** @type {import('@sveltejs/kit').Config} */
const config = {
  kit: {
    adapter: adapter(),
    // allow up to 150kb of style to be inlined with the HTML
    // Faster FCP (First Contentful Paint) by reducing the number of requests
    inlineStyleThreshold: 150000,
    // --- SECURITY HARDENING: CSRF PROTECTION ---
    // This enables SvelteKit's built-in CSRF protection.
    // It will automatically reject any form submissions that do not
    // originate from our own domain.
    csrf: {
      checkOrigin: true,
    }
  },
  preprocess: vitePreprocess(),
}

export default config
</file>

<file path="vite.config.ts">
import { sveltekit } from "@sveltejs/kit/vite";
import { defineConfig } from "vitest/config";

export default defineConfig({
  plugins: [sveltekit()],
  test: {
    include: ["src/**/*.{test,spec}.{js,ts}"],
    globals: true, // allows to skip import of test functions like `describe`, `it`, `expect`, etc.
  },
});
</file>

<file path="email_docs.md">
# Email Setup

SaaS Starter includes email capabilities for sending emails to users, and admins.

There are three types of emails:

- Admin emails: sent to a static admin email address, useful for monitoring app activity like new signups and contact-us form submissions.
- User emails: sent to the user's email address. For example: a welcome email.
- Auth emails: verifing the user's email address and magic links. Auth emails are covered in the main README setup docs, and not covered here.

## Set Up Email

To enable email capabilities, set the following environment variables:

**Important**: The template includes a welcome email, which will be enabled once you set your Resend API key. You should customize the email to fit your brand and content or remove it **BEFORE** you enable the email with environment variables. See below.

- `PRIVATE_RESEND_API_KEY`: a https://resend.com API key. Note, you'll need to verify your 'from' domain with them before you can use their service.
- `PRIVATE_ADMIN_EMAIL`: the email address to which admin emails will be sent. If unset, admin emails will not be sent.
  - `PRIVATE_FROM_ADMIN_EMAIL`: the email address to use as the from address for admin emails (defaults to `PRIVATE_ADMIN_EMAIL` if not set).

## Customize Welcome Email

SaaS Starter includes a welcome email template that you can customize to fit your brand and content. The email is sent to the user's email address when create their profile.

To customize the email:

- edit the properties like company name, from email, and subject in the call to sendTemplatedEmail in src/routes/(admin)/account/api/+page.server.ts
- edit the plaintext email content in src/lib/emails/welcome_email_text.hbs
- edit the html email content in src/lib/emails/welcome_email_html.hbs - don't forget address and preheader text which won't render in a preview, but will in the client's email client.

**Note**: use triple braces for properties in plaintext emails, and double braces for html emails. See the [handlebars documentation](https://handlebarsjs.com/guide/expressions.html#html-escaping) for more information.

You can also delete the welcome email by removing the call to sendTemplatedEmail in src/routes/(admin)/account/api/+page.server.ts

## Adding Admin Emails

Anywhere you'd like to be notified of important events, you can sendan admin email.

Simply add a call to sendAdminEmail() in the appropriate place, passing a subject and body.

## Adding Additional User Emails

You can add more user emails. Create a template in src/lib/emails, using the welcome email as a guide. You should have both a plaintext and html version of the email (see welcome_email_text.hbs and welcome_email_html.hbs for examples), although it will work with just one.

When you want to send the email, call sendUserEmail() with the appropriate parameters, including the name of the email template.

You can also use sendTemplatedEmail() to send emails to any email address.
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="src/lib/emails/welcome_email_html.hbs">
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Welcome to {{companyName}}</title>
    <style media="all" type="text/css">
      @media all {
        .btn-primary table td:hover { background-color: #A855F7 !important; }
        .btn-primary a:hover { background-color: #A855F7 !important; border-color: #A855F7 !important; }
      }
      @media only screen and (max-width: 640px) {
        .main p, .main td, .main span { font-size: 16px !important; }
        .wrapper { padding: 8px !important; }
        .content { padding: 0 !important; }
        .container { padding: 0 !important; padding-top: 8px !important; width: 100% !important; }
        .main { border-left-width: 0 !important; border-radius: 0 !important; border-right-width: 0 !important; }
        .btn table { max-width: 100% !important; width: 100% !important; }
        .btn a { font-size: 16px !important; max-width: 100% !important; width: 100% !important; }
      }
      @media all {
        .ExternalClass { width: 100%; }
        .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div { line-height: 100%; }
        .apple-link a { color: inherit !important; font-family: inherit !important; font-size: inherit !important; font-weight: inherit !important; line-height: inherit !important; text-decoration: none !important; }
        #MessageViewBody a { color: inherit; text-decoration: none; font-size: inherit; font-family: inherit; font-weight: inherit; line-height: inherit; }
      }
    </style>
  </head>
  <body style="font-family: Helvetica, sans-serif; -webkit-font-smoothing: antialiased; font-size: 16px; line-height: 1.3; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; background-color: #0d1117; color: #c9d1d9; margin: 0; padding: 0;">
    <table role="presentation" border="0" cellpadding="0" cellspacing="0" class="body" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; background-color: #0d1117; width: 100%;" width="100%" bgcolor="#0d1117">
      <tr>
        <td style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top;" valign="top"> </td>
        <td class="container" style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; max-width: 600px; padding: 0; padding-top: 24px; width: 600px; margin: 0 auto;" width="600" valign="top">
          <div class="content" style="box-sizing: border-box; display: block; margin: 0 auto; max-width: 600px; padding: 0;">
            <span class="preheader" style="color: transparent; display: none; height: 0; max-height: 0; max-width: 0; opacity: 0; overflow: hidden; mso-hide: all; visibility: hidden; width: 0;">Your Signal Lynx account is active. Time to deploy your arsenal.</span>
            <table role="presentation" border="0" cellpadding="0" cellspacing="0" class="main" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; background: #161b22; border: 1px solid #2a2832; border-radius: 16px; width: 100%; color: #c9d1d9;" width="100%">
              <tr>
                <td class="wrapper" style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; box-sizing: border-box; padding: 24px;" valign="top">
                  <h1 style="color: #F59E0B; font-size: 24px; font-weight: bold; margin: 0; margin-bottom: 24px;">Welcome to the Command Center, Operator.</h1>
                  <p style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: normal; margin: 0; margin-bottom: 16px;">
                    Your account with {{companyName}} is confirmed and your credentials are secure. You're ready to deploy.
                  </p>
                  <p style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: normal; margin: 0; margin-bottom: 16px;">
                    Your next step is to access your dashboard, where you can choose your arsenal, download your tools, and manage your account.
                  </p>
                  <table role="presentation" border="0" cellpadding="0" cellspacing="0" class="btn btn-primary" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; box-sizing: border-box; width: 100%; min-width: 100%;" width="100%">
                    <tbody>
                      <tr>
                        <td align="left" style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; padding-bottom: 16px;" valign="top">
                          <table role="presentation" border="0" cellpadding="0" cellspacing="0" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; width: auto;">
                            <tbody>
                              <tr>
                                <td style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; border-radius: 1rem; text-align: center; background-color: #A855F7;" valign="top" align="center" bgcolor="#A855F7">
                                  <a href="{{WebsiteBaseUrl}}/account" target="_blank" style="border: solid 2px #A855F7; border-radius: 1rem; box-sizing: border-box; cursor: pointer; display: inline-block; font-size: 16px; font-weight: bold; margin: 0; padding: 12px 24px; text-decoration: none; text-transform: capitalize; background-color: #A855F7; border-color: #A855F7; color: #ffffff;">Access Your Dashboard</a>
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                  <p style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: normal; margin: 0; margin-bottom: 16px;">
                    Stay sharp,
                  </p>
                  <p style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: normal; margin: 0; margin-bottom: 16px;">
                    - The {{companyName}} Team
                  </p>
                </td>
              </tr>
            </table>
            <div class="footer" style="clear: both; padding-top: 24px; text-align: center; width: 100%;">
              <table role="presentation" border="0" cellpadding="0" cellspacing="0" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; width: 100%;" width="100%">
                <tr>
                  <td class="content-block" style="font-family: Helvetica, sans-serif; vertical-align: top; color: #9a9ea6; font-size: 12px; text-align: center;" valign="top" align="center">
                    <span class="apple-link" style="color: #9a9ea6; font-size: 12px; text-align: center;">{{companyName}} | Signal-driven automation for operators.</span>
                    <br> Don't like these emails? <a href="{{WebsiteBaseUrl}}/account/settings/change_email_subscription" style="color: #9a9ea6; font-size: 12px; text-align: center; text-decoration: underline;">Unsubscribe</a>.
                  </td>
                </tr>
              </table>
            </div>
          </div>
        </td>
        <td style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top;" valign="top"> </td>
      </tr>
    </table>
  </body>
</html>
</file>

<file path="src/lib/emails/welcome_email_text.hbs">
Welcome to the Command Center, Operator.

Your account with {{companyName}} is confirmed and your credentials are secure. You're ready to deploy.

Your next step is to access your dashboard, where you can choose your arsenal, download your tools, and manage your account.

Access Your Dashboard: {{{WebsiteBaseUrl}}}/account

Stay sharp,
- The {{companyName}} Team

---
To change your email preferences, visit: {{{WebsiteBaseUrl}}}/account/settings/change_email_subscription
</file>

<file path="src/lib/mailer.test.ts">
import { vi, describe, it, expect, beforeEach } from "vitest"

vi.mock("@supabase/supabase-js")
vi.mock("$env/dynamic/private")
vi.mock("resend")

import { createClient, type User } from "@supabase/supabase-js"
import { Resend } from "resend"
import * as mailer from "./mailer"

describe("mailer", () => {
  const mockSend = vi.fn().mockResolvedValue({ id: "mock-email-id" })

  const mockSupabaseClient = {
    auth: {
      admin: {
        getUserById: vi.fn(),
      },
    },
    from: vi.fn().mockReturnThis(),
    select: vi.fn().mockReturnThis(),
    eq: vi.fn().mockReturnThis(),
    single: vi.fn(),
  }

  beforeEach(async () => {
    vi.clearAllMocks()
    const { env } = await import("$env/dynamic/private")
    env.PRIVATE_RESEND_API_KEY = "mock_resend_api_key"
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ;(createClient as any).mockReturnValue(mockSupabaseClient)

    vi.mocked(Resend).mockImplementation(
      () =>
        ({
          emails: {
            send: mockSend,
          },
        }) as unknown as Resend,
    )
  })

  describe("sendUserEmail", () => {
    const mockUser = { id: "user123", email: "user@example.com" }

    it("sends welcome email", async () => {
      mockSupabaseClient.auth.admin.getUserById.mockResolvedValue({
        data: { user: { email_confirmed_at: new Date().toISOString() } },
        error: null,
      })

      mockSupabaseClient.single.mockResolvedValue({
        data: { unsubscribed: false },
        error: null,
      })

      await mailer.sendUserEmail({
        user: mockUser as User,
        subject: "Test",
        from_email: "test@example.com",
        template_name: "welcome_email",
        template_properties: {
          companyName: "Test Company",
          WebsiteBaseUrl: "https://test.com",
        },
      })

      expect(mockSend).toHaveBeenCalled()
      const email = mockSend.mock.calls[0][0]
      expect(email.to).toEqual(["user@example.com"])
    })

    it("should not send email if user is unsubscribed", async () => {
      const originalConsoleLog = console.log
      console.log = vi.fn()

      mockSupabaseClient.auth.admin.getUserById.mockResolvedValue({
        data: { user: { email_confirmed_at: new Date().toISOString() } },
        error: null,
      })

      mockSupabaseClient.single.mockResolvedValue({
        data: { unsubscribed: true },
        error: null,
      })

      await mailer.sendUserEmail({
        user: mockUser as User,
        subject: "Test",
        from_email: "test@example.com",
        template_name: "welcome_email",
        template_properties: {},
      })

      expect(mockSend).not.toHaveBeenCalled()

      expect(console.log).toHaveBeenCalledWith(
        "User unsubscribed. Aborting email. ",
        mockUser.id,
        mockUser.email,
      )

      console.log = originalConsoleLog
    })
  })

  describe("sendTemplatedEmail", () => {
    it("sends templated email", async () => {
      await mailer.sendTemplatedEmail({
        subject: "Test subject",
        from_email: "from@example.com",
        to_emails: ["to@example.com"],
        template_name: "welcome_email",
        template_properties: {
          companyName: "Test Company",
          WebsiteBaseUrl: "https://test.com",
        },
      })

      expect(mockSend).toHaveBeenCalled()
      const email = mockSend.mock.calls[0][0]
      expect(email.from).toEqual("from@example.com")
      expect(email.to).toEqual(["to@example.com"])
      expect(email.subject).toEqual("Test subject")
      expect(email.text).toContain("This is a quick sample of a welcome email")
      expect(email.html).toContain("This is a quick sample of a welcome email")
      expect(email.html).toContain("<html")
      expect(email.html).toContain("https://test.com")
      expect(email.html).toContain("Test Company")
      expect(email.text).toContain("https://test.com")
      expect(email.text).toContain("Test Company")
    })
  })
})
</file>

<file path="src/lib/mailer.ts">
import { Resend } from "resend"
import { env } from "$env/dynamic/private"
import { PRIVATE_SUPABASE_SERVICE_ROLE } from "$env/static/private"
import { PUBLIC_SUPABASE_URL } from "$env/static/public"
import { createClient, type User } from "@supabase/supabase-js"
import type { Database } from "../DatabaseDefinitions"
import handlebars from "handlebars"
import { error } from "@sveltejs/kit";

// Sends an email to the admin email address.
// Does not throw errors, but logs them.
export const sendAdminEmail = async ({
  subject,
  body,
}: {
  subject: string
  body: string
}) => {
  if (!env.PRIVATE_ADMIN_EMAIL) {
    return
  }
  try {
    const resend = new Resend(env.PRIVATE_RESEND_API_KEY)
    const resp = await resend.emails.send({
      from: env.PRIVATE_FROM_ADMIN_EMAIL || env.PRIVATE_ADMIN_EMAIL,
      to: [env.PRIVATE_ADMIN_EMAIL],
      subject: "ADMIN_MAIL: " + subject,
      text: body,
    })

    if (resp.error) {
      console.error("Failed to send admin email, error:", resp.error)
    }
  } catch (e) {
    console.error("Failed to send admin email, error:", e)
  }
}

export const sendUserEmail = async ({
  user,
  subject,
  from_email,
  template_name,
  template_properties,
}: {
  user: User
  subject: string
  from_email: string
  template_name: string
  template_properties: Record<string, string>
}) => {
  const email = user.email
  if (!email) {
    // --- HARDENING UPGRADE ---
    // Throw an explicit error instead of failing silently.
    console.error("Email Error: Attempted to send email to user with no email address.", { userId: user.id });
    throw new Error("User has no email address.");
  }

  const serverSupabase = createClient<Database>(
    PUBLIC_SUPABASE_URL,
    PRIVATE_SUPABASE_SERVICE_ROLE,
    { auth: { persistSession: false } },
  )
  const { data: serviceUserData } = await serverSupabase.auth.admin.getUserById(
    user.id,
  )
  const emailVerified =
    serviceUserData.user?.email_confirmed_at ||
    serviceUserData.user?.user_metadata?.email_verified

  if (!emailVerified) {
    console.warn("Email Aborted: Attempted to send email to unverified address.", { userId: user.id, email });
    // We can choose to fail silently here, as this is an expected state for new users.
    return;
  }

  const { data: profile, error: profileError } = await serverSupabase
    .from("profiles")
    .select("unsubscribed")
    .eq("id", user.id)
    .single()

  if (profileError) {
    // --- HARDENING UPGRADE ---
    console.error("Email Error: Could not fetch user profile to check subscription status.", { userId: user.id, email, error: profileError });
    throw new Error("Failed to fetch user profile.");
  }

  if (profile?.unsubscribed) {
    console.log("Email Aborted: User is unsubscribed.", { userId: user.id, email });
    return;
  }

  await sendTemplatedEmail({
    subject,
    to_emails: [email],
    from_email,
    template_name,
    template_properties,
  })
}

export const sendTemplatedEmail = async ({
  subject,
  to_emails,
  from_email,
  template_name,
  template_properties,
}: {
  subject: string
  to_emails: string[]
  from_email: string
  template_name: string
  template_properties: Record<string, string>
}) => {
  if (!env.PRIVATE_RESEND_API_KEY) {
    console.warn("Email not configured. PRIVATE_RESEND_API_KEY is not set. Skipping email send.");
    return
  }

  let plaintextBody: string | undefined = undefined
  try {
    const textTemplate = await import(
      `./emails/${template_name}_text.hbs?raw`
    ).then((mod) => mod.default)
    const template = handlebars.compile(textTemplate)
    plaintextBody = template(template_properties)
  } catch (e) {
    // ignore, plaintextBody is optional
  }

  let htmlBody: string | undefined = undefined
  try {
    const htmlTemplate = await import(
      `./emails/${template_name}_html.hbs?raw`
    ).then((mod) => mod.default)
    const template = handlebars.compile(htmlTemplate)
    htmlBody = template(template_properties)
  } catch (e) {
    // ignore, htmlBody is optional
  }

  if (!plaintextBody && !htmlBody) {
    console.error(
      "Email Error: No email body templates found. Requires plaintext or html. Template name: ",
      template_name,
    )
    throw new Error(`No email templates found for ${template_name}`);
  }

  try {
    const resend = new Resend(env.PRIVATE_RESEND_API_KEY)
    const emailPayload: any = {
      from: from_email,
      to: to_emails,
      subject: subject,
    }
    if (plaintextBody) emailPayload.text = plaintextBody;
    if (htmlBody) emailPayload.html = htmlBody;

    const { error: sendError } = await resend.emails.send(emailPayload);

    if (sendError) {
      console.error("Email Error: Failed to send email via Resend.", { error: sendError });
      throw new Error(`Resend API Error: ${sendError.message}`);
    }
  } catch (e) {
    console.error("Email Error: Unhandled exception in sendTemplatedEmail.", { error: e });
    throw e; // Re-throw the error to be handled by the caller
  }
}
</file>

<file path="src/routes/(admin)/account/(menu)/+layout.svelte">
<script lang="ts">
  import "../../../../app.css"
  import { writable } from "svelte/store"
  import { setContext } from "svelte"
  import { WebsiteName } from "../../../../config"
  interface Props {
    children?: import("svelte").Snippet
  }

  let { children }: Props = $props()

  const adminSectionStore = writable("")
  setContext("adminSection", adminSectionStore)
  let adminSection: string | undefined = $state()
  adminSectionStore.subscribe((value) => {
    adminSection = value
  })

  function closeDrawer(): void {
    const adminDrawer = document.getElementById(
      "admin-drawer",
    ) as HTMLInputElement
    adminDrawer.checked = false
  }
</script>

<div class="drawer lg:drawer-open">
  <input id="admin-drawer" type="checkbox" class="drawer-toggle" />
  <div class="drawer-content">
    <div class="navbar bg-base-100 lg:hidden">
      <div class="flex-1">
        <a class="btn btn-ghost normal-case text-xl" href="/">{WebsiteName}</a>
      </div>
      <div class="flex-none">
        <div class="dropdown dropdown-end">
          <label for="admin-drawer" class="btn btn-ghost btn-circle">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              ><path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h7"
              /></svg
            >
          </label>
        </div>
      </div>
    </div>
    <div class="container px-6 lg:px-12 py-3 lg:py-6">
      {@render children?.()}
    </div>
  </div>

  <div class="drawer-side">
    <label for="admin-drawer" class="drawer-overlay"></label>
    <ul
      class="menu menu-lg p-4 w-80 min-h-full bg-base-100 lg:border-r text-primary"
    >
      <li>
        <div
          class="normal-case menu-title text-xl font-bold text-primary flex flex-row"
        >
          <a href="/" class="grow">{WebsiteName}</a>
          <label for="admin-drawer" class="lg:hidden ml-3"> ✕ </label>
        </div>
      </li>
      <li>
        <a
          href="/account"
          class={adminSection === "home" ? "active" : ""}
          onclick={closeDrawer}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
            /></svg
          >
          Dashboard
        </a>
      </li>
       <li>
        <a
          href="/account/downloads"
          class={adminSection === "downloads" ? "active" : ""}
          onclick={closeDrawer}
        >
           <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg>
          The Arsenal
        </a>
      </li>
      <li>
        <a
          href="/account/billing"
          class={adminSection === "billing" ? "active" : ""}
          onclick={closeDrawer}
        >
          <svg
            class="h-5 w-5"
            viewBox="0 0 24 24"
            stroke="none"
            fill="currentColor"
          >
            <path
              d="M18,1H6A3,3,0,0,0,3,4V22a1,1,0,0,0,1.8.6L6.829,19.9l1.276,2.552a1,1,0,0,0,.8.549.981.981,0,0,0,.89-.4L12,19.667,14.2,22.6a.983.983,0,0,0,.89.4,1,1,0,0,0,.8-.549L17.171,19.9,19.2,22.6a1,1,0,0,0,.8.4,1,1,0,0,0,1-1V4A3,3,0,0,0,18,1Zm1,18-1.2-1.6a.983.983,0,0,0-.89-.4,1,1,0,0,0-.8.549l-1.276,2.552L12.8,17.4a1,1,0,0,0-1.6,0L9.171,20.105,7.9,17.553A1,1,0,0,0,7.09,17a.987.987,0,0,0-.89.4L5,19V4A1,1,0,0,1,6,3H18a1,1,0,0,1,1,1ZM17,9a1,1,0,0,1-1,1H8A1,1,0,0,1,8,8h8A1,1,0,0,1,17,9Zm-4,4a1,1,0,0,1-1,1H8a1,1,0,0,1,0-2h4A1,1,0,0,1,13,13Z"
            />
          </svg>
          Billing
        </a>
      </li>
       <li>
        <a
          href="/account/settings/reset-machine-id"
          class={adminSection === "reset-machine-id" ? "active" : ""}
          onclick={closeDrawer}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
          Reset Machine ID
        </a>
      </li>
      <li>
        <a
          href="/account/settings"
          class={adminSection === "settings" ? "active" : ""}
          onclick={closeDrawer}
        >
          <svg class="h-5 w-5" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" fill="none">
            <path stroke-linecap="round" stroke-linejoin="round" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
            <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          </svg>
          Settings
        </a>
      </li>

      <li class="mt-auto">
        <a href="/account/sign_out" class="mt-auto text-base">Sign Out</a>
      </li>
    </ul>
  </div>
</div>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "./settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()
  let { profile, user } = data
</script>

<svelte:head>
  <title>Settings</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Operator Settings</h1>

<SettingsModule
  title="Profile"
  editable={false}
  fields={[
    { id: "fullName", label: "Name", initialValue: profile?.full_name ?? "" },
    {
      id: "companyName",
      label: "Company Name",
      initialValue: profile?.company_name ?? "",
    },
    {
      id: "website",
      label: "Company Website",
      initialValue: profile?.website ?? "",
    },
  ]}
  editButtonTitle="Edit Profile"
  editLink="/account/settings/edit_profile"
  editButtonClass="btn-gradient-electric"
/>

<SettingsModule
  title="Email"
  editable={false}
  fields={[{ id: "email", initialValue: user?.email || "" }]}
  editButtonTitle="Change Email"
  editLink="/account/settings/change_email"
  editButtonClass="btn-gradient-electric"
/>

<SettingsModule
  title="Password"
  editable={false}
  fields={[{ id: "password", initialValue: "••••••••••••••••" }]}
  editButtonTitle="Change Password"
  editLink="/account/settings/change_password"
  editButtonClass="btn-gradient-electric"
/>

<SettingsModule
  title="Email Subscription"
  editable={false}
  fields={[
    {
      id: "subscriptionStatus",
      initialValue: profile?.unsubscribed ? "Unsubscribed" : "Subscribed",
    },
  ]}
  editButtonTitle="Change Subscription"
  editLink="/account/settings/change_email_subscription"
/>

<SettingsModule
  title="Danger Zone"
  editable={false}
  dangerous={true}
  fields={[]}
  editButtonTitle="Delete Account"
  editLink="/account/settings/delete_account"
/>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/change_email_subscription/+page.svelte">
<script lang="ts">
  import SettingsModule from "../settings_module.svelte"
  let { data } = $props()
  let { profile } = data
  let unsubscribed = profile?.unsubscribed
</script>

<svelte:head>
  <title>Change Email Subscription</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Email Subscription</h1>

<SettingsModule
  editable={true}
  title="Communications"
  message={unsubscribed
    ? "You are currently UNSUBSCRIBED from marketing and product update emails."
    : "You are currently SUBSCRIBED to marketing and product update emails."}
  saveButtonTitle={unsubscribed ? "Re-subscribe" : "Unsubscribe"}
  successTitle={unsubscribed ? "Subscription Reactivated" : "Unsubscribed"}
  successBody={unsubscribed
    ? "You will now receive our communications."
    : "You have been successfully unsubscribed from future emails."}
  formTarget="/account/api?/toggleEmailSubscription"
  saveButtonClass="btn-gradient-electric"
  fields={[]}
/>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/change_email/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()

  let { user } = data
</script>

<svelte:head>
  <title>Change Email</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Update Email Address</h1>

<SettingsModule
  title="Change Login Email"
  editable={true}
  saveButtonTitle="Update Email"
  successTitle="Email Update Initiated"
  successBody="Signal sent. Check both your old and new inboxes. You must click the confirmation link in both transmissions to finalize the change."
  formTarget="/account/api?/updateEmail"
  saveButtonClass="btn-gradient-electric"
  fields={[
    {
      id: "email",
      label: "New Email",
      initialValue: user?.email ?? "",
      placeholder: "Email address",
    },
  ]}
/>
</file>

<file path="src/routes/(marketing)/license-hub/+page.svelte">
<script lang="ts">
  import { licenseHubProduct } from "$lib/data/products";
  import { onMount } from "svelte";
  import { fly } from 'svelte/transition';
  import { WebsiteBaseUrl } from "../../../config";

  let imageModal: HTMLDialogElement;
  let selectedImageUrl = $state<string | null>(null);

  const ldJson = {
    "@context": "https://schema.org",
    "@type": "SoftwareApplication",
    "name": "Key Commander",
    "operatingSystem": "Linux, Windows, macOS (via Docker)",
    "applicationCategory": "DeveloperTool",
    "offers": {
      "@type": "Offer",
      "price": "5.00",
      "priceCurrency": "USD",
      "priceSpecification": {
        "@type": "PriceSpecification",
        "billingIncrement": "Month"
      }
    },
    "description": "A self-hosted, GUI-driven software license manager for SaaS founders and developers. Integrates with Stripe for automated key generation, subscriptions, and trial management.",
    "url": `${WebsiteBaseUrl}/license-hub`
  }
  const jsonldScript = `<script type="application/ld+json">${
    JSON.stringify(ldJson) + "<"
  }/script>`

  function showImage(imageUrl: string) {
    selectedImageUrl = imageUrl;
    if (imageModal) {
      imageModal.showModal();
    }
  }

  // Close modal when clicking anywhere
  function handleClick(e: MouseEvent) {
    imageModal.close();
  }

  // Close modal with Escape key
  function handleKeyDown(e: KeyboardEvent) {
    if (e.key === "Escape") {
      imageModal.close();
    }
  }

  onMount(() => {
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  });
</script>

<!-- Image Modal -->
<dialog 
  id="image_modal" 
  class="modal cursor-pointer bg-transparent p-0"
  bind:this={imageModal}
  onclick={handleClick}
>
  <div class="flex items-center justify-center w-full h-full">
    {#if selectedImageUrl}
      <img
        src={selectedImageUrl}
        alt="Enlarged view of feature"
        class="max-w-[75vw] max-h-[75vh] object-contain rounded-lg shadow-2xl border-4 border-accent"
      />
    {/if}
  </div>
</dialog>

<svelte:head>
  <title>Self-Hosted License Manager | Key Commander by Signal Lynx</title>
  <meta name="description" content="Stop building licensing servers. Key Commander is a flat-rate, self-hosted software licensing solution with full Stripe integration for SaaS and indie developers." />
  <!-- eslint-disable-next-line svelte/no-at-html-tags -->
  {@html jsonldScript}
</svelte:head>

<!-- HERO -->
<section class="py-16 md:py-24 px-4 bg-base-200 overflow-hidden">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
        <!-- Text Content -->
        <div class="text-center md:text-left" in:fly={{ y: 20, duration: 600, delay: 200 }}>
            <h1 class="text-4xl lg:text-6xl font-bold text-primary leading-tight">
                Stop Building Licensing Servers.
            </h1>
            <p class="mt-4 text-2xl lg:text-3xl font-semibold text-secondary">
                Start Building Your Business.
            </p>
            <p class="mt-6 text-xl max-w-lg mx-auto md:mx-0 text-base-content/80">
              Tired of LaaS bills that punish your growth? Key Commander is the self-hosted, flat-rate licensing engine that puts you back in control of your data, your revenue, and your time.
            </p>
            <div class="mt-8">
                <a href="#product-card" class="btn btn-primary btn-lg btn-gradient-electric">Get Key Commander</a>
            </div>
        </div>

        <!-- Image Content -->
        <div class="flex justify-center" in:fly={{ y: 20, duration: 600, delay: 400 }}>
            <button
                type="button"
                onclick={() => showImage('/images/kc-main-gui.png')}
                class="block w-full transition-all duration-300 ease-in-out hover:scale-105 hover:brightness-110 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg"
                aria-label="Enlarge image of Key Commander Mission Control"
            >
                <img 
                    src="/images/kc-main-gui.png" 
                    alt="Screenshot of the Key Commander Mission Control dashboard" 
                    class="rounded-lg shadow-lg max-w-full border-4 border-accent" 
                />
            </button>
        </div>
    </div>
</section>

<!-- Why Self-Host? -->
<section class="py-16 bg-base-100">
    <div class="max-w-6xl mx-auto text-center px-4">
        <h2 class="text-3xl font-bold text-secondary mb-8">Why Self-Host? Simple: Control.</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div class="p-6 rounded-lg">
                <h4 class="font-bold text-xl text-accent">Your Data, Your Fortress</h4>
                <p class="mt-2 text-base-content/80">Your customer data and license keys live on your server, not ours. Hackers can’t steal what we never have.</p>
            </div>
            <div class="p-6 rounded-lg">
                <h4 class="font-bold text-xl text-accent">Flat, Predictable Cost</h4>
                <p class="mt-2 text-base-content/80">One flat fee. No surprise 'pro-plus-turbo' tier that holds your success hostage next year.</p>
            </div>
            <div class="p-6 rounded-lg">
                <h4 class="font-bold text-xl text-accent">Offline-Ready Tokens</h4>
                <p class="mt-2 text-base-content/80">Your app still works when your user's internet doesn't. That's how you earn customer loyalty.</p>
            </div>
        </div>
    </div>
</section>

<!-- PRODUCT CARD -->
<section id="product-card" class="py-16 px-4 bg-base-200">
  <div class="max-w-7xl mx-auto flex flex-col lg:flex-row gap-8 px-4 justify-center items-stretch">
       <div class="card bg-base-100 shadow-xl flex-1 flex flex-col min-w-[280px] max-w-[400px] border-4 border-transparent transition-all duration-300 hover:border-accent">
            <div class="card-body p-8 flex flex-col">
                <div class="text-center">
                    <h2 class="card-title justify-center text-2xl font-bold text-secondary">{licenseHubProduct.name}</h2>
                    <h3 class="mt-1 text-lg font-normal text-accent">{licenseHubProduct.title}</h3>
                </div>
                <p class="text-base-content/80 mt-4">{licenseHubProduct.tagline}</p>
                
                <ul class="my-6 space-y-3 text-left flex-grow">
                {#each licenseHubProduct.features as feature}
                    <li class="flex items-start gap-3">
                    <svg class="w-6 h-6 text-success shrink-0 mt-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 16.4L6 12.4L7.4 11L10 13.6L16.6 7L18 8.4L10 16.4Z" fill="currentColor"/></svg>
                    <span>{feature}</span>
                    </li>
                {/each}
                </ul>

                <div class="mt-auto pt-4">
                    <p class="text-5xl font-bold text-center">{licenseHubProduct.price}</p>
                    <div class="card-actions justify-center mt-6">
                        <a href={licenseHubProduct.stripe_price_id ? `/account/subscribe/${licenseHubProduct.stripe_price_id}` : '/login'} class="btn btn-primary btn-wide btn-gradient-electric">{licenseHubProduct.ctaLabel}</a>
                    </div>
                    <p class="text-center text-xs text-base-content/50 mt-2">{licenseHubProduct.footnote}</p>
                </div>
            </div>
        </div>
  </div>
</section>

<!-- Supported Providers Banner -->
<section class="bg-base-100 py-10">
  <div class="max-w-5xl mx-auto text-center px-4">
    <h3 class="text-2xl font-bold text-secondary">
      Deep Integration with Stripe
    </h3>
    <p class="mt-2 opacity-70">
      Automate everything from one-time purchases and trials to recurring subscriptions and cancellations.
    </p>
    <div class="mt-6 flex justify-center items-center gap-x-8 gap-y-4 flex-wrap">
      <img src="/logos/stripe.png" alt="Stripe logo" class="h-40" />
    </div>
  </div>
</section>

<!-- How It Works in 4 Steps -->
<section class="bg-base-200 py-10">
  <div class="max-w-6xl mx-auto text-center px-4">
    <h3 class="text-2xl font-bold">
      Your 4-Step Launch Sequence
    </h3>
    <div class="mt-6 grid grid-cols-1 md:grid-cols-4 gap-6">
      <div class="flex flex-col items-center">
        <div class="text-4xl font-bold text-secondary">1</div>
        <h4 class="mt-2 font-semibold">Deploy the Server</h4>
        <p class="opacity-70 mt-1">
          Run our Docker container on any VPS or local machine with a single command.
        </p>
      </div>
      <div class="flex flex-col items-center">
        <div class="text-4xl font-bold text-secondary">2</div>
        <h4 class="mt-2 font-semibold">Configure Your Keys</h4>
        <p class="opacity-70 mt-1">
          Use the secure GUI to enter your Stripe and email details and map your products. No config files.
        </p>
      </div>
      <div class="flex flex-col items-center">
        <div class="text-4xl font-bold text-secondary">3</div>
        <h4 class="mt-2 font-semibold">Integrate Your App</h4>
        <p class="opacity-70 mt-1">
          Use our README and code examples to connect your application to your new licensing endpoint.
        </p>
      </div>
       <div class="flex flex-col items-center">
        <div class="text-4xl font-bold text-secondary">4</div>
        <h4 class="mt-2 font-semibold">Go Live</h4>
        <p class="opacity-70 mt-1">
          Start selling your software with fully automated license delivery and validation.
        </p>
      </div>
    </div>
  </div>
</section>

<!-- Your Command Deck -->
<div class="py-16 bg-base-100">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="text-left">
            <h2 class="text-3xl font-bold text-primary">Your Command Deck</h2>
            <p class="mt-4 text-lg text-base-content/80">
                Manage your entire licensing operation from a single, intuitive desktop GUI. No command lines, no config files. Just pure control.
            </p>
            <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Intuitive Navigation:</b> Jump between licenses, metrics, and logs with a single click.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Focused Workspace:</b> A dynamic interface that gives you the tools you need for the task at hand.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Modern & Responsive:</b> A smooth, desktop-grade GUI that feels like a native application.</span></li>
            </ul>
        </div>
        <div class="flex justify-center">
            <button
                type="button"
                onclick={() => showImage('/images/kc-main-gui.png')}
                class="block w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg"
                aria-label="Enlarge image of Key Commander dashboard"
            >
                <img src="/images/kc-main-gui.png" alt="Screenshot of the Key Commander main dashboard" class="rounded-lg shadow-lg max-w-full border-4 border-accent" />
            </button>
        </div>
    </div>
</div>

<!-- The Automated Engine -->
<section class="py-16 bg-base-200">
  <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
    <div class="flex justify-center md:order-2">
      <button
        type="button"
        onclick={() => showImage('/images/kc-tier-map.png')}
        class="block w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg"
        aria-label="Enlarge image of automated license engine"
      >
        <img
          src="/images/kc-tier-map.png"
          alt="Screenshot showing automated license engine in action"
          class="rounded-lg shadow-lg max-w-full border-4 border-accent"
        />
      </button>
    </div>
    <div class="text-left md:order-1">
      <h2 class="text-3xl font-bold text-primary">The Set-It-and-Forget-It Engine</h2>
      <p class="mt-4 text-lg text-base-content/80">
        Point Key Commander at your Stripe products, pour another energy drink, and get back to building. The engine handles everything from new purchases to renewals and cancellations automatically.
      </p>
      <ul class="mt-6 space-y-3 text-lg text-base-content/80">
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Auto-Issuing:</b> New Stripe orders trigger instant license generation and email delivery.</span></li>
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>24/7 Validation:</b> Every client-side check-in is validated against the live database. No stale keys.</span></li>
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Continuous Sync:</b> Regular checks with Stripe keep statuses, quantities, and trials in lock-step.</span></li>
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Total Product Support:</b> Fully supports one-time buys, recurring subscriptions, and limited-time trials out of the box.</span></li>
      </ul>
    </div>
  </div>
</section>


<!-- Master Control Panel -->
<div class="py-16 bg-base-100">
  <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
    <div class="text-left">
      <h2 class="text-3xl font-bold text-primary">Master Operations Panel</h2>
      <p class="mt-4 text-lg text-base-content/80">
        This is your command center for ops, security, and disaster recovery. All managed from a clean, secure interface.
      </p>
      <ul class="mt-4 space-y-3 text-lg text-base-content/80">
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Centralized Secret Management:</b> Securely store and manage encrypted API keys for Stripe and your email provider.</span></li>
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Automated Emailing:</b> Configure SMTP, Brevo, or SES to automatically deliver license keys and welcome new customers.</span></li>
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Automated Backups:</b> Schedule daily, weekly, or monthly database backups with custom retention policies. Never lose your data.</span></li>
      </ul>
    </div>
    <div class="flex justify-center">
      <button
        type="button"
        onclick={() => showImage('/images/kc-config.gif')}
        class="block w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg"
        aria-label="Enlarge image of master control panel"
      >
        <img
          src="/images/kc-config.gif"
          alt="Animated GIF showing master control panel overview"
          class="rounded-lg shadow-lg max-w-full border-4 border-accent"
        />
      </button>
    </div>
  </div>
</div>

<!-- Ops Automation -->
<section class="py-16 bg-base-200">
    <div class="max-w-6xl mx-auto text-center px-4">
        <h2 class="text-3xl font-bold text-primary mb-8">Core Operations, Automated</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div class="p-6 rounded-lg">
                <h4 class="font-bold text-xl text-accent">🔄 Stripe Reconciliation</h4>
                <p class="mt-2 text-base-content/80">A robotic accountant that fixes Stripe data mismatches before your customers even notice.</p>
            </div>
            <div class="p-6 rounded-lg">
                <h4 class="font-bold text-xl text-accent">🗄️ Automated Backups & Health Checks</h4>
                <p class="mt-2 text-base-content/80">Daily `pg_dumps` and integrity checks, because ‘Oops, I dropped prod’ shouldn’t be a career-ending event.</p>
            </div>
            <div class="p-6 rounded-lg">
                <h4 class="font-bold text-xl text-accent">📈 Live Metrics</h4>
                <p class="mt-2 text-base-content/80">Know your MRR, churn, and who’s trying to pirate your software, all on one neon-lit gauge.</p>
            </div>
        </div>
    </div>
</section>

<!-- Offline Validation -->
<section class="py-16 bg-base-100">
  <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
    <div class="text-left">
      <h2 class="text-3xl font-bold text-primary">Stay Green-Lit, Even Offline</h2>
      <p class="mt-4 text-lg text-base-content/80">
        Key Commander signs a tiny, secure Ed25519 token; your desktop app validates it locally for days or weeks. No internet? No problem—your users keep working, you keep getting paid.
      </p>
    </div>
    <div class="flex justify-center">
      <img
        src="/images/kc-offline-validation.png"
        alt="Diagram showing offline license validation"
        class="rounded-lg shadow-lg w-60 border-4 border-accent"
      />
    </div>
  </div>
</section>

<!-- Admin Controls -->
<div class="py-16 bg-base-200">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
         <div class="md:order-2 text-left">
            <h2 class="text-3xl font-bold text-primary">Take Full Command</h2>
             <p class="mt-4 text-lg text-base-content/80">
                You have ultimate authority. The GUI gives you the power to manage every aspect of your licensing operation, from manual overrides to full data audits.
            </p>
             <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Manual Overrides:</b> Directly edit, suspend, or delete any license from the master dashboard.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Comprehensive Audit Log:</b> Get a complete, immutable record of every critical system and admin action.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Data I/O:</b> Easily import existing keys from a CSV or export your entire license database for analysis.</span></li>
            </ul>
        </div>
        <div class="md:order-1 flex justify-center">
            <button
                type="button"
                onclick={() => showImage('/images/kc-audit-log.png')}
                class="block w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg"
                aria-label="Enlarge image of admin controls"
            >
                <img 
                    src="/images/kc-audit-log.png" 
                    alt="Screenshot of the license management tab in Key Commander" 
                    class="rounded-lg shadow-lg max-w-full border-4 border-accent"
                />
            </button>
        </div>
    </div>
</div>

<!-- Anti-Piracy -->
<div class="py-16 bg-base-100">
  <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
    <div class="text-left">
      <h2 class="text-3xl font-bold text-primary">Stop Piracy in its Tracks</h2>
       <p class="mt-4 text-lg text-base-content/80">
        Protect your hard work with built-in tools designed to prevent license sharing and trial abuse, keeping your revenue stream secure.
      </p>
      <ul class="mt-4 space-y-3 text-lg text-base-content/80">
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Machine ID Locking:</b> Tie each license to a unique machine fingerprint to prevent key sharing across multiple devices.</span></li>
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Self-Serve Resets:</b> Provide a secure, time-limited pathway for legitimate users to reset their machine activation if they get a new computer.</span></li>
        <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Burn Trial Abusers:</b> Prevent the same machine from activating multiple free trials for the same product.</span></li>
      </ul>
    </div>
    <div class="flex justify-center">
      <img
        src="/images/piracy_SignalLynx.png"
        alt="Iconography representing anti-piracy measures"
        class="rounded-lg shadow-lg w-60 border-4 border-accent"
      />
    </div>
  </div>
</div>


<!-- Audit Log Section -->
<div class="py-16 bg-base-200">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="md:order-2 text-left">
            <h2 class="text-3xl font-bold text-primary">The System's Black Box Recorder</h2>
             <p class="mt-4 text-lg text-base-content/80">
                When something goes wrong—or right—you'll know exactly what happened and when. Our audit log is your source of truth.
            </p>
             <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Complete Transparency:</b> Get a detailed, timestamped record of every significant system action.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Track Admin Changes:</b> See every license modification, deletion, or creation for full accountability.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Monitor Security Events:</b> Review failed validation attempts, webhook processing, and system unlocks.</span></li>
            </ul>
        </div>
        <div class="md:order-1 flex justify-center">
            <button
                type="button"
                onclick={() => showImage('/images/kc-audit-log.png')}
                class="block w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg"
                aria-label="Enlarge audit log screenshot"
            >
                <img src="/images/kc-audit-log.png" alt="Screenshot of the Audit Log tab in Key Commander" class="rounded-lg shadow-lg max-w-full border-4 border-accent" />
            </button>
        </div>
    </div>
</div>

<!-- Metrics Tracker and Automated Health Checks Section -->
<div class="py-16 bg-base-100">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="text-left">
            <h2 class="text-3xl font-bold text-primary">Keep Your Finger on the Pulse</h2>
             <p class="mt-4 text-lg text-base-content/80">
                Data-driven decisions start here. Track your growth, monitor system health, and sleep well knowing your data is safe.
            </p>
            <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Track Business Metrics:</b> View a dashboard of key metrics like total licenses, active vs. trial counts, and conversion trends.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Automated Health Checks:</b> A scheduled service monitors for data integrity issues like duplicate keys or invalid activations.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Automated Backups:</b> Robust, automated daily, weekly, or monthly database backups with custom retention policies.</span></li>
            </ul>
        </div>
        <div class="flex justify-center">
            <button
                type="button"
                onclick={() => showImage('/images/kc-metrics.png')}
                class="block w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg"
                aria-label="Enlarge metrics dashboard screenshot"
            >
                <img src="/images/kc-metrics.png" alt="Screenshot of the Metrics dashboard in Key Commander" class="rounded-lg shadow-lg max-w-full border-4 border-accent" />
            </button>
        </div>
    </div>
</div>

<!-- Licensing Admin Rights Section -->
<div class="py-16 bg-base-200">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="md:order-2 text-left">
            <h2 class="text-3xl font-bold text-primary">Wield Total License Control</h2>
            <p class="mt-4 text-lg text-base-content/80">
                Handle any customer request or business need on the fly. You have the final say on every key in your system.
            </p>
             <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Create Custom Licenses:</b> Generate developer, promotional, or special-use keys instantly for any use case.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Modify On-Demand:</b> Directly edit any license to change its status, expiration, or activation count.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Revoke with a Click:</b> Instantly delete or suspend a license to manage access for refunds or TOS violations.</span></li>
            </ul>
        </div>
        <div class="md:order-1 flex justify-center">
            <button
                type="button"
                onclick={() => showImage('/images/kc-licenses.png')}
                class="block w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg"
                aria-label="Enlarge license management screenshot"
            >
                <img src="/images/kc-licenses.png" alt="Screenshot of the license management tab showing admin controls" class="rounded-lg shadow-lg max-w-full border-4 border-accent" />
            </button>
        </div>
    </div>
</div>

<!-- System Requirements -->
<section class="py-16 bg-base-100">
  <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
    <div class="md:order-2 text-left">
      <h2 class="text-3xl font-bold text-primary">Deploy on a Dime</h2>
       <p class="mt-4 text-lg text-base-content/80">
        Key Commander is a lightweight powerhouse. It flies on tiny, low-cost VPS boxes, and our Docker-first approach means you can deploy with a single line of code.
      </p>
      <ul class="mt-6 space-y-3 text-lg text-base-content/80">
        <li>📦 <b>Minimal Specs:</b> 2 vCPUs, 8 GB of RAM, and 100 GB of storage is plenty.</li>
        <li>🐳 <b>Docker with GUI Setup:</b> No root access. No `.env` files. No drama.</li>
        <li>🔑 <b>TLS 1.3 by default:</b> Locks down every admin session, end-to-end.</li>
      </ul>
    </div>
    <div class="md:order-1 flex justify-center">
      <pre class="bg-base-200 text-base-content p-4 rounded-lg text-left text-sm overflow-auto w-full"><code>docker run -e MASTER_PASS=SuperSecret \
  -p 8000:8000 ghcr.io/signallynx/key-commander:latest</code></pre>
    </div>
  </div>
</section>

<!-- RBAC -->
<section class="py-16 bg-base-200">
  <div class="max-w-6xl mx-auto text-center px-4">
    <h2 class="text-3xl font-bold text-primary">Role-Based Access, Zero "Oops"</h2>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8 text-left">
      <div class="p-6 rounded-lg">
        <h4 class="font-semibold text-accent text-xl">👑 Owner</h4>
        <p class="mt-2 text-base-content/70">All the buttons, all the power. Full system control.</p>
      </div>
      <div class="p-6 rounded-lg">
        <h4 class="font-semibold text-accent text-xl">🛠️ Support</h4>
        <p class="mt-2 text-base-content/70">Reset activations and view logs. No "oops, I deleted the database" permissions here.</p>
      </div>
      <div class="p-6 rounded-lg">
        <h4 class="font-semibold text-accent text-xl">🔍 Auditor</h4>
        <p class="mt-2 text-base-content/70">Read-only access for your compliance team or nosey investors.</p>
      </div>
    </div>
  </div>
</section>

<!-- HA & Replica -->
<section class="py-16 bg-base-100">
  <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
    <div class="text-left">
      <h2 class="text-3xl font-bold text-primary">Built to Survive a Face-Plant</h2>
      <p class="mt-4 text-lg text-base-content/80">
        Point Key Commander at a hot-standby Postgres read replica—tokens keep flowing and validations keep working even if your primary server melts.
      </p>
      <ul class="mt-4 space-y-3 text-lg text-base-content/80">
        <li>🟢 Primary handles all writes and reads.</li>
        <li>🔵 Replica serves read-only validation requests.</li>
        <li>🛠️ One environment variable to switch over in a disaster.</li>
      </ul>
    </div>
    <div class="flex justify-center">
      <img src="/images/kc-ha-diagram.png" alt="Primary-replica diagram" class="rounded-lg shadow-lg border-4 border-accent max-w-full" />
    </div>
  </div>
</section>



<!-- Roadmap -->
<section class="py-16 bg-base-200">
  <div class="max-w-4xl mx-auto text-center px-4">
    <h2 class="text-3xl font-bold text-primary">Your Wish is Our Command</h2>
    <p class="mt-4 text-lg text-base-content/80">
      Our roadmap is built by the community. Top-voted features from users like you get built next. Let us know what you need to be successful.
    </p>
  </div>
</section>


<!-- Mini-FAQ -->
<section class="py-16 bg-base-100">
  <div class="max-w-4xl mx-auto text-center px-4">
    <h3 class="text-2xl font-bold">Fast Answers</h3>
    <ul class="mt-6 space-y-4 max-w-3xl mx-auto text-left text-base-content/80">
      <li class="p-4 bg-base-200 rounded-lg"><b>Is setup hard?</b> Nah—<code>docker run -e MASTER_PASS=**** kc-image</code> and you’re live. ✔️</li>
      <li class="p-4 bg-base-200 rounded-lg"><b>Can I import old keys?</b> Yep. Drop a CSV from Gumroad or wherever, click “Import,” and you're done. 🔄</li>
    </ul>
  </div>
</section>

<!-- TECH SPECS ACCORDION -->
<section class="bg-base-200 py-12">
  <div class="max-w-4xl mx-auto px-4">
    <div class="collapse collapse-arrow bg-base-100 mb-4">
      <input type="radio" name="tech-accordion" checked />
      <div class="collapse-title text-xl font-bold">What's the tech stack?</div>
      <div class="collapse-content">
        <p class="opacity-80">
          A high-performance FastAPI backend with a PostgreSQL database. The admin dashboard is a modern desktop GUI built with Flet/Flutter. It's fast, reliable, and production-grade.
        </p>
      </div>
    </div>
    <div class="collapse collapse-arrow bg-base-100 mb-4">
      <input type="radio" name="tech-accordion" />
      <div class="collapse-title text-xl font-bold">How does offline validation work?</div>
      <div class="collapse-content">
        <p class="opacity-80">
          The server uses the Ed25519 digital signature algorithm to issue secure, digitally signed tokens to your client software. These tokens can be validated offline by your application for their entire duration, ensuring your users can always get their work done.
        </p>
      </div>
    </div>
    <div class="collapse collapse-arrow bg-base-100">
       <input type="radio" name="tech-accordion" />
      <div class="collapse-title text-xl font-bold">How does it prevent piracy?</div>
       <div class="collapse-content">
        <p class="opacity-80">
          Each license key is tied to a specific number of machine activations (which you control). Our validation endpoint tracks these unique machine IDs to prevent overuse. We also "burn" machine IDs from expired trials to stop users from repeatedly signing up on the same computer.
        </p>
      </div>
    </div>
     <p class="mt-4 text-center">
      Need more answers? <a href="/faq" class="link link-primary">Check out the full FAQ →</a>
    </p>
  </div>
</section>

<!-- FINAL CTA -->
<section class="bg-base-100 py-16 text-center px-4">
  <h2 class="text-3xl md:text-5xl font-bold text-primary">Ready to Take Command?</h2>
  <p class="mt-4 text-xl max-w-2xl mx-auto">
    Get the Signal Lynx Key Commander and unlock your business's true potential.
  </p>
  <a href="#product-card"><button class="btn btn-primary btn-lg mt-6 px-12 btn-gradient-electric">Start 7-Day Trial</button></a>
</section>
</file>

<file path="src/routes/(marketing)/login/+layout.ts">
import {
  PUBLIC_SUPABASE_ANON_KEY,
  PUBLIC_SUPABASE_URL,
} from "$env/static/public"
import {
  createBrowserClient,
  createServerClient,
  isBrowser,
} from "@supabase/ssr"
import { redirect } from "@sveltejs/kit"
import { load_helper } from "$lib/load_helpers.js"

export const load = async ({ fetch, data, depends }) => {
  depends("supabase:auth")

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies
          },
        },
      })

  // Redirect if already logged in
  const { session, user } = await load_helper(data.session, supabase)
  if (session && user) {
    redirect(303, "/account")
  }

  const url = data.url

  return { supabase, url }
}
</file>

<file path="src/routes/(marketing)/login/sign_up/+page.svelte">
<script lang="ts">
  import AuthWrapper from '$lib/components/login/AuthWrapper.svelte';

  let { data } = $props();
</script>

<AuthWrapper view="sign_up" {data} />
</file>

<file path="src/routes/(marketing)/trading-automation/+page.svelte">
<script lang="ts">
  import { automationProducts } from "$lib/data/products";
  import { onMount } from "svelte";
  import { fly } from 'svelte/transition';
  import { WebsiteBaseUrl } from "../../../config";

  let imageModal: HTMLDialogElement;
  let selectedImageUrl = $state<string | null>(null);
  
  const ldJson = {
    "@context": "https://schema.org",
    "@type": "SoftwareApplication",
    "name": "Signal Lynx Trading Automation Suite",
    "operatingSystem": "Windows",
    "applicationCategory": "FinanceApplication",
    "offers": [
      {
        "@type": "Offer",
        "price": "1.00",
        "priceCurrency": "USD",
        "name": "Signal Shield"
      },
      {
        "@type": "Offer",
        "price": "5.00",
        "priceCurrency": "USD",
        "priceSpecification": {
          "@type": "PriceSpecification",
          "billingIncrement": "Month"
        },
        "name": "Lynx-Relay"
      }
    ],
    "description": "A suite of self-hosted tools to automate TradingView alerts into real-money trades on major exchanges like Kraken, Binance.US, and Gemini.",
    "url": `${WebsiteBaseUrl}/trading-automation`
  }
  const jsonldScript = `<script type="application/ld+json">${
    JSON.stringify(ldJson) + "<"
  }/script>`

  function showImage(imageUrl: string) {
    selectedImageUrl = imageUrl;
    if (imageModal) {
      imageModal.showModal();
    }
  }

  // Close modal when clicking anywhere
  function handleClick(e: MouseEvent) {
    imageModal.close();
  }

  // Close modal with Escape key
  function handleKeyDown(e: KeyboardEvent) {
    if (e.key === "Escape") {
      imageModal.close();
    }
  }

  onMount(() => {
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  });
</script>

<!-- Image Modal -->
<dialog 
  id="image_modal" 
  class="modal cursor-pointer bg-transparent p-0"
  bind:this={imageModal}
  onclick={handleClick}
>
  <div class="flex items-center justify-center w-full h-full">
    {#if selectedImageUrl}
      <img
        src={selectedImageUrl}
        alt="Enlarged view of feature"
        class="max-w-[75vw] max-h-[75vh] object-contain rounded-lg shadow-2xl border-4 border-accent"
      />
    {/if}
  </div>
</dialog>


<svelte:head>
  <title>TradingView Webhook Automation | Signal Lynx</title>
  <meta name="description" content="Turn TradingView alerts into hands-free trades. Our self-hosted webhook engine gives you full control and security for automated trading on Kraken, Binance, and Gemini." />
  <!-- eslint-disable-next-line svelte/no-at-html-tags -->
  {@html jsonldScript}
</svelte:head>


<!-- HERO -->
<section class="py-16 md:py-24 px-4 bg-base-200 overflow-hidden">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
        <!-- Text Content -->
        <div class="text-center md:text-left" in:fly={{ y: 20, duration: 600, delay: 200 }}>
            <h1 class="text-4xl lg:text-6xl font-bold text-primary leading-tight">
                Your Edge is Automation.
            </h1>
            <p class="mt-4 text-2xl lg:text-3xl font-semibold text-secondary">
                Our Edge is Security.
            </p>
            <p class="mt-6 text-xl max-w-lg mx-auto md:mx-0 text-base-content/80">
              You've heard "Not Your Keys, Not Your Coins." We built our entire company on that principle. Our tools run on your hardware, so your API keys never see the cloud. Period.
            </p>
            <div class="mt-8">
                <a href="#cards" class="btn btn-primary btn-lg btn-gradient-electric">Deploy the Arsenal</a>
            </div>
        </div>

        <!-- Image Content (Non-Interactive) -->
        <div class="flex justify-center transition-all duration-300 ease-in-out hover:scale-105" in:fly={{ y: 20, duration: 600, delay: 400 }}>
            <img 
                src="/images/ta-main-gui.png" 
                alt="Screenshot of the Lynx-Relay Mission Control dashboard" 
                class="rounded-lg shadow-lg max-w-full border-4 border-accent" 
            />
        </div>
    </div>
</section>

<!-- SECURITY BANNER -->
<section class="bg-base-100 py-8">
  <div class="max-w-4xl mx-auto text-center px-4">
    <h3 class="text-2xl font-bold text-secondary">Algorithmic Trading Without Compromise</h3>
    <p class="opacity-70 mt-2">
      Easy to deploy. Radically secure. Utterly private.
    </p>
  </div>
</section>

<!-- PRODUCT CARDS -->
<section id="cards" class="py-16 px-4 bg-base-200">
  <div class="max-w-7xl mx-auto flex flex-col lg:flex-row gap-8 px-4 justify-center items-stretch">
    {#each automationProducts as product (product.id)}
       <div class="card bg-base-100 shadow-xl flex-1 flex flex-col min-w-[280px] max-w-[400px] border-4 border-transparent transition-all duration-300 hover:border-accent">
            <div class="card-body p-8 flex flex-col">
                <div class="text-center">
                    <h2 class="card-title justify-center text-2xl font-bold text-secondary">{product.name}</h2>
                    <h3 class="mt-1 text-lg font-normal text-accent">{product.title}</h3>
                </div>
                <p class="text-base-content/80 mt-4">{product.tagline}</p>
                
                <ul class="my-6 space-y-3 text-left flex-grow">
                {#each product.features as feature}
                    <li class="flex items-start gap-3">
                    <svg class="w-6 h-6 text-success shrink-0 mt-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 16.4L6 12.4L7.4 11L10 13.6L16.6 7L18 8.4L10 16.4Z" fill="currentColor"/></svg>
                    <span>{feature}</span>
                    </li>
                {/each}
                </ul>

                <div class="mt-auto pt-4">
                    <p class="text-5xl font-bold text-center">{product.price}</p>
                    <div class="card-actions justify-center mt-6">
                        <a href={product.stripe_price_id ? `/account/subscribe/${product.stripe_price_id}` : '/login'} class="btn btn-primary btn-wide btn-gradient-electric">{product.ctaLabel}</a>
                    </div>
                    <p class="text-center text-xs text-base-content/50 mt-2">{product.footnote}</p>
                </div>
            </div>
        </div>
    {/each}
  </div>
</section>

<!-- Supported Exchanges -->
<section class="bg-base-100 py-10">
  <div class="max-w-4xl mx-auto text-center px-4">
    <h3 class="text-2xl font-bold text-secondary">
      Deploy on Your Favorite Spot Exchanges
    </h3>
    <div class="mt-6 flex justify-center items-center gap-8">
      <img src="/logos/kraken.png" alt="Kraken logo" class="h-40" />
      <img src="/logos/binanceus.png" alt="Binance US logo" class="h-40" />
      <img src="/logos/gemini.png" alt="Gemini logo" class="h-40" />
    </div>
    <p class="mt-4 opacity-70">
      Direct API connections to Kraken, Binance.US, and Gemini. Zero middlemen, zero compromises.
    </p>
  </div>
</section>

<!-- How It Works in 3 Steps -->
<section class="bg-base-200 py-10">
  <div class="max-w-4xl mx-auto text-center px-4">
    <h3 class="text-2xl font-bold">
      Your 3-Step Deployment
    </h3>
    <div class="mt-6 grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="flex flex-col items-center">
        <div class="text-4xl font-bold text-secondary">1</div>
        <h4 class="mt-2 font-semibold">Fortify Your Rig</h4>
        <p class="opacity-70 mt-1">
          Run the one-click Signal Shield installer to harden and prime your PC for automation.
        </p>
      </div>
      <div class="flex flex-col items-center">
        <div class="text-4xl font-bold text-secondary">2</div>
        <h4 class="mt-2 font-semibold">Arm the Relay</h4>
        <p class="opacity-70 mt-1">
          Launch Lynx-Relay and load your encrypted exchange keys into the vault.
        </p>
      </div>
      <div class="flex flex-col items-center">
        <div class="text-4xl font-bold text-secondary">3</div>
        <h4 class="mt-2 font-semibold">Go Weapons-Hot</h4>
        <p class="opacity-70 mt-1">
          Point your TradingView alerts to your webhook. Watch signals become trades.
        </p>
      </div>
    </div>
  </div>
</section>

<!-- Signal Shield Details -->
<section class="py-16 bg-base-100">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="text-left">
            <h2 class="text-3xl font-bold text-secondary">Signal Shield Installer</h2>
            <h3 class="text-2xl font-bold text-primary mt-2">Your One-Button Bodyguard</h3>
            <p class="mt-4 text-lg text-base-content/80">
                Signal Shield is your one-click fortress. It instantly locks down and optimizes any Windows PC, turning it into a rock-solid webhook receiver ready for 24/7 automated trading. It handles the complex server config so you don't have to.
            </p>
             <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Fortress Mode: Activated.</b> Get your PC trade-ready in minutes, no IT degree required.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>VIP-Only Access:</b> Creates a secure tunnel that only accepts signals from trusted sources like TradingView.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Always-On Reliability:</b> Configures core services to auto-start and stay synced, because the market never sleeps.</span></li>
            </ul>
        </div>
        <div class="flex justify-center">
            <img src="/images/ta-setup-script.png" alt="Screenshot of the Signal Lynx setup script running in a PowerShell terminal" class="rounded-lg shadow-lg max-w-full border-4 border-accent" />
        </div>
    </div>
</section>

<!-- Lynx-Relay Banner -->
<section class="py-16 bg-base-200 text-center">
  <div class="max-w-3xl mx-auto px-4">
    <h2 class="text-4xl font-bold text-secondary">Lynx-Relay Engine</h2>
    <p class="mt-4 text-xl text-base-content/80">
        With your rig fortified, it's time to deploy the real weapon. Lynx-Relay is your private, self-hosted command center where TradingView alerts become real-money trades. No cloud detours, no shared servers, just a direct, encrypted line from your strategy to the exchange.
    </p>
  </div>
</section>

<!-- LYNX-RELAY WORKFLOW -->
<section class="py-16 bg-base-100">
  <div class="max-w-7xl mx-auto px-4">
    <h2 class="text-3xl font-bold text-primary mb-12 text-center">The Workflow: Direct, Secure, and All Yours</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
      <div class="flex items-center justify-center">
        <img 
          src="/images/LynxRelay_FlowChart.png" 
          alt="Flowchart showing TradingView alerts sent to Signal Lynx, which communicates with exchanges and sends notifications to Telegram"
          class="rounded-lg shadow-2xl border-4 border-accent"
        />
      </div>
      <div class="space-y-6">
        <div class="flex items-start gap-4">
          <div class="flex-shrink-0 w-8 h-8 rounded-full bg-secondary text-secondary-content flex items-center justify-center font-bold">1</div>
          <div>
            <h4 class="font-bold text-lg">Signal Fired</h4>
            <p class="opacity-80">Your TradingView strategy identifies an opportunity and fires a webhook to your unique, secure URL.</p>
          </div>
        </div>
        <div class="flex items-start gap-4">
          <div class="flex-shrink-0 w-8 h-8 rounded-full bg-secondary text-secondary-content flex items-center justify-center font-bold">2</div>
          <div>
            <h4 class="font-bold text-lg">Secure Reception</h4>
            <p class="opacity-80">Signal Shield validates the alert on your local machine, rejecting all other traffic.</p>
          </div>
        </div>
        <div class="flex items-start gap-4">
          <div class="flex-shrink-0 w-8 h-8 rounded-full bg-secondary text-secondary-content flex items-center justify-center font-bold">3</div>
          <div>
            <h4 class="font-bold text-lg">Local Execution</h4>
            <p class="opacity-80">Lynx-Relay uses your local API keys to communicate directly with the exchange, place the order, and monitor for fills.</p>
          </div>
        </div>
         <div class="flex items-start gap-4">
          <div class="flex-shrink-0 w-8 h-8 rounded-full bg-secondary text-secondary-content flex items-center justify-center font-bold">4</div>
          <div>
            <h4 class="font-bold text-lg">Instant Confirmation</h4>
            <p class="opacity-80">You get real-time Telegram notifications as your orders are placed and filled. No delays, no second-guessing.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Main GUI Screen -->
<section class="py-16 bg-base-200">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="text-left">
            <h2 class="text-3xl font-bold text-primary">Mission Control: Online</h2>
            <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Total Situational Awareness:</b> A single green light for "go." No guessing if your system is live.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Effortless Navigation:</b> One-click access to your vault, trade history, and connectivity hub.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>License Status, Front & Center:</b> No surprise expirations. See your subscription status in real time.</span></li>
            </ul>
        </div>
        <div class="flex justify-center">
            <img src="/images/ta-main-gui.png" alt="Screenshot of the Lynx-Relay main screen" class="rounded-lg shadow-lg max-w-full max-h-[600px] object-contain border-4 border-accent" />
        </div>
    </div>
</section>

<!-- Key Vault -->
<section class="py-16 bg-base-100">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="md:order-2 text-left">
            <h2 class="text-3xl font-bold text-primary">The Vault: Fort Knox for Your API Keys</h2>
            <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Military-Grade Encryption:</b> Every key is encrypted on your local disk. Only your master password opens the vault.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Master Password Protection:</b> The entire application remains inert and locked until you provide your unique password.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Organized & Secure:</b> Separate, encrypted tabs for your Telegram bot and each exchange account.</span></li>
            </ul>
        </div>
        <div class="md:order-1 flex justify-center items-center space-x-4">
            <button
                type="button"
                onclick={() => showImage('/images/ta-setup-1.png')}
                class="w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg flex-1 min-w-0"
                aria-label="Enlarge Lynx-Relay setup screen"
            >
                <img 
                    src="/images/ta-setup-1.png" 
                    alt="Screenshot of the Lynx-Relay setup screen" 
                    class="rounded-lg shadow-lg object-contain border-4 border-accent max-h-[600px]"
                />
            </button>
            <button
                type="button"
                onclick={() => showImage('/images/ta-setup-2.png')}
                class="w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg flex-1 min-w-0 hidden lg:block"
                aria-label="Enlarge Lynx-Relay API key setup screen"
            >
                <img 
                    src="/images/ta-setup-2.png" 
                    alt="Screenshot of the Lynx-Relay API key setup screen" 
                    class="rounded-lg shadow-lg object-contain border-4 border-accent max-h-[600px]"
                />
            </button>
        </div>
    </div>
</section>

<!-- Insights -->
<section class="py-16 bg-base-200">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="text-left">
            <h2 class="text-3xl font-bold text-primary">Get Actionable Intel</h2>
            <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Complete Signal Audit:</b> Get a timestamped log of every alert received and its final outcome. No more black boxes.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Live P&L Tracking:</b> See your open positions and review the profitability of every closed trade to sharpen your strategies.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Unified Trade History:</b> Consolidate trade data from all your connected exchanges into a single, clean interface.</span></li>
            </ul>
        </div>
        <div class="flex justify-center items-center space-x-4">
            <button
                type="button"
                onclick={() => showImage('/images/ta-alert-history.png')}
                class="w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg flex-1 min-w-0"
                aria-label="Enlarge Alert History screenshot"
            >
                <img 
                    src="/images/ta-alert-history.png" 
                    alt="Screenshot of the Alert History tab in the Lynx-Relay" 
                    class="rounded-lg shadow-lg object-contain border-4 border-accent max-h-[600px]"
                />
            </button>
            <button
                type="button"
                onclick={() => showImage('/images/ta-history.png')}
                class="w-full transition-transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-accent rounded-lg flex-1 min-w-0 hidden lg:block"
                aria-label="Enlarge History tab screenshot"
            >
                <img 
                    src="/images/ta-history.png" 
                    alt="Screenshot of the History tab in the Lynx-Relay" 
                    class="rounded-lg shadow-lg object-contain border-4 border-accent max-h-[600px]"
                />
            </button>
        </div>
    </div>
</section>

<!-- Connectivity Hub -->
<section class="py-16 bg-base-100">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="md:order-2 text-left">
            <h2 class="text-3xl font-bold text-primary">Run Your Comms Check</h2>
            <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Instant Health Status:</b> A simple, color-coded API status gives you an immediate 'go' or 'no-go' on every connection.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Eliminate the Guesswork:</b> Quickly identify and resolve API key or connectivity issues without digging through logs.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Proactive Diagnostics:</b> Click "Test Connections" to run a live test of all exchange links and confirm your keys are valid.</span></li>
            </ul>
        </div>
        <div class="md:order-1 flex justify-center">
            <img src="/images/ta-exchanges.png" alt="Screenshot of the Exchanges tab in the Lynx-Relay" class="rounded-lg shadow-lg max-w-full max-h-[600px] object-contain border-4 border-accent" />
        </div>
    </div>
</section>

<!-- Telegram Notifications -->
<section class="py-16 bg-base-200">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center px-4">
        <div class="text-left">
            <h2 class="text-3xl font-bold text-primary">Get Eyes-On, Anywhere</h2>
             <ul class="mt-4 space-y-3 text-lg text-base-content/80">
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>24/7 Field Updates:</b> Instant push notifications to your phone for every key action your bot takes.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Full Action Log:</b> Receive detailed alerts for new order requests, successful placements, and final fills.</span></li>
                <li class="flex items-start gap-3"><span class="text-success mt-1">✓</span><span><b>Stay in Command:</b> Keep a constant pulse on your automated strategies and protect your funds, even on the go.</span></li>
            </ul>
        </div>
        <div class="flex justify-center">
            <img src="/images/ta-telegram.png" alt="Screenshot of Signal Lynx notifications in the Telegram app on a phone" class="max-h-[600px] rounded-lg shadow-lg border-4 border-accent" />
        </div>
    </div>
</section>

<!-- TECH SPECS ACCORDION -->
<section class="bg-base-100 py-12">
  <div class="max-w-4xl mx-auto px-4">
    <div class="collapse collapse-arrow bg-base-200 mb-4">
      <input type="radio" name="tech-accordion" checked /> 
      <div class="collapse-title text-xl font-bold">How does Signal Shield harden my PC, exactly?</div>
      <div class="collapse-content">
        <p class="opacity-80">
          It deploys NGINX as a reverse proxy, fetches a free Let’s Encrypt TLS certificate for bank-grade encryption, and writes multiple firewall rules to only allow traffic from major charting providers. It's a full security overhaul in one click.
        </p>
      </div>
    </div>
    <div class="collapse collapse-arrow bg-base-200 mb-4">
      <input type="radio" name="tech-accordion" />
      <div class="collapse-title text-xl font-bold">What’s actually protecting the Key Vault?</div>
      <div class="collapse-content">
        <p class="opacity-80">
          Your license key, webhook secret, Telegram token, and every exchange API key are individually encrypted on your local disk using advanced, industry-standard algorithms. The only thing that can decrypt them is your master password.
        </p>
      </div>
    </div>
    <div class="collapse collapse-arrow bg-base-200 mb-4">
      <input type="radio" name="tech-accordion" />
      <div class="collapse-title text-xl font-bold">How does Lynx-Relay know what my alert means?</div>
      <div class="collapse-content">
        <p class="opacity-80">
          You tell it exactly what to do via a simple JSON package in your TradingView alert message. You can define the exchange, pair, order type, quantity, stop loss, take profit, and more. It's a command, not a suggestion. We provide full JSON examples in the docs.
        </p>
      </div>
    </div>
    <div class="collapse collapse-arrow bg-base-200">
      <input type="radio" name="tech-accordion" />
      <div class="collapse-title text-xl font-bold">Does Lynx-Relay just "fire and forget" my orders?</div>
       <div class="collapse-content">
        <p class="opacity-80">
          Absolutely not. It actively monitors your orders with the exchange and uses advanced mitigation routines to ensure they get filled. It's especially useful for scalpers who need confidence that their limit orders won't be left hanging.
        </p>
      </div>
    </div>
     <p class="mt-4 text-center">
      Need more answers? <a href="/faq" class="link link-primary">Check out the full FAQ →</a>
    </p>
  </div>
</section>

<!-- FINAL CTA -->
<section class="bg-base-200 py-16 text-center px-4">
  <h2 class="text-3xl md:text-5xl font-bold text-primary">Ready to Automate the Smart Way?</h2>
  <p class="mt-4 text-xl max-w-2xl mx-auto">
    Start a zero-risk 7-day trial. You'll keep the $1 Signal Shield installer forever, even if you cancel.
  </p>
  <a href="#cards"><button class="btn btn-primary btn-lg mt-6 px-12 btn-gradient-electric">Start 7-Day Trial</button></a>
</section>
</file>

<file path="src/hooks.server.ts">
import { PRIVATE_SUPABASE_SERVICE_ROLE } from "$env/static/private";
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from "$env/static/public";
import { createServerClient } from "@supabase/ssr";
import { createClient } from "@supabase/supabase-js";
import type { Handle } from "@sveltejs/kit";
import { sequence } from "@sveltejs/kit/hooks";

// --- SECURITY HARDENING: CONTENT SECURITY POLICY ---
// This handle attaches a robust Content Security Policy (CSP) to every server response.
// A CSP is a critical security layer that helps prevent cross-site scripting (XSS) attacks.
// NOTE: This is a strict policy. If you add new external scripts, fonts, or images,
// you MUST add their sources to the policy below, or they will be blocked by the browser.
const securityHeaders: Handle = async ({ event, resolve }) => {
  const response = await resolve(event);
  response.headers.set(
    'Content-Security-Policy',
    [
      "default-src 'self'",
      "script-src 'self' 'unsafe-inline' https://www.googletagmanager.com", // 'unsafe-inline' is needed for Svelte's reactivity and Google Analytics
      "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com", // 'unsafe-inline' is needed for Svelte's dynamic styles
      "font-src 'self' https://fonts.gstatic.com",
      "img-src 'self' data:",
      "connect-src 'self' https://*.supabase.co https://www.google-analytics.com",
      "frame-src 'self' https://js.stripe.com",
      "object-src 'none'",
      "base-uri 'self'",
      "form-action 'self'",
    ].join('; ')
  );
  return response;
};

export const supabase: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createServerClient(
    PUBLIC_SUPABASE_URL,
    PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll: () => event.cookies.getAll(),
        setAll: (cookiesToSet) => {
          cookiesToSet.forEach(({ name, value, options }) => {
            // --- SECURITY HARDENING: HTTP-ONLY COOKIES ---
            // We ensure the HttpOnly flag is always set on our auth cookies
            event.cookies.set(name, value, { ...options, path: "/", httpOnly: true, secure: true });
          });
        },
      },
    },
  );

  event.locals.supabaseServiceRole = createClient(
    PUBLIC_SUPABASE_URL,
    PRIVATE_SUPABASE_SERVICE_ROLE,
    { auth: { persistSession: false } },
  );

  event.locals.safeGetSession = async () => {
    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession();
    if (!session) {
      return { session: null, user: null, amr: null };
    }

    const {
      data: { user },
      error: userError,
    } = await event.locals.supabase.auth.getUser();
    if (userError) {
      return { session: null, user: null, amr: null };
    }

    const { data: aal, error: amrError } =
      await event.locals.supabase.auth.mfa.getAuthenticatorAssuranceLevel();
    if (amrError) {
      return { session, user, amr: null };
    }

    return { session, user, amr: aal.currentAuthenticationMethods };
  };

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === "content-range" || name === "x-supabase-api-version";
    },
  });
};

const authGuard: Handle = async ({ event, resolve }) => {
  const { session, user } = await event.locals.safeGetSession();
  event.locals.session = session;
  event.locals.user = user;
  return resolve(event);
};

// The 'sequence' function runs our handles in the order they are listed.
// Security headers are applied first to every response.
export const handle: Handle = sequence(securityHeaders, supabase, authGuard);
</file>

<file path="src/lib/build_index.ts">
import { allProducts } from "$lib/data/products";
import Fuse from "fuse.js";

// Manually define other pages to be included in the search
const otherPages = [
    {
        title: "Home",
        description: "The open source, fast, and free to host SaaS template.",
        path: "/"
    },
    {
        title: "Documentation",
        description: "Setup guides, READMEs, and technical documentation for Signal Lynx products.",
        path: "/docs"
    },
    {
        title: "Contact Us",
        description: "Get in touch with us for demos, quotes, or questions.",
        path: "/contact_us"
    }
];

export async function buildSearchIndex() {
  const indexData = [
    ...allProducts.map(product => ({
      title: product.title,
      description: product.tagline,
      body: product.features.join(' '), // Combine features for better searchability
      path: product.id === 'license-hub' ? '/license-hub' : '/trading-automation'
    })),
    ...otherPages.map(page => ({
      title: page.title,
      description: page.description,
      body: '',
      path: page.path
    }))
  ];

  const index = Fuse.createIndex(["title", "description", "body"], indexData);
  const jsonIndex = index.toJSON();
  const data = { index: jsonIndex, indexData, buildTime: Date.now() };
  return data;
}
</file>

<file path="src/lib/components/pricing_module.svelte">
<script lang="ts">
  import { allProducts } from "$lib/data/products"
  import type { Product } from "$lib/data/products";

  interface Props {
    // Module context
    callToAction?: string
    highlightedPlanId?: string
    currentPlanId?: string
    center?: boolean
    ctaClass?: string // New property for custom button classes
  }

  let {
    callToAction = "",
    highlightedPlanId = "",
    currentPlanId = "",
    center = true,
    ctaClass = ""
  }: Props = $props()
</script>

<div
  class="flex flex-col lg:flex-row gap-10 {center
    ? 'place-content-center'
    : ''} flex-wrap"
>
  {#each allProducts as plan: Product}
    <div
      class="card shadow-xl flex-1 min-w-[260px] max-w-[310px] p-6 border-4 border-transparent transition-all duration-300 hover:border-accent"
    >
      <div class="flex flex-col h-full">
        <div class="text-xl font-bold">{plan.title}</div>
        <p class="mt-2 text-sm text-base-content/70 flex-grow">
          {plan.tagline}
        </p>
        <div class="mt-auto pt-4 text-sm text-base-content/80">
          Plan Includes:
          <ul class="list-disc list-inside mt-2 space-y-1">
            {#each plan.features as feature}
              <li class="">{feature}</li>
            {/each}
          </ul>
        </div>
        <div class="pt-8">
          <span class="text-4xl font-bold">{plan.price}</span>
          <div class="mt-6 pt-4 flex-1 flex flex-row items-center">
            {#if plan.id === currentPlanId}
              <div
                class="btn btn-outline btn-success no-animation w-[80%] mx-auto cursor-default"
              >
                Current Plan
              </div>
            {:else}
              <a
                href={plan.stripe_price_id ? `/account/subscribe/${plan.stripe_price_id}` : '/login'}
                class="btn btn-primary w-[80%] mx-auto {ctaClass}"
              >
                {callToAction || plan.ctaLabel}
              </a>
            {/if}
          </div>
        </div>
      </div>
    </div>
  {/each}
</div>
</file>

<file path="src/routes/(admin)/account/(menu)/settings/settings_module.svelte">
<script lang="ts">
  import { enhance } from '$app/forms';
  import { page } from '$app/stores';
  import type { SubmitFunction } from '@sveltejs/kit';

  const fieldError = (liveForm: FormAccountUpdateResult, name: string) => {
    let errors = liveForm?.errorFields ?? [];
    return errors.includes(name);
  };

  // --- UX UPGRADE: DYNAMIC BUTTON STATE ---
  type ButtonState = 'idle' | 'loading' | 'success';
  let buttonState = $state<ButtonState>('idle');

  type Field = {
    inputType?: string;
    id: string;
    label?: string;
    initialValue: string | boolean;
    placeholder?: string;
    maxlength?: number;
  };

  interface Props {
    editable?: boolean;
    dangerous?: boolean;
    title?: string;
    message?: string;
    fields: Field[];
    formTarget?: string;
    editButtonTitle?: string | null;
    editLink?: string | null;
    saveButtonTitle?: string;
    saveButtonClass?: string;
    editButtonClass?: string;
  }

  let {
    editable = false,
    dangerous = false,
    title = '',
    message = '',
    fields,
    formTarget = '',
    editButtonTitle = null,
    editLink = null,
    saveButtonTitle = 'Save',
    saveButtonClass = '',
    editButtonClass = ''
  }: Props = $props();

  const handleSubmit: SubmitFunction = () => {
    buttonState = 'loading';
    return async ({ result, update }) => {
      await update(); // This applies form actions and updates data
      if (result.type === 'success') {
        buttonState = 'success';
        // Revert button to idle state after 2 seconds
        setTimeout(() => {
          buttonState = 'idle';
        }, 2000);
      } else {
        // If there's a failure or error, revert immediately
        buttonState = 'idle';
      }
    };
  };
</script>

<div class="card p-6 pb-7 mt-8 max-w-xl flex flex-col md:flex-row shadow-sm">
  {#if title}
    <div class="text-xl font-bold mb-3 w-48 md:pr-8 flex-none">{title}</div>
  {/if}

  <div class="w-full min-w-48">
    {#if message}
      <div class="mb-6 {dangerous ? 'alert alert-warning' : ''}">
        {#if dangerous}
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="stroke-current shrink-0 h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
            /></svg
          >
        {/if}
        <span>{message}</span>
      </div>
    {/if}
    <form
      class="form-widget flex flex-col"
      method="POST"
      action={formTarget}
      use:enhance={handleSubmit}
    >
      {#each fields as field}
        {#if field.label}
          <label for={field.id} class="label">
            <span class="label-text">{field.label}</span>
          </label>
        {/if}
        {#if editable}
          <input
            id={field.id}
            name={field.id}
            type={field.inputType ?? 'text'}
            disabled={!editable || buttonState === 'loading'}
            placeholder={field.placeholder ?? field.label ?? ''}
            class="input input-bordered w-full max-w-xs {fieldError($page?.form, field.id) ? 'input-error' : ''}"
            value={$page.form ? $page.form[field.id] : field.initialValue}
            maxlength={field.maxlength ?? undefined}
          />
        {:else}
          <div class="text-lg mb-3">{field.initialValue}</div>
        {/if}
      {/each}

      {#if $page?.form?.errorMessage}
        <p class="text-error text-sm font-bold mt-1">
          {$page?.form?.errorMessage}
        </p>
      {/if}

      {#if editable}
        <div class="self-end mt-4">
          <button
            type="submit"
            class="btn min-w-[145px] {dangerous ? 'btn-error' : 'btn-primary'} {saveButtonClass} {buttonState === 'success' ? 'btn-success' : ''}"
            disabled={buttonState === 'loading'}
          >
            {#if buttonState === 'loading'}
              <span class="loading loading-spinner"></span>
              Saving...
            {:else if buttonState === 'success'}
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>
              Saved!
            {:else}
              {saveButtonTitle}
            {/if}
          </button>
        </div>
      {:else if editButtonTitle && editLink}
        <!-- !editable -->
        <a href={editLink} class="self-end mt-1">
          <button
            class="btn btn-sm {dangerous ? 'btn-error' : 'btn-primary'} {editButtonClass} min-w-[145px]"
          >
            {editButtonTitle}
          </button>
        </a>
      {/if}
    </form>
  </div>
</div>
</file>

<file path="src/routes/(admin)/account/api/+page.server.ts">
import { fail, redirect } from "@sveltejs/kit"
import { sendAdminEmail, sendUserEmail } from "$lib/mailer"
import { WebsiteBaseUrl, WebsiteName } from "../../../../config"

export const actions = {
  toggleEmailSubscription: async ({ locals: { supabase, safeGetSession } }) => {
    const { session } = await safeGetSession()

    if (!session) {
      redirect(303, "/login")
    }

    const { data: currentProfile } = await supabase
      .from("profiles")
      .select("unsubscribed")
      .eq("id", session.user.id)
      .single()

    const newUnsubscribedStatus = !currentProfile?.unsubscribed

    const { error } = await supabase
      .from("profiles")
      .update({ unsubscribed: newUnsubscribedStatus })
      .eq("id", session.user.id)

    if (error) {
      console.error("Error updating subscription status", error)
      return fail(500, { message: "Failed to update subscription status" })
    }

    return {
      unsubscribed: newUnsubscribedStatus,
    }
  },
  updateEmail: async ({ request, locals: { supabase, safeGetSession } }) => {
    const { session } = await safeGetSession()
    if (!session) {
      redirect(303, "/login")
    }

    const formData = await request.formData()
    const email = formData.get("email") as string

    let validationError
    if (!email || email === "") {
      validationError = "An email address is required"
    }
    else if (!email.includes("@")) {
      validationError = "A valid email address is required"
    }
    if (validationError) {
      return fail(400, {
        errorMessage: validationError,
        errorFields: ["email"],
        email,
      })
    }

    const { error } = await supabase.auth.updateUser({ email: email })

    if (error) {
      console.error("Error updating email", error)
      return fail(500, {
        errorMessage: "Unknown error. If this persists please contact us.",
        email,
      })
    }

    return {
      email,
    }
  },
  updatePassword: async ({ request, locals: { supabase, safeGetSession } }) => {
    const { session, user, amr } = await safeGetSession()
    if (!session) {
      redirect(303, "/login")
    }

    const formData = await request.formData()
    const newPassword1 = formData.get("newPassword1") as string
    const newPassword2 = formData.get("newPassword2") as string
    const currentPassword = formData.get("currentPassword") as string

    const recoveryAmr = amr?.find((x) => x.method === "recovery")
    const isRecoverySession = recoveryAmr && !currentPassword

    if (isRecoverySession) {
      const timeSinceLogin = Date.now() - recoveryAmr.timestamp * 1000
      if (timeSinceLogin > 1000 * 60 * 15) {
        return fail(400, {
          errorMessage:
            'Recovery code expired. Please log out, then use "Forgot Password" on the sign in page to reset your password. Codes are valid for 15 minutes.',
          errorFields: [],
          newPassword1,
          newPassword2,
          currentPassword: "",
        })
      }
    }

    let validationError
    const errorFields = []
    if (!newPassword1) {
      validationError = "You must type a new password"
      errorFields.push("newPassword1")
    }
    if (!newPassword2) {
      validationError = "You must type the new password twice"
      errorFields.push("newPassword2")
    }
    if (newPassword1.length < 6) {
      validationError = "The new password must be at least 6 charaters long"
      errorFields.push("newPassword1")
    }
    if (newPassword1.length > 72) {
      validationError = "The new password can be at most 72 charaters long"
      errorFields.push("newPassword1")
    }
    if (newPassword1 != newPassword2) {
      validationError = "The passwords don't match"
      errorFields.push("newPassword1")
      errorFields.push("newPassword2")
    }
    if (!currentPassword && !isRecoverySession) {
      validationError =
        "You must include your current password. If you forgot it, sign out then use 'forgot password' on the sign in page."
      errorFields.push("currentPassword")
    }
    if (validationError) {
      return fail(400, {
        errorMessage: validationError,
        errorFields: [...new Set(errorFields)],
        newPassword1,
        newPassword2,
        currentPassword,
      })
    }

    if (!isRecoverySession) {
      const { error } = await supabase.auth.signInWithPassword({
        email: user?.email || "",
        password: currentPassword,
      })
      if (error) {
        redirect(303, "/login/current_password_error")
      }
    }

    const { error } = await supabase.auth.updateUser({
      password: newPassword1,
    })
    if (error) {
      console.error("Error updating password", error)
      return fail(500, {
        errorMessage: "Unknown error. If this persists please contact us.",
        newPassword1,
        newPassword2,
        currentPassword,
      })
    }

    return {
      newPassword1,
      newPassword2,
      currentPassword,
    }
  },
  deleteAccount: async ({
    request,
    locals: { supabase, supabaseServiceRole, safeGetSession },
  }) => {
    const { session, user } = await safeGetSession()
    if (!session || !user?.id) {
      redirect(303, "/login")
    }

    const formData = await request.formData()
    const currentPassword = formData.get("currentPassword") as string

    if (!currentPassword) {
      return fail(400, {
        errorMessage:
          "You must provide your current password to delete your account. If you forgot it, sign out then use 'forgot password' on the sign in page.",
        errorFields: ["currentPassword"],
        currentPassword,
      })
    }

    const { error: pwError } = await supabase.auth.signInWithPassword({
      email: user?.email || "",
      password: currentPassword,
    })
    if (pwError) {
      redirect(303, "/login/current_password_error")
    }

    const { error } = await supabaseServiceRole.auth.admin.deleteUser(
      user.id,
      true,
    )
    if (error) {
      console.error("Error deleting user", error)
      return fail(500, {
        errorMessage: "Unknown error. If this persists please contact us.",
        currentPassword,
      })
    }

    await supabase.auth.signOut()
    redirect(303, "/")
  },
  updateProfile: async ({ request, locals: { supabase, safeGetSession } }) => {
    const { session, user } = await safeGetSession()
    if (!session || !user?.id) {
      redirect(303, "/login")
    }

    const formData = await request.formData()
    const fullName = formData.get("fullName") as string
    const companyName = formData.get("companyName") as string
    const website = formData.get("website") as string

    let validationError
    const fieldMaxTextLength = 50
    const errorFields = []
    if (!fullName) {
      validationError = "Name is required"
      errorFields.push("fullName")
    } else if (fullName.length > fieldMaxTextLength) {
      validationError = `Name must be less than ${fieldMaxTextLength} characters`
      errorFields.push("fullName")
    }
    if (!companyName) {
      validationError =
        "Company name is required. If this is a hobby project or personal app, please put your name."
      errorFields.push("companyName")
    } else if (companyName.length > fieldMaxTextLength) {
      validationError = `Company name must be less than ${fieldMaxTextLength} characters`
      errorFields.push("companyName")
    }
    if (!website) {
      validationError =
        "Company website is required. An app store URL is a good alternative if you don't have a website."
      errorFields.push("website")
    } else if (website.length > fieldMaxTextLength) {
      validationError = `Company website must be less than ${fieldMaxTextLength} characters`
      errorFields.push("website")
    }
    if (validationError) {
      return fail(400, {
        errorMessage: validationError,
        errorFields,
        fullName,
        companyName,
        website,
      })
    }

    const { data: priorProfile, error: priorProfileError } = await supabase
      .from("profiles")
      .select(`*`)
      .eq("id", session?.user.id)
      .single()

    const { error } = await supabase
      .from("profiles")
      .upsert({
        id: user.id,
        full_name: fullName,
        company_name: companyName,
        website: website,
        updated_at: new Date(),
        unsubscribed: priorProfile?.unsubscribed ?? false,
      })
      .select()

    if (error) {
      console.error("Error updating profile", error)
      return fail(500, {
        errorMessage: "Unknown error. If this persists please contact us.",
        fullName,
        companyName,
        website,
      })
    }

    const newProfile =
      priorProfile?.updated_at === null && priorProfileError === null
    if (newProfile) {
      await sendAdminEmail({
        subject: "Profile Created",
        body: `Profile created by ${session.user.email}\nFull name: ${fullName}\nCompany name: ${companyName}\nWebsite: ${website}`,
      })

      await sendUserEmail({
        user: session.user,
        subject: `Welcome to ${WebsiteName}`,
        from_email: "ops@signallynx.com", // You may want to configure this
        template_name: "welcome_email",
        template_properties: {
          companyName: WebsiteName,
          WebsiteBaseUrl: WebsiteBaseUrl,
        },
      })
    }

    return {
      fullName,
      companyName,
      website,
    }
  },
  signout: async ({ locals: { supabase, safeGetSession } }) => {
    const { session } = await safeGetSession()
    if (session) {
      await supabase.auth.signOut()
      redirect(303, "/")
    } else {
      redirect(303, "/")
    }
  },
}
</file>

<file path="src/routes/(marketing)/faq/+page.svelte">
<script lang="ts">
// No script logic needed for this static content page.
</script>

<svelte:head>
  <title>FAQ – Signal Lynx</title>
  <meta
    name="description"
    content="Your Pre-Flight Checklist: All your burning questions about Signal Shield, Lynx-Relay, and Key Commander answered with our signature, surprisingly honest style."
  />
</svelte:head>

<div class="py-12 px-4 bg-base-100">
  <div class="max-w-3xl mx-auto">
    <div class="text-center mb-12">
      <h1 class="text-4xl md:text-6xl font-bold text-primary">Your Pre-Flight Checklist</h1>
      <p class="mt-4 text-xl max-w-2xl mx-auto">
        We get it, you've got questions. Here are our surprisingly honest answers. Read this before you try to use a toaster as a VPS or ask us something that's covered on line one.
      </p>
    </div>

    <!-- Universal Questions -->
    <h2 class="text-3xl font-bold text-secondary mb-6">General Intel: The Big Picture</h2>
    <div class="join join-vertical w-full">
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" checked />
        <div class="collapse-title text-xl font-medium">What's the damage to my wallet?</div>
        <div class="collapse-content">
          <p>
            Zero smoke, zero mirrors. You pay a flat monthly or yearly rate. We don’t do hidden fees, sneaky in-app purchases, or surprise "pro-plus-turbo" tiers designed to punish you for succeeding.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Is the free trial actually... free?</div>
        <div class="collapse-content">
          <p>
            You bet. You get seven days of the full, unlocked experience. We need a card to get you started (to keep out the bots and time-wasters), but if you cancel before day eight, your bank account remains untouched.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Can I get my money back if I cry?</div>
        <div class="collapse-content">
          <p>
            Sorry, operator. Since you get the full software instantly, all sales are final. The free trial is your time to kick the tires, light the fires, and make sure our gear is right for your mission. Canceling just stops future payments.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">What kind of rig do I need?</div>
        <div class="collapse-content">
          <p>
            Our software is lean and mean. It'll run on just about anything without bogging it down. Check the specific product pages for the nitty-gritty specs.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Laptop, Desktop, or That Glowing Box in the Cloud (VPS)?</div>
        <div class="collapse-content">
          <p>
            Your call. Run it on your daily driver, a dedicated desktop, or your gaming beast. If you want 24/7 uptime without your electric bill screaming in terror, a Virtual Private Server (VPS) is your best bet.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Will my fancy VPN break things?</div>
        <div class="collapse-content">
          <p>
            Only if it plays musical chairs with your IP address. You need a static (unchanging) IP for TradingView's webhooks to find their target. If your IP changes, the signal gets lost in the ether.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Are these webhooks going to get me hacked?</div>
        <div class="collapse-content">
          <p>
            Not on our watch. Signal Shield builds a fortified, encrypted tunnel just for your webhooks. It's like a VIP entrance with a bouncer that only lets TradingView in.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">How safe are my API keys and passwords?</div>
        <div class="collapse-content">
          <p>
            Safer than a dragon's hoard. We use top-shelf encryption to lock down your secrets on your local machine. We never see them, we never store them, and our security practices are tough enough to make a cryptographer nod in approval.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Who do I yell at when something breaks?</div>
        <div class="collapse-content">
          <p>
            Yell at us! We're live on Telegram and X. We’re always ready to help a fellow operator out of a jam.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Seriously, who are you people?</div>
        <div class="collapse-content">
          <p>
            We're the renegades. A small squad of engineers and traders who got sick of automation tools that were overpriced, unreliable, or both.
          </p>
          <p class="mt-2">
            Fueled by late nights and questionable amounts of caffeine, we built the gear we wanted to use. Now we’re sharing it with you.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">Why are you so cheap? What's the catch?</div>
        <div class="collapse-content">
          <p>
            The catch is there's no catch. We're not bankrolled by VCs and we don't have yachts to pay for. We built these tools for ourselves and priced them for people like us.
          </p>
          <p class="mt-2">
            Go use the money you save to buy a better graphics card or another case of energy drinks. You've earned it.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-universal" />
        <div class="collapse-title text-xl font-medium">What's next on the roadmap?</div>
        <div class="collapse-content">
          <p>
            Our roadmap is basically a community wishlist. We build what you ask for. Hit us up on Telegram or X with your genius ideas. The most-wanted features get built next.
          </p>
        </div>
      </div>
    </div>

    <!-- Signal Shield: FAQs -->
    <h2 class="text-3xl font-bold text-secondary mt-16 mb-6">Dossier: Signal Shield</h2>
    <div class="join join-vertical w-full">
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" checked />
        <div class="collapse-title text-xl font-medium">What black magic does the installer actually perform?</div>
        <div class="collapse-content">
          <p>
            It’s not magic, it’s just efficient engineering. It installs the whole security stack: NGINX for reverse proxy, NetTime for perfect clock sync, Memurai for an in-memory database, and NSSM to make sure services stay running. Plus, it wraps everything in a shiny SSL certificate.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" />
        <div class="collapse-title text-xl font-medium">Does it mess with the Windows Registry?</div>
        <div class="collapse-content">
          <p>It does, but only gently. Just a few tweaks to optimize performance. And yes, it knows how to clean up after itself if you decide to uninstall.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" />
        <div class="collapse-title text-xl font-medium">What if the installer throws a tantrum?</div>
        <div class="collapse-content">
          <p>
            While rare, it can happen. If it does, you can go old-school and configure Lynx-Relay manually. The README has the full, step-by-step instructions for a manual override.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" />
        <div class="collapse-title text-xl font-medium">Can I completely erase it from my system?</div>
        <div class="collapse-content">
          <p>Absolutely. The uninstaller is as thorough as the installer. It leaves no trace behind.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-setup" />
        <div class="collapse-title text-xl font-medium">What operating systems does it play nice with?</div>
        <div class="collapse-content">
          <p>Windows 10/11 and Server 2016+ are our bread and butter. Linux and macOS versions are brewing in the lab.</p>
        </div>
      </div>
    </div>

    <!-- Lynx-Relay: FAQs -->
    <h2 class="text-3xl font-bold text-secondary mt-16 mb-6">Dossier: Lynx-Relay</h2>
    <div class="join join-vertical w-full">
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" checked />
        <div class="collapse-title text-xl font-medium">Which exchanges can I command?</div>
        <div class="collapse-content">
          <p>
            Currently, you can deploy trades on Kraken, Gemini, and Binance.US. Yell at us on social media to tell us which exchange to conquer next.
          </p>
        </div>
      </div>
       <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What OS do I need for this?</div>
        <div class="collapse-content">
          <p>Same as Signal Shield: Windows 10/11 and Server 2016+. Linux/macOS support is on the horizon.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Time from zero to "holy crap, it's trading for me"?</div>
        <div class="collapse-content">
          <p>Less than 15 minutes. Seriously.</p>
          <p class="font-semibold mt-4">Your Mission, Should You Choose to Accept It:</p>
          <ol class="list-decimal list-inside pl-4 space-y-1">
            <li>Run Signal Shield (the 1-click part).</li>
            <li>Fire up Lynx-Relay.</li>
            <li>Punch in your master password and webhook passphrase.</li>
            <li>Slap in your license key.</li>
            <li>Feed it your Telegram Bot Token and Chat ID.</li>
            <li>Plug in your exchange API keys.</li>
          </ol>
          <p class="mt-2">Point TradingView to your webhook URL. Go live. Done.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What kind of orders can I place?</div>
        <div class="collapse-content">
          <p>We support a whole arsenal for spot trading:</p>
          <ul class="list-disc list-inside pl-4 space-y-2 mt-2">
            <li><strong>Kraken:</strong> Limit, Advanced Limit, Market, Take Profit, Stop Loss.</li>
            <li>
              <strong>Gemini:</strong> Limit, Advanced Limit, Take Profit, Stop Loss. (We cleverly emulate market orders since they don't offer them directly).
            </li>
            <li><strong>Binance.US:</strong> Limit, Advanced Limit, Market, Take Profit, Stop Loss.</li>
          </ul>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">How does it know what to do? Magic?</div>
        <div class="collapse-content">
          <p>
            Close. It's JSON. You craft a JSON payload in your TradingView alert message. Lynx-Relay receives it, deciphers your commands (buy, sell, quantity, etc.), and executes the trade. It's your strategy, spoken in the language of machines.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">How do I find my public IP?</div>
        <div class="collapse-content">
          <p>
            Go to a "what is my IP" site. Copy that address. Paste it into your TradingView webhook URL like this: <code>https://YOUR.PUBLIC.IP.ADDRESS/webhook</code>. Boom.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">How many alerts can I fire at it?</div>
        <div class="collapse-content">
          <p>It can handle up to 10 alerts per second without breaking a sweat. If you're sending more than that, you're either a god-tier HFT or you've made a terrible mistake in your script.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What does the dashboard show me?</div>
        <div class="collapse-content">
          <p>
            Your entire operation at a glance: system status, incoming alerts, trade results, connection health, a full audit log, and P&L tracking. Total transparency.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Can I get alerts on my phone while I'm "working"?</div>
        <div class="collapse-content">
          <p>Yep. The Telegram integration means you get real-time pings for every move your bot makes, so you can look busy while secretly monitoring your trading empire.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Are you SURE my API keys are safe?</div>
        <div class="collapse-content">
          <p>Positive. They're encrypted and stored on your machine. We couldn't see them even if we wanted to (and we don't).</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What happens if my internet dies?</div>
        <div class="collapse-content">
          <p>If the signal can't get through, trading pauses. Lynx-Relay needs a live connection to receive webhooks and execute trades.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">Does this thing update itself?</div>
        <div class="collapse-content">
          <p>
            Nope. We don't believe in forcing updates on you. When a new version drops, you'll grab it from your account and just replace the old executable. No re-setup needed.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">How do I hit the pause button?</div>
        <div class="collapse-content">
          <p>
            Two ways: for a total system halt, just stop the Lynx-Relay service. For a more surgical approach, pause individual alerts inside TradingView.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">I forgot my master password. Am I screwed?</div>
        <div class="collapse-content">
          <p>
            Not totally, but you'll have to perform a "scorched earth" reset. For security, there's no recovery. You'll need to delete the <code>SignalLynx_Vault.encrypted</code> file, restart Lynx-Relay, and re-enter your keys. It’s a pain, but it's secure. You'll be back online in 10 minutes.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-engine" />
        <div class="collapse-title text-xl font-medium">What's coming next for Lynx-Relay?</div>
        <div class="collapse-content">
          <p>More exchanges, more dashboard widgets, more power. Tell us what you want, and we'll probably build it.</p>
        </div>
      </div>
    </div>

    <!-- Key Commander: FAQs -->
    <h2 class="text-3xl font-bold text-secondary mt-16 mb-6">Dossier: Key Commander</h2>
    <div class="join join-vertical w-full">
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" checked />
        <div class="collapse-title text-xl font-medium">Is this thing hard to use? I hate terminals.</div>
        <div class="collapse-content">
          <p>
            We hate terminals too (for this kind of stuff). Key Commander is 100% GUI-driven. If you can click a mouse, you can manage a licensing empire. No command line, no editing weird <code>.env</code> files.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What exactly does it DO?</div>
        <div class="collapse-content">
          <p>
            Everything. Generates keys, manages customers, processes payments, delivers licenses, handles revocations, reissues... all from a slick Admin Portal. It's your entire back-office in a box.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Is it really one price for everything?</div>
        <div class="collapse-content">
          <p><strong>Yes.</strong> One flat rate. All the features. No add-ons, no tiers, no "call for pricing" nonsense. Scale to a million users; we don't care. Your success is yours, not ours.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What are the system requirements?</div>
        <div class="collapse-content">
          <p>A cheap VPS with Docker is perfect. Give it at least 2 vCPUs, 8 GB RAM, and 100 GB of storage. It's surprisingly lightweight.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">How do I install this beast?</div>
        <div class="collapse-content">
          <p>You deploy one Docker container. That's it. The Admin Portal then holds your hand through the rest of the setup.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">How does it work, architecturally?</div>
        <div class="collapse-content">
          <p>
            It’s a two-part system: a headless server that does all the heavy lifting, and the GUI Admin Portal you use to command it. Once you set it up and lock it with your master password, the server runs completely on its own.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">How does the Admin Portal connect?</div>
        <div class="collapse-content">
          <p>
            You can run the portal on the same VPS or on your local machine. It connects to the server securely. No need to ever touch a config file or a database shell.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Which payment providers can I use?</div>
        <div class="collapse-content">
          <p>Right now, it's deeply integrated with Stripe. We're adding more. Let us know who you want to see next!</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What kinds of products can I sell?</div>
        <div class="collapse-content">
          <p>One-time purchases, recurring subscriptions, and time-limited trials. It handles all three right out of the box.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Does this stop people from sharing my software?</div>
        <div class="collapse-content">
          <p>
            Yep. Each license key gets chained to a unique machine ID upon activation. No more one-to-many license sharing.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">What if a legit user gets a new computer?</div>
        <div class="collapse-content">
          <p>
            They can self-serve a machine ID reset once a month. For special cases, you, the admin, can grant more resets with a click of a button.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Does my app have to be online all the time?</div>
        <div class="collapse-content">
          <p>
            Nope. You can enable offline session tokens. The user's app checks in once, gets a token, and can then work offline until the next renewal period.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">How secure is this, really?</div>
        <div class="collapse-content">
          <p>OWASP-compliant, industry-standard, built-like-a-bunker secure. We take this stuff very seriously.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Can I create keys for my dev team or for promos?</div>
        <div class="collapse-content">
          <p>Of course. As the admin, you can mint custom keys on the fly for whatever purpose you need.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Can I manage multiple products or tiers?</div>
        <div class="collapse-content">
          <p>Unlimited products, unlimited tiers. Go wild.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Does it back up my data?</div>
        <div class="collapse-content">
          <p>Yep. It has manual and automated backups. It also constantly cross-references with Stripe to keep your data pristine.</p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Can it survive a server apocalypse?</div>
        <div class="collapse-content">
          <p>
            It can. Restore from a backup, run a reconciliation with Stripe, and all your customer data and licenses are back from the dead. (Dev keys need a backup to be restored, though).
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">Is key delivery automatic?</div>
        <div class="collapse-content">
          <p>
            100%. After a purchase, keys are generated and emailed instantly. We support SMTP, Brevo, and Amazon SES.
          </p>
        </div>
      </div>
      <div class="collapse collapse-arrow join-item border border-base-300">
        <input type="radio" name="faq-license" />
        <div class="collapse-title text-xl font-medium">How do I hook this into my own software?</div>
        <div class="collapse-content">
          <p>
            The Key Commander README is packed with code examples. If you get stuck, hit us up on Telegram or X. We'll get you sorted.
          </p>
        </div>
      </div>
    </div>

    <!-- Contact Section -->
    <div class="text-center mt-16">
      <h2 class="text-2xl font-bold">Still Stumped?</h2>
      <p class="mt-2 max-w-xl mx-auto">
        If your question wasn't answered here, it's probably weird enough that we want to hear about it. Hit us up on Telegram or X.
      </p>
    </div>
  </div>
</div>
</file>

<file path="src/routes/(marketing)/login/sign_in/+page.svelte">
<script lang="ts">
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import { page } from "$app/stores";
  import AuthWrapper from '$lib/components/login/AuthWrapper.svelte';

  let { data } = $props();

  onMount(() => {
    const { data: { subscription } } = data.supabase.auth.onAuthStateChange((event) => {
      if (event === "SIGNED_IN") {
        setTimeout(() => {
          goto("/account");
        }, 1);
      }
    });

    return () => {
      subscription.unsubscribe();
    };
  });
</script>

{#if $page.url.searchParams.get("verified") == "true"}
  <div role="alert" class="alert alert-success mb-5">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="stroke-current shrink-0 h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      ><path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
      /></svg
    >
    <span>Email verified! Please sign in.</span>
  </div>
{/if}

<AuthWrapper view="sign_in" {data} />
</file>

<file path="tsconfig.json">
{
  "extends": "./.svelte-kit/tsconfig.json",
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "types": ["vitest/globals"] // allows to skip import of test functions like `describe`, `it`, `expect`, etc.
  }
  // Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias and https://kit.svelte.dev/docs/configuration#files
  //
  // If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
  // from the referenced tsconfig.json - TypeScript does not merge them in
}
</file>

<file path="src/routes/(admin)/account/(menu)/billing/+page.svelte">
<script lang="ts">
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings/settings_module.svelte"
  import PricingModule from "$lib/components/pricing_module.svelte"
  import { allProducts, defaultPlanId } from "$lib/data/products"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("billing")

  let { data } = $props()

  let currentPlanId = data.currentPlanId ?? defaultPlanId
  let currentPlanName = allProducts.find(
    (x) => x.id === data.currentPlanId,
  )?.title
</script>

<svelte:head>
  <title>Billing Command</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-2">
  Billing Command
</h1>

{#if !data.isActiveCustomer}
  <div>
    <p>Your arsenal is empty. Choose a plan to deploy your tools and go live.</p>
    <p class="text-sm mt-1">For more details, see the full <a href="/trading-automation" target="_blank" class="link">product pages</a>.</p>
  </div>
  <div class="mt-8">
    <PricingModule {currentPlanId} callToAction="Deploy Plan" center={false} ctaClass="btn-gradient-electric" />
  </div>

  {#if data.hasEverHadSubscription}
    <div class="mt-10">
      <a href="/account/billing/manage" class="link">Review past invoices</a>
    </div>
  {/if}
{:else}
  <div>
    <p>Manage your active subscription, payment methods, and review past invoices.</p>
  </div>
  <SettingsModule
    title="Active Subscription"
    editable={false}
    fields={[
      {
        id: "plan",
        label: "Current Arsenal",
        initialValue: currentPlanName || "N/A",
      },
    ]}
    editButtonTitle="Manage Subscription"
    editLink="/account/billing/manage"
    editButtonClass="btn-gradient-electric"
  />
{/if}
</file>

<file path="src/routes/(admin)/account/(menu)/settings/change_password/+page.svelte">
<script lang="ts">
  import { page } from "$app/stores"
  import { getContext } from "svelte"
  import type { Writable } from "svelte/store"
  import SettingsModule from "../settings_module.svelte"

  let adminSection: Writable<string> = getContext("adminSection")
  adminSection.set("settings")

  let { data } = $props()
  let { user, supabase } = data

  // @ts-expect-error: we ignore because Supabase does not maintain an AMR typedef
  let hasPassword = user?.amr?.find((x) => x.method === "password")
    ? true
    : false

  // @ts-expect-error: we ignore because Supabase does not maintain an AMR typedef
  let usingOAuth = user?.amr?.find((x) => x.method === "oauth") ? true : false

  let sendBtnDisabled = $state(false)
  let sendBtnText = $state("Send Password Reset Email")
  let sentEmail = $state(false)
  let sendForgotPassword = () => {
    sendBtnDisabled = true
    sendBtnText = "Sending..."

    let email = user?.email
    if (email) {
      supabase.auth
        .resetPasswordForEmail(email, {
          redirectTo: `${$page.url.origin}/auth/callback?next=%2Faccount%2Fsettings%2Freset_password`,
        })
        .then((d) => {
          sentEmail = d.error ? false : true
          sendBtnDisabled = false
          sendBtnText = "Resend Email"
        })
    }
  }
</script>

<svelte:head>
  <title>Change Password</title>
</svelte:head>

<h1 class="text-2xl font-bold mb-6">Update Password</h1>

{#if hasPassword}
  <SettingsModule
    title="Change Password"
    editable={true}
    saveButtonTitle="Change Password"
    successTitle="Credentials Updated"
    successBody="Your new password is now active. Use it on your next login."
    formTarget="/account/api?/updatePassword"
    saveButtonClass="btn-gradient-electric"
    fields={[
      {
        id: "newPassword1",
        label: "New Password",
        initialValue: "",
        inputType: "password",
      },
      {
        id: "newPassword2",
        label: "Confirm New Password",
        initialValue: "",
        inputType: "password",
      },
      {
        id: "currentPassword",
        label: "Current Password",
        initialValue: "",
        inputType: "password",
      },
    ]}
  />
{:else}
  <div
    class="card p-6 pb-7 mt-8 flex flex-col md:flex-row shadow-sm max-w-md"
  >
    <div class="flex flex-col gap-y-4">
      {#if usingOAuth}
        <div class="font-bold">Set Your Password</div>
        <div>
          You're using a social login (like Google or GitHub). You can set a password here to enable email/password login as an alternative.
        </div>
      {:else}
        <div class="font-bold">Reset via Email</div>
      {/if}
      <div>
        Click below to send a secure password reset link to {user?.email}.
      </div>
      <button
        class="btn btn-primary btn-wide {sentEmail ? '' : 'btn-gradient-electric'}"
        disabled={sendBtnDisabled}
        onclick={sendForgotPassword}
      >
        {sendBtnText}
      </button>
      <div class="success alert alert-success {sentEmail ? '' : 'hidden'}">
        Transmission sent! Check your inbox for the secure link.
      </div>
    </div>
  </div>
{/if}
</file>

<file path="src/routes/(admin)/account/+layout.server.ts">
import type { LayoutServerLoad } from "./$types"

export const load: LayoutServerLoad = async ({
  locals: { session },
  cookies,
}) => {
  // Session here is from authGuard hook

  return {
    session,
    cookies: cookies.getAll(),
  }
}
</file>

<file path="src/routes/(marketing)/contact_us/+page.svelte">
<script lang="ts">
  import { enhance, applyAction } from "$app/forms"
  import type { SubmitFunction } from "@sveltejs/kit"
  import type { FullAutoFill } from "svelte/elements"

  let errors: { [fieldName: string]: string } = $state({})
  let loading = $state(false)
  let showSuccess = $state(false)

  interface FormField {
    id: string
    label: string
    inputType: string
    autocomplete: FullAutoFill
  }

  const formFields: FormField[] = [
    {
      id: "first_name",
      label: "First Name *",
      inputType: "text",
      autocomplete: "given-name",
    },
    {
      id: "last_name",
      label: "Last Name *",
      inputType: "text",
      autocomplete: "family-name",
    },
    {
      id: "email",
      label: "Email *",
      inputType: "email",
      autocomplete: "email",
    },
    {
      id: "phone",
      label: "Phone Number",
      inputType: "tel",
      autocomplete: "tel",
    },
    {
      id: "company",
      label: "Company Name",
      inputType: "text",
      autocomplete: "organization",
    },
    {
      id: "message",
      label: "Message",
      inputType: "textarea",
      autocomplete: "off",
    },
  ]

  const handleSubmit: SubmitFunction = () => {
    loading = true
    errors = {}
    return async ({ result }) => {
      // The enhance function automatically handles form submission and result application.
      // We just need to manage our component's state based on the result.
      loading = false
      if (result.type === 'success' && result.status === 200) {
        showSuccess = true
      } else if (result.type === 'failure') {
        errors = result.data?.errors ?? {}
      } else if (result.type === 'error') {
        errors = { _: "An unexpected error occurred. Please try again." }
      }
    }
  }
</script>

<svelte:head>
  <title>Contact Us - Signal Lynx</title>
  <meta name="description" content="Open a channel to the Signal Lynx team. Get in touch on X, Telegram, or via our secure contact form." />
</svelte:head>

<div class="py-12 px-4 bg-base-100">
  <div class="max-w-3xl mx-auto text-center">
    <h1 class="text-4xl md:text-6xl font-bold text-primary">Open a Channel</h1>
    <p class="mt-4 text-xl max-w-2xl mx-auto">
      Got a burning question? A genius feature idea? Or maybe you just want to tell us our synthwave theme is fire? We're all ears. The fastest way to get our attention is to slide into our DMs or join the community chatter.
    </p>

    <div class="my-12">
      <h2 class="text-3xl font-bold text-secondary mb-6">The Fast Lane: X & Telegram</h2>
      <div class="flex flex-col sm:flex-row gap-6 justify-center">
        <a href="https://t.me/SignalLynx" target="_blank" rel="noopener noreferrer" class="btn btn-primary btn-lg flex-1 btn-gradient-electric">
          <svg class="w-6 h-6 mr-2" viewBox="0 0 24 24" fill="currentColor"><path d="M9.78 18.65l.28-4.23l7.68-6.92c.34-.31-.07-.46-.52-.19L7.74 13.3L3.64 12c-.88-.25-.89-1.37.2-1.64l16.4-5.99c.75-.29 1.44.24 1.2 1.18l-2.82 13.24c-.21.99-1.01 1.23-1.81.73l-5.35-3.95l-2.55 2.45c-.28.28-.56.42-1.01.42z"/></svg>
          Join the Command Center
        </a>
        <a href="https://twitter.com/SignalLynx" target="_blank" rel="noopener noreferrer" class="btn btn-primary btn-lg flex-1 btn-gradient-electric">
           <svg class="w-6 h-6 mr-2" viewBox="0 0 24 24" fill="currentColor"><path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" /></svg>
          Follow the Signal on X
        </a>
      </div>
    </div>

    <div class="divider text-xl font-bold my-12">OR</div>

    <div id="form-section">
      {#if showSuccess}
        <div class="card card-bordered shadow-lg bg-base-200 py-10 px-6 mx-auto max-w-lg">
          <h2 class="text-3xl font-bold text-success mb-4">Signal Received!</h2>
          <p class="text-lg">
            We've got your transmission. Our team of highly-trained cyber-lynx will decipher it and get back to you shortly. Keep an eye on your inbox.
          </p>
        </div>
      {:else}
        <div class="max-w-lg mx-auto">
          <h2 class="text-3xl font-bold text-secondary mb-2">The Formal Route</h2>
          <p class="mb-8">
            For partnership inquiries, custom quotes, or messages that require a bit more... gravitas. Fill this out, and a signal will be dispatched directly to our secure inbox.
          </p>
          <div class="card card-bordered shadow-lg bg-base-200 p-6">
            <form
              method="POST"
              action="?/submitContactUs"
              use:enhance={handleSubmit}
            >
              {#each formFields as field}
                <div class="form-control w-full">
                  <label for={field.id} class="label">
                    <span class="label-text font-bold">{field.label}</span>
                    {#if errors[field.id]}
                      <span class="label-text-alt text-error">{errors[field.id]}</span>
                    {/if}
                  </label>
                  {#if field.inputType === "textarea"}
                    <textarea
                      id={field.id}
                      name={field.id}
                      autocomplete={field.autocomplete}
                      rows={4}
                      class="textarea textarea-bordered h-24 {errors[field.id] ? 'textarea-error' : ''}"
                    ></textarea>
                  {:else}
                    <input
                      id={field.id}
                      name={field.id}
                      type={field.inputType}
                      autocomplete={field.autocomplete}
                      class="input input-bordered w-full {errors[field.id] ? 'input-error' : ''}"
                    />
                  {/if}
                </div>
              {/each}

              {#if errors._}
                <div role="alert" class="alert alert-error text-sm mt-4">
                  <span>{errors._}</span>
                </div>
              {/if}

              <div class="form-control mt-6">
                <button type="submit" class="btn btn-primary btn-gradient-electric" disabled={loading}>
                  {#if loading}
                    <span class="loading loading-spinner"></span>
                    Transmitting...
                  {:else}
                    Send Secure Message
                  {/if}
                </button>
              </div>
            </form>
          </div>
        </div>
      {/if}
    </div>
  </div>
</div>
</file>

<file path="src/routes/(marketing)/login/+layout.server.ts">
import type { LayoutServerLoad } from "./$types"

export const load: LayoutServerLoad = async ({
  locals: { session },
  cookies,
  url,
}) => {
  return {
    url: url.origin,
    cookies: cookies.getAll(),
    session,
  }
}
</file>

<file path="tailwind.config.ts">
import typography from '@tailwindcss/typography';
import daisyui from 'daisyui';

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{html,js,svelte,ts}'],
  theme: {
    extend: {
      fontFamily: {
        handwriting: ['Kalam', 'cursive'],
      },
    },
  },
  plugins: [typography, daisyui],
  daisyui: {
    themes: [
      {
        // The refined "Operator" theme, now with a Cyan accent
        saasstartertheme: {
          "color-scheme": "dark",
          
          // Gold/Orange from "SIGNAL LYNX" text - for major headlines
          "primary": "#ca7417",  //baseline is #F59E0B
          "primary-content": "#ffffff",
          
          // Vibrant Purple from the lynx fur - for primary actions
          "secondary": "#A855F7",
          "secondary-content": "#ffffff",

          // Bright Cyan for links and highlights
          "accent": "#00FFFF", 
          "accent-content": "#010516", // Black text for high contrast on the cyan

          "neutral": "#1F2937",
          "neutral-content": "#D1D5DB",

          "base-100": "#0d1117",
          "base-200": "#161b22", //baseline is #161b22
          "base-300": "#21262d",
          "base-content": "#c9d1d9",

          "info": "#3B82F6",
          "success": "#22C55E",
          "warning": "#FBBF24",
          "error": "#F87171",

          "info-content": "#ffffff",
          "success-content": "#ffffff",
          "warning-content": "#1F2937",
          "error-content": "#ffffff",
          
          "--rounded-btn": "1rem",
          "--rounded-box": "0.5rem",
        },
      },
    ],
  },
};
</file>

<file path="src/app.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom theme variables that are not part of DaisyUI's theme system */
:root {
  --radius-field: 0.5rem;
  --border: 1px;
  --depth: 1;
  --noise: 0;
}

a {
  @apply cursor-pointer;
}

/* Updated Supabase Auth Button Styling */
.authBtn {
  @apply btn; /* Keep base button styles */
  background-image: linear-gradient(to right, oklch(var(--p)) 0%, oklch(var(--s)) 100%);
  border: none;
  transition: background-size 0.3s ease-in-out, filter 0.3s ease-in-out;
  background-size: 100% 100%;
  color: oklch(var(--pc));
}
.authBtn:hover {
  background-size: 150% 150%;
  filter: brightness(1.15);
  /* The default DaisyUI hover sets a background-color, which would hide our gradient.
     We ensure it stays transparent so the gradient's size change is visible. */
  background-color: transparent; 
}

/* Hack to show loading text on disabled Supabase buttons */
button[disabled].authBtn {
  font-size: 0.001px;
  filter: brightness(65%);
}
button[disabled].authBtn::before {
  font-size: 14px;
  content: "Loading...";
  color: oklch(var(--pc));
}

/* Custom Gradient Button (for non-Supabase buttons) */
.btn-gradient-electric {
  background-image: linear-gradient(to right, oklch(var(--p)) 0%, oklch(var(--s)) 100%);
  border: none;
  transition: background-size 0.3s ease-in-out, filter 0.3s ease-in-out;
  background-size: 100% 100%;
  color: oklch(var(--pc));
}

.btn-gradient-electric:hover {
  background-size: 150% 150%;
  filter: brightness(1.15);
}
</file>

<file path="src/routes/(admin)/account/+layout.ts">
import {
  PUBLIC_SUPABASE_ANON_KEY,
  PUBLIC_SUPABASE_URL,
} from "$env/static/public"
import {
  createBrowserClient,
  createServerClient,
  isBrowser,
} from "@supabase/ssr"
import { redirect } from "@sveltejs/kit"
import type { Database } from "../../../DatabaseDefinitions.js"
import { CreateProfileStep } from "../../../config"
import { load_helper } from "$lib/load_helpers"

export const load = async ({ fetch, data, depends, url }) => {
  depends("supabase:auth")

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies
          },
        },
      })

  const { session, user } = await load_helper(data.session, supabase)
  if (!session || !user) {
    const redirectUrl = `/login?next=${url.pathname}`
    redirect(303, redirectUrl);
  }

  const { data: profile } = await supabase
    .from("profiles")
    .select(`*`)
    .eq("id", user.id)
    .single()

  const { data: aal } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()

  const createProfilePath = "/account/create_profile"
  const signOutPath = "/account/sign_out"
  if (
    profile &&
    !_hasFullProfile(profile) &&
    url.pathname !== createProfilePath &&
    url.pathname !== signOutPath &&
    CreateProfileStep
  ) {
    redirect(303, createProfilePath)
  }

  return {
    supabase,
    session,
    profile,
    user,
    amr: aal?.currentAuthenticationMethods,
  }
}

export const _hasFullProfile = (
  profile: Database["public"]["Tables"]["profiles"]["Row"] | null,
) => {
  if (!profile) {
    return false
  }
  if (!profile.full_name) {
    return false
  }
  if (!profile.company_name) {
    return false
  }
  if (!profile.website) {
    return false
  }

  return true
}
</file>

<file path="src/routes/(marketing)/search/+page.svelte">
<script lang="ts">
  import { page } from "$app/stores"
  import { browser } from "$app/environment"
  import { onMount } from "svelte"
  import Fuse from "fuse.js"
  import { goto } from "$app/navigation"
  import { dev } from "$app/environment"

  const fuseOptions = {
    keys: [
      { name: "title", weight: 3 },
      { name: "description", weight: 2 },
      { name: "body", weight: 1 },
    ],
    ignoreLocation: true,
    threshold: 0.3,
  }

  let fuse: Fuse<Result> | undefined = $state()

  let loading = $state(true)
  let error = $state(false)
  onMount(async () => {
    try {
      const response = await fetch("/search/api.json")
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      const searchData = await response.json()
      if (searchData && searchData.index && searchData.indexData) {
        const index = Fuse.parseIndex(searchData.index)
        fuse = new Fuse<Result>(searchData.indexData, fuseOptions, index)
      }
    } catch (e) {
      console.error("Failed to load search data", e)
      error = true
    } finally {
      loading = false;
      setTimeout(() => document.getElementById("search-input")?.focus(), 0);
    }
  })

  type Result = {
    item: {
      title: string
      description: string
      body: string
      path: string
    }
  }
  let results: Result[] = $state([])

  let searchQuery = $state(decodeURIComponent($page.url.hash.slice(1) ?? ""))
  $effect(() => {
    if (fuse) {
      results = fuse.search(searchQuery)
    }
  })

  $effect(() => {
    if (browser && window.location.hash.slice(1) !== searchQuery) {
      goto("#" + searchQuery, { keepFocus: true, replaceState: true })
    }
  })

  let focusItem = $state(0)
  function onKeyDown(event: KeyboardEvent) {
    if (event.key === "Escape") {
      searchQuery = ""
    } else if (event.key === "ArrowDown" || event.key === "ArrowUp") {
      event.preventDefault();
      focusItem += event.key === "ArrowDown" ? 1 : -1
      if (focusItem < 0) {
        focusItem = 0
      } else if (focusItem > results.length) {
        focusItem = results.length
      }
      if (focusItem === 0) {
        document.getElementById("search-input")?.focus()
      } else {
        document.getElementById(`search-result-${focusItem}`)?.focus()
      }
    }
  }
</script>

<svelte:window onkeydown={onKeyDown} />

<svelte:head>
  <title>Search Terminal - Signal Lynx</title>
  <meta name="description" content="Query the Signal Lynx databanks." />
</svelte:head>

<div class="py-8 lg:py-12 px-6 max-w-2xl mx-auto">
  <div class="text-center">
      <h1 class="text-4xl md:text-6xl font-bold text-primary">Intel Terminal</h1>
      <p class="mt-2 text-lg">Query the databanks. Find what you need.</p>
  </div>
  
  <div class="relative mt-10 mb-5 w-full">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg class="h-5 w-5 text-base-content/50" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
      </svg>
    </div>
    <input
      id="search-input"
      type="text"
      class="input input-bordered w-full pl-10 text-lg"
      placeholder="Search..."
      bind:value={searchQuery}
      onfocus={() => (focusItem = 0)}
      aria-label="Search input"
      disabled={loading || error}
    />
  </div>

  <!-- --- UX UPGRADE: LOADING AND ERROR STATES --- -->
  {#if loading}
    <div class="text-center mt-10 text-accent text-xl animate-pulse">Connecting to Intel Terminal...</div>
  {:else if error}
    <div class="text-center mt-10 text-error text-xl">
      Error: Connection to intel terminal failed. Please try again later.
    </div>
  {:else if searchQuery.length > 0 && results.length === 0}
    <div class="text-center mt-10 text-accent text-xl">No Signal Found for "{searchQuery}"</div>
    {#if dev}
      <div class="text-center mt-4 font-mono text-base-content/50">
        (Dev Mode: Missing content? Rebuild your local search index with `npm run build`)
      </div>
    {/if}
  {/if}

  <div class="mt-8 space-y-6">
    {#each results as result, i}
      <a
        href={result.item.path || "/"}
        id="search-result-{i + 1}"
        class="card bg-base-200 shadow-lg overflow-hidden transition-all duration-300 ease-in-out hover:shadow-2xl hover:border-accent border-2 border-transparent focus:border-accent focus:outline-none"
      >
        <div class="card-body">
          <h2 class="card-title text-2xl text-secondary">{result.item.title}</h2>
          <div class="text-sm text-accent font-mono">
            PATH: {result.item.path}
          </div>
          <p class="text-base-content/80 mt-2">{result.item.description}</p>
        </div>
      </a>
    {/each}
  </div>
</div>
</file>

<file path="src/routes/(marketing)/+page.svelte">
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  import {
    WebsiteName,
    WebsiteBaseUrl,
    WebsiteDescription,
  } from "./../../config"
  import { allProducts } from "$lib/data/products";

  const ldJson = {
    "@context": "https://schema.org",
    "@type": "WebSite",
    "name": WebsiteName,
    "url": WebsiteBaseUrl,
    "description": WebsiteDescription,
  }
  const jsonldScript = `<script type="application/ld+json">${
    JSON.stringify(ldJson) + "<"
  }/script>`

  const featureShowcase = [
    {
      title: "The Unhackable Fortress",
      description: "We built our tools on a simple premise: your keys, your server, your rules. Signal Lynx runs on your hardware, so your API keys never get caught in the crossfire of someone else's data breach.",
      details: ["End-to-end TLS encryption", "Hardened firewall rules on setup", "Local-first key management"]
    },
    {
      title: "Know Your PnL. Down to the Penny.",
      description: "Stop guessing. Start knowing. Our dashboard gives you a crystal-clear view of your trade history, tracking every entry, exit, and the glorious (or painful) P&L.",
      details: ["Real-time trade and fill tracking", "Automated P&L calculation per trade", "Consolidated history across exchanges"]
    },
    {
      title: "Built for the Night-Shift Nation",
      description: "For the side-hustlers, the after-hours builders, and the traders watching charts when the rest of the world is asleep. We build robust, affordable tools that respect your time and your budget.",
      details: ["Fair, flat-rate pricing for solo operators", "Tools that just work, no babysitting required", "Direct access to the devs who build it"]
    },
    {
      title: "Never Miss a Fill. Ever.",
      description: "Get real-time Telegram notifications the second your bot makes a move. Monitor trades and alerts from anywhere, even when you're pretending to work.",
      details: ["Instant push notifications", "Monitor multiple accounts & exchanges", "Full trade lifecycle alerts"]
    },
    {
      title: "One-Click Deployment",
      description: "Our Signal Shield installer streamlines your webhook setup on any Windows machine or VPS. Go from zero to a fully hardened, trade-ready server in under 15 minutes.",
      details: ["Automated NGINX & SSL config", "Secure firewall rules by default", "Built for operators, not IT admins"]
    },
    {
      title: "No-Nonsense, No-Surprise Pricing",
      description: "Tired of predatory pricing tiers and success taxes? So are we. Our model is simple: one flat fee for everything. We don't punish you for growing.",
      details: ["One flat, predictable fee", "All features included, always", "Cancel anytime, no questions asked"]
    },
    {
      title: "Works When the Internet Doesn't",
      description: "With Key Commander's offline validation, your users' software stays running even when their connection drops. Deliver a rock-solid experience your customers can rely on.",
      details: ["Secure offline session tokens (Ed25519)", "Zero interruptions for your end-users", "Full control over token lifespan"]
    },
    {
      title: "Ship Software, Not Headaches",
      description: "Our self-hosted Key Commander is for builders who are sick of paying a tax on their own success. Manage keys, subs, and trials from a GUI that actually makes sense.",
      details: ["Automated key generation & delivery", "Full Stripe integration", "Scheduled, automated database backups"]
    }
  ];

  let scrollContainer: HTMLElement;
  let cards: HTMLElement[] = [];
  let currentCardIndex = 0;
  let scrollInterval: ReturnType<typeof setInterval>;

  function scrollToCard(index: number) {
    if (!scrollContainer || !cards.length) return;
    const card = cards[index];
    const firstCard = cards[0];
    if (!card || !firstCard) return;
    const targetScrollLeft = card.offsetLeft - firstCard.offsetLeft;
    scrollContainer.scrollTo({
        left: targetScrollLeft,
        behavior: 'smooth'
    });
    currentCardIndex = index;
  }

  function advanceCarousel(direction: 'forward' | 'backward') {
    let nextIndex = currentCardIndex;
    if (direction === 'forward') {
      nextIndex = (currentCardIndex + 1) % cards.length;
    } else {
      nextIndex = (currentCardIndex - 1 + cards.length) % cards.length;
    }
    scrollToCard(nextIndex);
  }

  function handleManualScroll(direction: 'forward' | 'backward') {
    clearInterval(scrollInterval);
    advanceCarousel(direction);
    startAutoScroll();
  }

  function startAutoScroll() {
    scrollInterval = setInterval(() => {
      advanceCarousel('forward');
    }, 5000);
  }

  onMount(() => {
    if (scrollContainer) {
      cards = Array.from(scrollContainer.querySelectorAll('.feature-card'));
    }
    startAutoScroll();
    scrollContainer.addEventListener('mouseenter', () => clearInterval(scrollInterval));
    scrollContainer.addEventListener('mouseleave', startAutoScroll);
  });

  onDestroy(() => {
    clearInterval(scrollInterval);
  });

</script>

<svelte:head>
  <title>{WebsiteName}: Local-First Automation for Traders & Builders</title>
  <meta name="description" content="Secure, self-hosted automation tools. Take control of your TradingView webhooks and software licensing with Signal Lynx. Your keys, your server, your rules." />
  <!-- eslint-disable-next-line svelte/no-at-html-tags -->
  {@html jsonldScript}
</svelte:head>

<!-- Banner Image Section -->
<div class="w-full bg-base-200 flex justify-center">
  <img src="/images/SignalLynxHomePageBanner.png" alt="Signal Lynx synthwave and retro electronics collage" class="w-full max-w-7xl object-contain max-h-[50vh]"/>
</div>

<!-- Hero Text Section -->
<div class="hero min-h-[50vh] bg-base-200">
  <div class="hero-content text-center py-12">
    <div class="max-w-2xl flex flex-col items-center">
      <h1
        class="text-4xl md:text-6xl font-bold text-primary px-2"
        style="line-height: 1.2;"
      >
        Automate Everything. Own Everything.
      </h1>
      <h2 class="mt-6 md:mt-10 text-lg md:text-2xl max-w-xl">
        Local-first automation tools for traders and builders who'd rather spend their money on a second monitor than on someone else's cloud.
      </h2>
      <div
        class="mt-8 flex flex-col sm:flex-row flex-wrap gap-4 place-content-center"
      >
        <a href="#pricing">
          <button class="btn btn-primary btn-lg px-8 btn-gradient-electric">Start Free Trial</button>
        </a>
        <a href="/trading-automation">
          <button class="btn btn-outline btn-lg px-8">Explore the Arsenal</button>
        </a>
      </div>
    </div>
  </div>
</div>

<!-- Trust Bar -->
<div class="bg-base-100 py-12">
    <div class="max-w-5xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-8 text-center px-4">
        <div class="flex flex-col items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-success" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
            <h4 class="font-bold mt-2 text-xl">Your Keys, Your Fortress</h4>
            <p class="text-base-content/70">Your API keys live on your machine, encrypted and untouchable. We never see them. Period.</p>
        </div>
        <div class="flex flex-col items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-success" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                 <path stroke-linecap="round" stroke-linejoin="round" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v.01M12 6v-1h4a1 1 0 011 1v10a1 1 0 01-1 1h-4v-1m-4-1v1H7a1 1 0 01-1-1V7a1 1 0 011-1h4v1m0 0h-4" />
            </svg>
            <h4 class="font-bold mt-2 text-xl">Predictable & Flat-Rate</h4>
            <p class="text-base-content/70">One fair price. No surprise tiers. We don't believe in taxing you for your own success.</p>
        </div>
        <div class="flex flex-col items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-success" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h4 class="font-bold mt-2 text-xl">Live Before the Caffeine Hits</h4>
            <p class="text-base-content/70">Go from zero to a fully-hardened, automated setup in less time than it takes to brew a pot of coffee.</p>
        </div>
    </div>
</div>

<!-- About Us / Manifesto Section -->
<div class="py-16 bg-base-200">
  <div class="max-w-4xl mx-auto px-4 text-center">
    <h2 class="text-4xl md:text-5xl font-bold text-primary mb-12">Forged in Late-Night Code & Early-Morning Markets</h2>
    <div class="space-y-8 text-lg text-base-content/80 text-left">
      <div>
        <h3 class="font-bold text-2xl text-accent">We Believe in Owning Your Stack.</h3>
        <p class="mt-2">
          Signal Lynx was born out of pure frustration. We were a handful of engineers and traders tired of "cloud-based" tools that leaked API keys like a sieve and automation platforms that missed trades while we were grabbing a snack. So we built our own neon-fueled arsenal. No VC yachts, no endless upsells, just battle-tested code we run on our own rigs.
        </p>
      </div>
       <div>
        <h3 class="font-bold text-2xl text-accent">We Believe Automation Should Be Easy.</h3>
        <p class="mt-2">
          We think automation should be as simple as pressing "go." Every feature—from our one-click setup wizard to our self-hosted license hub—was crafted with beginners in mind. No obscure configs, no hidden menus, just intuitive workflows that get you trading or shipping software in minutes.
        </p>
      </div>
      <div>
        <h3 class="font-bold text-2xl text-accent">We Believe in Fair Pricing.</h3>
        <p class="mt-2">
          Forged in 2 AM coding sprints and powered by way too many energy drinks, Signal Lynx is built by folks who still punch a time clock by day. We refuse to slap Fortune 500 prices on software you host yourself. Others call it disruptive; we just call it fair.
        </p>
      </div>
    </div>
  </div>
</div>

<!-- Feature Showcase Section -->
<div class="py-16 bg-base-100 overflow-hidden relative">
  <div class="max-w-7xl mx-auto px-4">
    <div class="relative">
        <!-- Left Arrow -->
        <button on:click={() => handleManualScroll('backward')} class="btn btn-circle btn-ghost absolute left-[-1rem] top-1/2 -translate-y-1/2 z-10 hidden md:flex">❮</button>

        <div bind:this={scrollContainer} class="flex space-x-8 overflow-x-auto pb-4 hide-scrollbar snap-x snap-mandatory">
        {#each featureShowcase as feature}
            <!-- Add a class for selection and snap alignment -->
            <div class="feature-card card bg-base-200 w-80 md:w-96 flex-none shadow-xl flex flex-col snap-start">
            <div class="card-body">
                <h3 class="card-title text-2xl text-accent">{feature.title}</h3>
                <p class="text-base-content/70 mt-2 flex-grow">{feature.description}</p>
                <ul class="mt-4 space-y-2">
                {#each feature.details as detail}
                    <li class="flex items-center gap-2">
                    <svg class="w-5 h-5 text-success shrink-0" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 16.4L6 12.4L7.4 11L10 13.6L16.6 7L18 8.4L10 16.4Z" fill="currentColor"/></svg>
                    <span>{detail}</span>
                    </li>
                {/each}
                </ul>
            </div>
            </div>
        {/each}
        </div>

        <!-- Right Arrow -->
        <button on:click={() => handleManualScroll('forward')} class="btn btn-circle btn-ghost absolute right-[-1rem] top-1/2 -translate-y-1/2 z-10 hidden md:flex">❯</button>
    </div>
  </div>
</div>

<div id="pricing" class="py-16 bg-base-200">
  <div class="max-w-4xl mx-auto text-center mb-12 px-4">
      <h2 class="text-4xl md:text-5xl font-bold text-primary pb-2">
        Meet the Arsenal
      </h2>
      <p class="mt-4 text-xl">
        No surprise tiers. No enterprise sales calls. Just gear that gets the job done.
      </p>
  </div>

  <!-- Powered Up Product Cards -->
  <div class="max-w-7xl mx-auto flex flex-col lg:flex-row gap-8 px-4 justify-center items-stretch">
    {#each allProducts as product (product.id)}
       <div class="card bg-base-100 shadow-xl flex-1 flex flex-col min-w-[280px] max-w-[400px] border-4 border-transparent transition-all duration-300 hover:border-accent">
            <div class="card-body p-8 flex flex-col">
                <div class="text-center">
                    <h2 class="card-title justify-center text-2xl font-bold text-secondary">{product.name}</h2>
                    <h3 class="mt-1 text-lg font-normal text-accent">{product.title}</h3>
                </div>
                <p class="text-base-content/80 mt-4">{product.tagline}</p>

                <ul class="my-6 space-y-3 text-left flex-grow">
                {#each product.features as feature}
                    <li class="flex items-start gap-3">
                    <svg class="w-6 h-6 text-success shrink-0 mt-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 16.4L6 12.4L7.4 11L10 13.6L16.6 7L18 8.4L10 16.4Z" fill="currentColor"/></svg>
                    <span>{feature}</span>
                    </li>
                {/each}
                </ul>

                <div class="mt-auto pt-4">
                    <p class="text-5xl font-bold text-center">{product.price}</p>
                    <div class="card-actions justify-center mt-6">
                        <a href={product.stripe_price_id ? `/account/subscribe/${product.stripe_price_id}` : '/login'} class="btn btn-primary btn-wide btn-gradient-electric">{product.ctaLabel}</a>
                    </div>
                    <p class="text-center text-xs text-base-content/50 mt-2">{product.footnote}</p>
                </div>
            </div>
        </div>
    {/each}
  </div>
</div>

<!-- Integrations & Getting Started Section -->
<div class="py-16 bg-base-100">
  <div class="max-w-5xl mx-auto text-center px-4">

    <!-- Part 1: The Arsenal (Integrations) -->
    <h2 class="text-4xl md:text-5xl font-bold text-primary pb-2">
      Works With Your Setup
    </h2>
    <p class="mt-4 text-xl max-w-2xl mx-auto">
      Signal Lynx integrates with the tools you already use. No weird workarounds, no proprietary nonsense. Just a seamless link to your existing workflow.
    </p>

    <div class="mt-12">
      <div class="grid grid-cols-2 sm:grid-cols-4 gap-8 items-center">
        <div class="flex justify-center" title="TradingView">
          <img src="/logos/tradingview.png" alt="TradingView Logo" class="h-12 sm:h-16" />
        </div>
        <div class="flex justify-center" title="Stripe">
          <img src="/logos/stripe.png" alt="Stripe Logo" class="h-20 sm:h-24" />
        </div>
        <div class="flex justify-center" title="Kraken">
          <img src="/logos/kraken.png" alt="Kraken Logo" class="h-20 sm:h-24" />
        </div>
        <div class="flex justify-center" title="Binance.US">
          <img src="/logos/binanceus.png" alt="Binance.US Logo" class="h-20 sm:h-24" />
        </div>
        <div class="flex justify-center" title="Gemini">
          <img src="/logos/gemini.png" alt="Gemini Logo" class="h-20 sm:h-24" />
        </div>
        <div class="flex justify-center" title="Docker">
           <img src="/logos/docker.png" alt="Docker Logo" class="h-16 sm:h-20" />
        </div>
        <div class="flex justify-center" title="Telegram">
           <img src="/logos/telegram.png" alt="Telegram Logo" class="h-12 sm:h-16" />
        </div>
         <div class="flex justify-center" title="Windows">
           <img src="/logos/windows.png" alt="Windows Logo" class="h-12 sm:h-16" />
        </div>
      </div>
    </div>

    <!-- Divider -->
    <div class="divider my-16"></div>

    <!-- Part 2: The On-Ramp (Getting Started) -->
    <h2 class="text-4xl md:text-5xl font-bold text-primary pb-2">
      The Operator's On-Ramp
    </h2>
    <p class="mt-4 text-xl max-w-2xl mx-auto">
      We believe getting started shouldn't require a degree in DevOps. Our entire process is built on simplicity and speed, regardless of which tool you're deploying.
    </p>

    <div class="mt-12 grid grid-cols-1 md:grid-cols-3 gap-8 text-left">
      <!-- Step 1 -->
      <div class="card bg-base-200 shadow-xl">
        <div class="card-body">
          <div class="font-bold text-secondary text-4xl mb-2">1.</div>
          <h3 class="card-title text-2xl text-accent">Simplified Deployment</h3>
          <p>Whether you're running our one-click installer for trading tools or deploying Key Commander with a single Docker command, we handle the complex server setup for you.</p>
        </div>
      </div>

      <!-- Step 2 -->
      <div class="card bg-base-200 shadow-xl">
        <div class="card-body">
           <div class="font-bold text-secondary text-4xl mb-2">2.</div>
          <h3 class="card-title text-2xl text-accent">Guided GUI Configuration</h3>
          <p>Forget messing with config files or terminals. Our intuitive GUIs for both Lynx-Relay and Key Commander walk you through every step, from loading API keys to setting up email alerts.</p>
        </div>
      </div>

      <!-- Step 3 -->
      <div class="card bg-base-200 shadow-xl">
        <div class="card-body">
           <div class="font-bold text-secondary text-4xl mb-2">3.</div>
          <h3 class="card-title text-2xl text-accent">Go Live in Minutes</h3>
          <p>Our entire philosophy is built around getting you from zero to fully operational as fast as humanly possible. Your time is valuable—spend it on your strategies, not on setup.</p>
        </div>
      </div>
    </div>
     <div class="mt-12">
      <a href="/docs" class="btn btn-primary btn-lg">Dive into the Docs</a>
    </div>
  </div>
</div>
<style>
  .hide-scrollbar {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  .hide-scrollbar::-webkit-scrollbar {
    display: none;  /* Chrome, Safari, and Opera */
  }
</style>
</file>

<file path="src/routes/(marketing)/+layout.svelte">
<script lang="ts">
  import { WebsiteName } from "./../../config"
  import "../../app.css"

  interface Props {
    children?: import("svelte").Snippet
  }

  let { children }: Props = $props()
</script>

<div class="navbar bg-base-100 container mx-auto">
  <div class="flex-1">
    <a class="btn btn-ghost text-xl" href="/">
      <img src="/images/signal-lynx-logo.png" alt="Signal Lynx Logo" class="h-10 w-auto mr-2" />
      {WebsiteName}
    </a>
  </div>
  <div class="flex-none">
    <ul class="menu menu-horizontal px-1 hidden sm:flex font-bold text-lg">
      <li class="dropdown dropdown-hover md:mx-2">
        <div tabindex="0" role="button">Products</div>
        <ul class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
          <li><a href="/trading-automation">Trading Automation</a></li>
          <li><a href="/license-hub">Key Commander</a></li>
        </ul>
      </li>
      <li class="md:mx-2"><a href="/docs">Docs</a></li>
      <li class="md:mx-2"><a href="/faq">FAQ</a></li>
      <li class="md:mx-2"><a href="/contact_us">Contact</a></li>
      <li class="md:mx-2"><a href="/account">Account</a></li>
      <li class="md:mx-0">
        <a href="/search" aria-label="Search">
          <svg
            fill="currentColor"
            class="w-6 h-6"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
            ><path
              d="M17.545 15.467l-3.779-3.779a6.15 6.15 0 0 0 .898-3.21c0-3.417-2.961-6.377-6.378-6.377A6.185 6.185 0 0 0 2.1 8.287c0 3.416 2.961 6.377 6.377 6.377a6.15 6.15 0 0 0 3.115-.844l3.799 3.801a.953.953 0 0 0 1.346 0l.943-.943c.371-.371.236-.84-.135-1.211zM4.004 8.287a4.282 4.282 0 0 1 4.282-4.283c2.366 0 4.474 2.107 4.474 4.474a4.284 4.284 0 0 1-4.283 4.283c-2.366-.001-4.473-2.109-4.473-4.474z"
              fill="currentColor"
            /></svg
          >
        </a>
      </li>
    </ul>
    <div class="dropdown dropdown-end sm:hidden">
      <button type="button" class="btn btn-ghost btn-circle" aria-label="Menu">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          ><path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h7"
          /></svg
        >
      </button>
      <ul
        class="menu menu-lg dropdown-content mt-3 z-1 p-2 shadow-sm bg-base-100 rounded-box w-52 font-bold"
      >
        <li>
          <span>Products</span>
          <ul class="p-2">
            <li><a href="/trading-automation">Trading Automation</a></li>
            <li><a href="/license-hub">Key Commander</a></li>
          </ul>
        </li>
        <li><a href="/docs">Docs</a></li>
        <li><a href="/faq">FAQ</a></li>
        <li><a href="/contact_us">Contact Us</a></li>
        <li><a href="/account">Account</a></li>
        <li><a href="/search">Search</a></li>
      </ul>
    </div>
  </div>
</div>

<div class="">
  {@render children?.()}
</div>

<!-- Spacer grows so the footer can be at bottom on short pages -->
<div class="grow"></div>
<div class="">
  <div class="border-t max-w-[1000px] mx-auto"></div>
  <footer
    class="footer md:footer-horizontal p-10 gap-x-48 lg:gap-x-64 xl:gap-x-96 place-content-center text-base"
  >
    <nav>
      <span class="footer-title opacity-80">Products</span>
      <a class="link link-hover mb-1" href="/trading-automation">Trading Automation</a>
      <a class="link link-hover my-1" href="/license-hub">Key Commander</a>
    </nav>
    <nav>
        <span class="footer-title opacity-80">Company</span>
        <a class="link link-hover my-1" href="/docs">Docs</a>
        <a class="link link-hover my-1" href="/faq">FAQ</a>
        <a class="link link-hover my-1" href="/contact_us">Contact Us</a>
    </nav>
    <nav>
        <span class="footer-title opacity-80">Community</span>
        <a href="https://t.me/SignalLynx" class="link link-hover mb-1">Telegram</a>
        <a href="https://twitter.com/SignalLynx" class="link link-hover my-1">X / Twitter</a>
      </nav>
  </footer>
</div>
</file>

<file path="README.md">
<p align="center">
  <img src="https://raw.githubusercontent.com/TheGrandGear99/Signal-Lynx/main/static/images/signal-lynx-logo-text-light.png" alt="Signal Lynx Logo" width="420">
</p>

<p align="center">
  <a href="https://github.com/TheGrandGear99/Signal-Lynx/actions/workflows/build.yml" target="_blank"><img src="https://github.com/TheGrandGear99/Signal-Lynx/actions/workflows/build.yml/badge.svg?branch=main" alt="Built Status"></a>
  <a href="https://github.com/TheGrandGear99/Signal-Lynx/actions/workflows/format.yml" target="_blank"><img src="https://github.com/TheGrandGear99/Signal-Lynx/actions/workflows/format.yml/badge.svg?branch=main" alt="Format Check"></a>
  <a href="https://github.com/TheGrandGear99/Signal-Lynx/actions/workflows/linting.yml" target="_blank"><img src="https://github.com/TheGrandGear99/Signal-Lynx/actions/workflows/linting.yml/badge.svg?branch=main" alt="Linting"></a>
  <a href="https://github.com/TheGrandGear99/Signal-Lynx/blob/main/LICENSE" target="_blank"><img src="https://img.shields.io/badge/License-MIT-brightgreen?labelColor=32383f" alt="License"></a>
</p>

<p align="center">
  <a href="https://www.signallynx.com"><strong>Live Production Site</strong></a> •
  <a href="#developer-onboarding"><strong>Developer Onboarding</strong></a> • 
  <a href="https://github.com/TheGrandGear99/Signal-Lynx/issues"><strong>Report an Issue</strong></a>
</p>

<br/>

# Signal Lynx: Source Code & Mission Briefing

This repository contains the full source code for the **Signal Lynx** platform, a suite of local-first, security-focused automation tools for traders and software developers.

## Core Features

- **Robust User Authentication:** Secure sign-up, sign-in, password recovery, and email verification powered by Supabase Auth.
- **Branded Marketing Website:** A full suite of public-facing pages (Home, Product Pages, FAQ, Docs, Contact) with a cohesive, high-energy brand identity.
- **Dedicated Product Pages:** In-depth pages for the **Trading Automation** suite (Signal Shield & Lynx-Relay) and the **Key Commander** licensing hub.
- **User Command Center:** A private, authenticated area for users to manage their accounts.
    - **Personalized Dashboard:** A dynamic dashboard showing account status and guiding users to key actions.
    - **Subscription & Billing Management:** Full integration with Stripe Checkout and the Stripe Customer Portal for self-serve billing management.
    - **The Arsenal (Downloads):** A dedicated page for users to download their licensed software.
    - **Secure Settings Management:** Users can update their profile, change their email, and reset their password.
- **Transactional Emails:** On-brand, automated welcome emails and other communications.
- **Integrated Site Search:** A fast, client-side search engine that indexes all marketing content.

## Tech Stack

- **Web Framework:** SvelteKit 5
- **Styling:** TailwindCSS with the DaisyUI component library
- **Backend & Database:** Supabase (PostgreSQL, Auth)
- **Payments:** Stripe Checkout & Customer Portal
- **Deployment:** Cloudflare Pages

## Developer Onboarding

This guide is for new developers joining the Signal Lynx project to get their local environment running.

### 1. Local Environment Setup
```bash
# Clone the repository
git clone https://github.com/TheGrandGear99/Signal-Lynx.git

# Navigate into the project directory
cd Signal-Lynx

# Install dependencies
npm install

# Create the local environment file from the example
cp .env.example .env.local

# Run the local development server
npm run dev -- --open
</file>

<file path="package.json">
{
  "name": "signal-lynx",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite dev",
    "build": "vite build",
    "preview": "vite preview",
    "check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
    "check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
    "test": "vitest",
    "test_run": "vitest run",
    "test:e2e": "playwright test",
    "lint": "eslint .",
    "format": "prettier --write --plugin prettier-plugin-svelte ./",
    "format_check": "prettier --check --plugin prettier-plugin-svelte ./"
  },
  "engines": {
    "node": ">=18"
  },
  "devDependencies": {
    "@playwright/test": "1.44.0",
    "@sveltejs/adapter-auto": "6.0.1",
    "@sveltejs/kit": "2.22.0",
    "@sveltejs/vite-plugin-svelte": "5.1.0",
    "@tailwindcss/typography": "0.5.13",
    "@types/glob": "8.1.0",
    "@types/html-to-text": "9.0.4",
    "@types/jsdom": "21.1.7",
    "@typescript-eslint/eslint-plugin": "6.20.0",
    "@typescript-eslint/parser": "6.19.0",
    "autoprefixer": "10.4.19",
    "daisyui": "4.12.10",
    "eslint": "8.57.0",
    "eslint-config-prettier": "9.1.0",
    "eslint-plugin-svelte": "2.45.1",
    "fuse.js": "7.0.0",
    "glob": "10.4.5",
    "html-to-text": "9.0.5",
    "jsdom": "24.1.1",
    "postcss": "8.4.31",
    "prettier": "3.1.0",
    "prettier-plugin-svelte": "3.2.6",
    "super-sitemap": "0.15.1",
    "svelte": "5.34.7",
    "svelte-check": "4.0.0",
    "tailwindcss": "3.4.7",
    "typescript": "5.5.0",
    "vite": "6.3.5",
    "vitest": "3.0.7"
  },
  "type": "module",
  "dependencies": {
    "@supabase/auth-ui-shared": "0.1.8",
    "@supabase/auth-ui-svelte": "0.2.9",
    "@supabase/ssr": "0.5.2",
    "@supabase/supabase-js": "2.50.0",
    "handlebars": "4.7.8",
    "resend": "3.5.0",
    "stripe": "13.3.0"
  },
  "overrides": {
    "@supabase/auth-ui-svelte": {
      "svelte": "$svelte"
    },
    "@supabase/ssr": {
      "cookie": "0.7.0"
    },
    "@sveltejs/kit": {
      "cookie": "0.7.0"
    }
  }
}
</file>

</files>
